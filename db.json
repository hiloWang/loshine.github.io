{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/grids-responsive-min.css","path":"css/grids-responsive-min.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/pure-min.css","path":"css/pure-min.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.pack.js","path":"js/fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/jquery.fancybox.js","path":"js/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"ce4808ba274df5b0f0a8bdffbc2d2ca7b1658fd4","modified":1457020548000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1457016809000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1457016809000},{"_id":"themes/maupassant/_config.yml","hash":"e6a87501e912bbbc18034a90e051bb631f76ac85","modified":1457016809000},{"_id":"themes/maupassant/README.md","hash":"8426664cffd2e2186f4a6e6d734bdf036cbeafe6","modified":1457016809000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1457016809000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1457018752000},{"_id":"source/_posts/2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md","hash":"2b8cf3de05d5b9db85bc973d1653dedae9fac5ce","modified":1457019423000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1457016809000},{"_id":"source/_posts/2015-08-18-Java中的单例设计模式.md","hash":"0ad131e200c2a5d642371b8ef805ea49ec6f1bfd","modified":1457021256000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1457016809000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1457016784000},{"_id":"themes/maupassant/.git/index","hash":"3e8f4bbfbe25e1e35546c7330a00d6fe9e0b3095","modified":1457016809000},{"_id":"themes/maupassant/.git/packed-refs","hash":"319b065ef59be147bde74b29b2888b78b14d2be8","modified":1457016809000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1457016809000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1457016809000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1457016809000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1457016809000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1457016809000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1457016809000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1457016809000},{"_id":"themes/maupassant/layout/base.jade","hash":"03834f6c0c2df16ead0d543d2c927a2c472097d5","modified":1457016809000},{"_id":"themes/maupassant/layout/index.jade","hash":"a83e09d1dc0a28784089ff279cb7372757b25c04","modified":1457016809000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1457016809000},{"_id":"themes/maupassant/layout/post.jade","hash":"6095c96ad52e2e601076ade9ca93ae671923e41a","modified":1457016809000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1457016784000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1457016784000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"1e73c8b3498e28eb9e683d8b26619b7ac84795b5","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"bf23a097203f019f0abf1d6f0042158f595f6b61","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"5786f5ddb4ef3cc9be482a03689ab7bf9cec7214","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"77d650bbe44ef079ab55bd32bad0e222a0fa5c81","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"b321ab21a788c3e14236d736448350d2642d63cd","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1457016809000},{"_id":"themes/maupassant/source/css/grids-responsive-min.css","hash":"703826508193cbe21f2745d3e837256e224eb512","modified":1457016809000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"3e5850dfd0ac87fe34a5c680d50f300536542bae","modified":1457016809000},{"_id":"themes/maupassant/source/css/normalize.css","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1457016809000},{"_id":"themes/maupassant/source/css/style.scss","hash":"ab0a62b9e17133185baa76dc2504bcf2b23f3a09","modified":1457016809000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1457016809000},{"_id":"themes/maupassant/source/css/pure-min.css","hash":"8cf7ea3e9e00e752de63fbc443e9300366327cd9","modified":1457016809000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1457016809000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1457016809000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1457016809000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"520f8ee477fabdb450f51f764f10944b54d785ac","modified":1457016809000},{"_id":"themes/maupassant/source/js/fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1457016809000},{"_id":"themes/maupassant/source/js/jquery.fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1457016809000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1457016809000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1457016809000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1457016809000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1457016809000},{"_id":"themes/maupassant/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1457016809000},{"_id":"themes/maupassant/.git/objects/pack/pack-daf53be855388277875a7b18cb989a4aac68e96e.idx","hash":"b1ca3b96c3b160f8804cab48d75efa9c73843329","modified":1457016809000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"d9119a36111c9bfb720bc912e1f07f418b7a738b","modified":1457016809000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"1e73c8b3498e28eb9e683d8b26619b7ac84795b5","modified":1457016809000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1457016809000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"1e73c8b3498e28eb9e683d8b26619b7ac84795b5","modified":1457016809000},{"_id":"themes/maupassant/.git/objects/pack/pack-daf53be855388277875a7b18cb989a4aac68e96e.pack","hash":"c7bd5ca55da5d2e24281a3894c6bce283e8e99c4","modified":1457016809000},{"_id":"public/archives/index.html","hash":"3d0bf3bc432f86b91d1bbb865fa4a653531730a8","modified":1457021324977},{"_id":"public/archives/2015/index.html","hash":"3d0bf3bc432f86b91d1bbb865fa4a653531730a8","modified":1457021324977},{"_id":"public/archives/2015/08/index.html","hash":"3d0bf3bc432f86b91d1bbb865fa4a653531730a8","modified":1457021324977},{"_id":"public/index.html","hash":"1e87958110792edc25269c8677e79f5085a2134f","modified":1457021324977},{"_id":"public/tags/jekyll/index.html","hash":"1038e7c4aa1f5574f87be78d54d94f725dbddcc4","modified":1457021324977},{"_id":"public/tags/github/index.html","hash":"4ffe6077b0d02a26be1cb5dfb4ba39a7996f263b","modified":1457021324978},{"_id":"public/tags/github-pages/index.html","hash":"66e9cf83dfca2b746ee15f41250710e377515f1a","modified":1457021324978},{"_id":"public/2015/08/17/使用Jekyll在Github-Pages上搭建个人博客/index.html","hash":"e8053f3ec9d53c3cc533c15b5ff8cf508fe2f23a","modified":1457021324978},{"_id":"public/2015/08/18/Java中的单例设计模式/index.html","hash":"a9c73368877ccf7ba2c94316bc99b6541186e67e","modified":1457021324977},{"_id":"public/tags/设计模式/index.html","hash":"b5dc0f275f62c50358f89b66fbb750d0e5c9529c","modified":1457021324978},{"_id":"public/tags/Java/index.html","hash":"564dd6bddec7ab105e1bf52dc32bbeb79baf18cf","modified":1457021324978},{"_id":"public/CNAME","hash":"ce4808ba274df5b0f0a8bdffbc2d2ca7b1658fd4","modified":1457021170113},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1457021170114},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1457021170114},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1457021170114},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1457021170114},{"_id":"public/css/grids-responsive-min.css","hash":"703826508193cbe21f2745d3e837256e224eb512","modified":1457021170145},{"_id":"public/css/jquery.fancybox.css","hash":"3e5850dfd0ac87fe34a5c680d50f300536542bae","modified":1457021170145},{"_id":"public/css/normalize.css","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1457021170145},{"_id":"public/js/codeblock-resizer.js","hash":"520f8ee477fabdb450f51f764f10944b54d785ac","modified":1457021170146},{"_id":"public/js/jquery.fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1457021170146},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1457021170146},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1457021170146},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1457021170146},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1457021170146},{"_id":"public/css/style.css","hash":"f07ed88f6e22f7db0349dc05827013dedf7f7917","modified":1457021170146},{"_id":"public/css/pure-min.css","hash":"8cf7ea3e9e00e752de63fbc443e9300366327cd9","modified":1457021170146},{"_id":"public/js/fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1457021170146},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1457021170148}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"使用Jekyll在Github-Pages上搭建个人博客","date":"2015-08-16T16:00:00.000Z","_content":"我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了[《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]、[《Using Jekyll with Pages》][site2]。鄙人于此也作一下**使用Jekyll在Github-Pages上搭建个人博客**的总结，也可以给其他后来者做一些参考。\n\n> 本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考[《版本控制入门 – 搬进 Github》][site3]。\n>\n> 在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看[这里][site4]\n\n\n[site1]: http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\n[site2]: https://help.github.com/articles/using-jekyll-with-pages/\n[site3]: http://www.imooc.com/learn/390\n[site4]: http://saito.im/slide/ruby-new.html\n\n# 目录\n\n* [开始](#begin)\n\t* [新建一个仓库](#new respontory)\n\t* [clone到本地](#clone)\n\t* [上传页面](#update index)\n* [建造](#build)\n\t* [搭建本地环境](#build environment)\n\t* [Jekyll的使用](#use jekyll)\n\t* [Jekyll目录解析](#jekyll dictionary)\n* [写博客](#write blog)\n* [装修](#decoration)\n\t* [使用模板](#use template)\n\t* [自定义样式](#stylish)\n* [定制](#customize)\n\t* [使用独立域名](#cname)\n\t* [添加评论功能](#add comment)\n\t\t* [多说](#ds)\n\t    * [Disqus](#disqus)\n* [参考](#reference)\n\n<h2 id=\"begin\">开始</h2>\n\n<h3 id=\"new respontory\">新建一个仓库</h3>\n\n* 如果没有Github帐号，首先[注册一个][register]。\n* 接下来新建一个仓库\n\n**注：**Repository name(仓库名)必须是 `yourusername.github.io`\n\n比如我的用户名是loshine，那么我的这个仓库名就是`loshine.github.io`\n\n[register]: https://github.com/\n\n\n<h3 id=\"clone\">clone到本地</h3>\n\n使用Github客户端或者Git命令行工具将这个项目clone到本地。\n\n\n<h3 id=\"update index\">上传页面</h3>\n\n之后，新建一个`index.html`文件，push到对应的**master**分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问`yourusername.github.io`，就能看见完整的网页了。\n\n<h2 id=\"build\">建造</h2>\n\n<h3 id=\"build environment\">搭建本地环境</h3>\n\n由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。\n\n1. **Ruby** - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请[安装Ruby环境][ruby]。\n2. **Bundler** - 打开终端输入`gem install bundler`以安装。\n3. **github-pages** - 打开终端输入`gem install github-pages`以安装。\n3. **Jekyll** - 打开终端输入`gem install jekyll`以安装。\n\n**注**: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为[淘宝镜像源][taobaoGem]解决。\n\n[ruby]: https://www.ruby-lang.org/en/downloads/\n[taobaoGem]: http://ruby.taobao.org/\n\n<h3 id=\"use jekyll\">Jekyll的使用</h3>\n\n1. 在我们之前创建的仓库下新建一个文件，命名为**Gemfile**，并写入`gem 'github-pages'`。\n2. 在仓库目录下打开命令行工具，输入`bundle install`。\n3. 在命令行工具中输入`bundle exec jekyll serve`，按提示打开地址，就可以在本地进行查看和调试网站了。\n\n<h3 id=\"jekyll dictionary\">Jekyll目录解析</h3>\n\n```\n|—— _config.yml\n|—— _includes\n    |—— footer.html\n    |—— header.html\n|—— _layouts\n    |—— default.html\n    |—— post.html\n|—— _posts\n    |—— 2015-04-09-welcome-to-jekyll.md\n    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md\n|—— _site\n|—— css\n    |—— *.css\n|—— script\n    |—— *.js\n|—— Gemfile\n|—— Gemfile.lock\n|—— index.html\n```\n\n接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。\n\n* `_config.yml` 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件\n* `_includes` 文章各个部分的html文件，可以在布局中包含这些文件\n* `_layouts` 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。\n* `_posts` 存放博客文章\n* `CNAME` 域名地址\n* `css` 存放博客所用css\n* `script` 存放博客所用JavaScript\n* `index.html` 博客主页\n\n<h2 id=\"write blog\">写博客</h2>\n\n博客文章都是用[markdown格式][markdown]书写，命名格式为*时间加标题*，形如：`2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md`\n\n文章需要在开头位置加入一段特殊的文字，其中定义了使用到的**样式**、**文章标题**、**时间**、**分类**。\n\n```\n---\nlayout: post\ntitle: \"Welcome to Jekyll!\"\ndate: 2014-01-27 21:57:11\ncategories: Blog\n---\n```\n\n完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入`_post`文件夹中，并同步到Github上哦。\n\n[markdown]: http://wowubuntu.com/markdown/\n\n<h2 id=\"decoration\">装修</h2>\n\n<h3 id=\"use template\">使用模板</h3>\n\n之前在[Jekyll目录解析](#jekyll dictionary)中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在[Jekyll 主题][theme]中选择自己喜欢的主题并放入到自己的项目中去。\n\n以我的博客为例，我选择了[Pithy][theme-pithy]主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入`bundle exec jekyll serve`运行jekyll服务器，打开`http://localhost:4000`就可以查看到效果了。\n\n[theme]: http://jekyllthemes.org/\n[theme-pithy]: http://jekyllthemes.org/themes/pithy/\n\n<h3 id=\"stylish\">自定义样式</h3>\n\n如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您[Run Noob][run noob]、[w3cschool][w3cschool]这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。\n\n[run noob]: http://www.runoob.com/\n[w3cschool]: http://www.w3school.com.cn/\n\n<h2 id=\"customize\">定制</h2>\n\n<h3 id=\"cname\">使用独立域名</h3>\n\n* 新建一个文件，命名为**CNAME**，然后在里面写入你需要绑定的独立域名就可以了。\n* 在你的域名服务商处添加解析地址。\n\n完成以上步骤你就可以使用自己的独立域名了。\n\n<h3 id=\"add comment\">添加评论功能</h3>\n\n<h4 id=\"ds\">多说</h4>\n\n多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。\n\n* 登录[多说][ds]，创建一个项目，拷贝你的**通用代码**。\n* 在`_include`文件夹里新建一个`comment.html`文件，将通用代码粘贴进去。\n* 修改**通用代码**中需要配置的地方\n\n```html\n<div class=\"ds-thread\" data-thread-key=\"请将此处替换成文章在你的站点中的ID\"\n    data-title=\"请替换成文章的标题\" data-url=\"请替换成文章的网址\"></div>\n```\n\n修改为\n\n```html\n<div class=\"ds-thread\" data-thread-key=\"【 page.id 】\"\n    data-title=\"【 page.title 】\" data-url=\"your web site【 page.url 】\"></div>\n```\n\n注意`【】`需要替换为**两个大括号**，`your web site`需替换为**您的域名地址**。\n\n* 在`_layout`中的`post.html`中的底部加入`【% include comment.html %】`（【】须替换为{}）\n* 在**多说**的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等\n\n[ds]: http://duoshuo.com/\n\n<h4 id=\"disqus\">Disqus</h4>\n\nDisqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。\n\n* [注册Disqus][disqus]\n* 右上角设置项中选择`Add Disqus To Site`，按步骤走，最后复制生成的**Universal Code**\n* 其它部分类似如上的集成多说操作，*但不需要自己修改代码了*\n* Disqus也有控制台可以对评论进行操作\n\n**注意**：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。\n\n[disqus]: https://disqus.com/\n\n<h2 id=\"reference\">参考</h2>\n\n* [《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]\n* [官方文档][official documents]\n\n[official documents]: https://help.github.com/categories/github-pages-basics/\n","source":"_posts/2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md","raw":"---\ntitle: 使用Jekyll在Github-Pages上搭建个人博客\ndate: 2015-08-17\ntags: [jekyll, github, github-pages]\n---\n我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了[《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]、[《Using Jekyll with Pages》][site2]。鄙人于此也作一下**使用Jekyll在Github-Pages上搭建个人博客**的总结，也可以给其他后来者做一些参考。\n\n> 本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考[《版本控制入门 – 搬进 Github》][site3]。\n>\n> 在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看[这里][site4]\n\n\n[site1]: http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\n[site2]: https://help.github.com/articles/using-jekyll-with-pages/\n[site3]: http://www.imooc.com/learn/390\n[site4]: http://saito.im/slide/ruby-new.html\n\n# 目录\n\n* [开始](#begin)\n\t* [新建一个仓库](#new respontory)\n\t* [clone到本地](#clone)\n\t* [上传页面](#update index)\n* [建造](#build)\n\t* [搭建本地环境](#build environment)\n\t* [Jekyll的使用](#use jekyll)\n\t* [Jekyll目录解析](#jekyll dictionary)\n* [写博客](#write blog)\n* [装修](#decoration)\n\t* [使用模板](#use template)\n\t* [自定义样式](#stylish)\n* [定制](#customize)\n\t* [使用独立域名](#cname)\n\t* [添加评论功能](#add comment)\n\t\t* [多说](#ds)\n\t    * [Disqus](#disqus)\n* [参考](#reference)\n\n<h2 id=\"begin\">开始</h2>\n\n<h3 id=\"new respontory\">新建一个仓库</h3>\n\n* 如果没有Github帐号，首先[注册一个][register]。\n* 接下来新建一个仓库\n\n**注：**Repository name(仓库名)必须是 `yourusername.github.io`\n\n比如我的用户名是loshine，那么我的这个仓库名就是`loshine.github.io`\n\n[register]: https://github.com/\n\n\n<h3 id=\"clone\">clone到本地</h3>\n\n使用Github客户端或者Git命令行工具将这个项目clone到本地。\n\n\n<h3 id=\"update index\">上传页面</h3>\n\n之后，新建一个`index.html`文件，push到对应的**master**分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问`yourusername.github.io`，就能看见完整的网页了。\n\n<h2 id=\"build\">建造</h2>\n\n<h3 id=\"build environment\">搭建本地环境</h3>\n\n由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。\n\n1. **Ruby** - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请[安装Ruby环境][ruby]。\n2. **Bundler** - 打开终端输入`gem install bundler`以安装。\n3. **github-pages** - 打开终端输入`gem install github-pages`以安装。\n3. **Jekyll** - 打开终端输入`gem install jekyll`以安装。\n\n**注**: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为[淘宝镜像源][taobaoGem]解决。\n\n[ruby]: https://www.ruby-lang.org/en/downloads/\n[taobaoGem]: http://ruby.taobao.org/\n\n<h3 id=\"use jekyll\">Jekyll的使用</h3>\n\n1. 在我们之前创建的仓库下新建一个文件，命名为**Gemfile**，并写入`gem 'github-pages'`。\n2. 在仓库目录下打开命令行工具，输入`bundle install`。\n3. 在命令行工具中输入`bundle exec jekyll serve`，按提示打开地址，就可以在本地进行查看和调试网站了。\n\n<h3 id=\"jekyll dictionary\">Jekyll目录解析</h3>\n\n```\n|—— _config.yml\n|—— _includes\n    |—— footer.html\n    |—— header.html\n|—— _layouts\n    |—— default.html\n    |—— post.html\n|—— _posts\n    |—— 2015-04-09-welcome-to-jekyll.md\n    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md\n|—— _site\n|—— css\n    |—— *.css\n|—— script\n    |—— *.js\n|—— Gemfile\n|—— Gemfile.lock\n|—— index.html\n```\n\n接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。\n\n* `_config.yml` 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件\n* `_includes` 文章各个部分的html文件，可以在布局中包含这些文件\n* `_layouts` 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。\n* `_posts` 存放博客文章\n* `CNAME` 域名地址\n* `css` 存放博客所用css\n* `script` 存放博客所用JavaScript\n* `index.html` 博客主页\n\n<h2 id=\"write blog\">写博客</h2>\n\n博客文章都是用[markdown格式][markdown]书写，命名格式为*时间加标题*，形如：`2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md`\n\n文章需要在开头位置加入一段特殊的文字，其中定义了使用到的**样式**、**文章标题**、**时间**、**分类**。\n\n```\n---\nlayout: post\ntitle: \"Welcome to Jekyll!\"\ndate: 2014-01-27 21:57:11\ncategories: Blog\n---\n```\n\n完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入`_post`文件夹中，并同步到Github上哦。\n\n[markdown]: http://wowubuntu.com/markdown/\n\n<h2 id=\"decoration\">装修</h2>\n\n<h3 id=\"use template\">使用模板</h3>\n\n之前在[Jekyll目录解析](#jekyll dictionary)中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在[Jekyll 主题][theme]中选择自己喜欢的主题并放入到自己的项目中去。\n\n以我的博客为例，我选择了[Pithy][theme-pithy]主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入`bundle exec jekyll serve`运行jekyll服务器，打开`http://localhost:4000`就可以查看到效果了。\n\n[theme]: http://jekyllthemes.org/\n[theme-pithy]: http://jekyllthemes.org/themes/pithy/\n\n<h3 id=\"stylish\">自定义样式</h3>\n\n如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您[Run Noob][run noob]、[w3cschool][w3cschool]这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。\n\n[run noob]: http://www.runoob.com/\n[w3cschool]: http://www.w3school.com.cn/\n\n<h2 id=\"customize\">定制</h2>\n\n<h3 id=\"cname\">使用独立域名</h3>\n\n* 新建一个文件，命名为**CNAME**，然后在里面写入你需要绑定的独立域名就可以了。\n* 在你的域名服务商处添加解析地址。\n\n完成以上步骤你就可以使用自己的独立域名了。\n\n<h3 id=\"add comment\">添加评论功能</h3>\n\n<h4 id=\"ds\">多说</h4>\n\n多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。\n\n* 登录[多说][ds]，创建一个项目，拷贝你的**通用代码**。\n* 在`_include`文件夹里新建一个`comment.html`文件，将通用代码粘贴进去。\n* 修改**通用代码**中需要配置的地方\n\n```html\n<div class=\"ds-thread\" data-thread-key=\"请将此处替换成文章在你的站点中的ID\"\n    data-title=\"请替换成文章的标题\" data-url=\"请替换成文章的网址\"></div>\n```\n\n修改为\n\n```html\n<div class=\"ds-thread\" data-thread-key=\"【 page.id 】\"\n    data-title=\"【 page.title 】\" data-url=\"your web site【 page.url 】\"></div>\n```\n\n注意`【】`需要替换为**两个大括号**，`your web site`需替换为**您的域名地址**。\n\n* 在`_layout`中的`post.html`中的底部加入`【% include comment.html %】`（【】须替换为{}）\n* 在**多说**的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等\n\n[ds]: http://duoshuo.com/\n\n<h4 id=\"disqus\">Disqus</h4>\n\nDisqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。\n\n* [注册Disqus][disqus]\n* 右上角设置项中选择`Add Disqus To Site`，按步骤走，最后复制生成的**Universal Code**\n* 其它部分类似如上的集成多说操作，*但不需要自己修改代码了*\n* Disqus也有控制台可以对评论进行操作\n\n**注意**：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。\n\n[disqus]: https://disqus.com/\n\n<h2 id=\"reference\">参考</h2>\n\n* [《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]\n* [官方文档][official documents]\n\n[official documents]: https://help.github.com/categories/github-pages-basics/\n","slug":"使用Jekyll在Github-Pages上搭建个人博客","published":1,"updated":"2016-03-03T15:37:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcgs9qo0000o5e9z3vhz557","content":"<p>我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了<a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\" target=\"_blank\" rel=\"external\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a>、<a href=\"https://help.github.com/articles/using-jekyll-with-pages/\" target=\"_blank\" rel=\"external\">《Using Jekyll with Pages》</a>。鄙人于此也作一下<strong>使用Jekyll在Github-Pages上搭建个人博客</strong>的总结，也可以给其他后来者做一些参考。</p>\n<blockquote>\n<p>本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考<a href=\"http://www.imooc.com/learn/390\" target=\"_blank\" rel=\"external\">《版本控制入门 – 搬进 Github》</a>。</p>\n<p>在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看<a href=\"http://saito.im/slide/ruby-new.html\" target=\"_blank\" rel=\"external\">这里</a></p>\n</blockquote>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#begin\">开始</a><ul>\n<li><a href=\"#new respontory\">新建一个仓库</a></li>\n<li><a href=\"#clone\">clone到本地</a></li>\n<li><a href=\"#update index\">上传页面</a></li>\n</ul>\n</li>\n<li><a href=\"#build\">建造</a><ul>\n<li><a href=\"#build environment\">搭建本地环境</a></li>\n<li><a href=\"#use jekyll\">Jekyll的使用</a></li>\n<li><a href=\"#jekyll dictionary\">Jekyll目录解析</a></li>\n</ul>\n</li>\n<li><a href=\"#write blog\">写博客</a></li>\n<li><a href=\"#decoration\">装修</a><ul>\n<li><a href=\"#use template\">使用模板</a></li>\n<li><a href=\"#stylish\">自定义样式</a></li>\n</ul>\n</li>\n<li><a href=\"#customize\">定制</a><ul>\n<li><a href=\"#cname\">使用独立域名</a></li>\n<li><a href=\"#add comment\">添加评论功能</a><ul>\n<li><a href=\"#ds\">多说</a></li>\n<li><a href=\"#disqus\">Disqus</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#reference\">参考</a></li>\n</ul>\n<h2 id=\"begin\">开始</h2>\n\n<h3 id=\"new respontory\">新建一个仓库</h3>\n\n<ul>\n<li>如果没有Github帐号，首先<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">注册一个</a>。</li>\n<li>接下来新建一个仓库</li>\n</ul>\n<p><strong>注：</strong>Repository name(仓库名)必须是 <code>yourusername.github.io</code></p>\n<p>比如我的用户名是loshine，那么我的这个仓库名就是<code>loshine.github.io</code></p>\n<h3 id=\"clone\">clone到本地</h3>\n\n<p>使用Github客户端或者Git命令行工具将这个项目clone到本地。</p>\n<h3 id=\"update index\">上传页面</h3>\n\n<p>之后，新建一个<code>index.html</code>文件，push到对应的<strong>master</strong>分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问<code>yourusername.github.io</code>，就能看见完整的网页了。</p>\n<h2 id=\"build\">建造</h2>\n\n<h3 id=\"build environment\">搭建本地环境</h3>\n\n<p>由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。</p>\n<ol>\n<li><strong>Ruby</strong> - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请<a href=\"https://www.ruby-lang.org/en/downloads/\" target=\"_blank\" rel=\"external\">安装Ruby环境</a>。</li>\n<li><strong>Bundler</strong> - 打开终端输入<code>gem install bundler</code>以安装。</li>\n<li><strong>github-pages</strong> - 打开终端输入<code>gem install github-pages</code>以安装。</li>\n<li><strong>Jekyll</strong> - 打开终端输入<code>gem install jekyll</code>以安装。</li>\n</ol>\n<p><strong>注</strong>: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为<a href=\"http://ruby.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝镜像源</a>解决。</p>\n<h3 id=\"use jekyll\">Jekyll的使用</h3>\n\n<ol>\n<li>在我们之前创建的仓库下新建一个文件，命名为<strong>Gemfile</strong>，并写入<code>gem &#39;github-pages&#39;</code>。</li>\n<li>在仓库目录下打开命令行工具，输入<code>bundle install</code>。</li>\n<li>在命令行工具中输入<code>bundle exec jekyll serve</code>，按提示打开地址，就可以在本地进行查看和调试网站了。</li>\n</ol>\n<h3 id=\"jekyll dictionary\">Jekyll目录解析</h3>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|—— _config.yml</span><br><span class=\"line\">|—— _includes</span><br><span class=\"line\">    |—— footer.html</span><br><span class=\"line\">    |—— header.html</span><br><span class=\"line\">|—— _layouts</span><br><span class=\"line\">    |—— default.html</span><br><span class=\"line\">    |—— post.html</span><br><span class=\"line\">|—— _posts</span><br><span class=\"line\">    |—— 2015-04-09-welcome-to-jekyll.md</span><br><span class=\"line\">    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</span><br><span class=\"line\">|—— _site</span><br><span class=\"line\">|—— css</span><br><span class=\"line\">    |—— *.css</span><br><span class=\"line\">|—— script</span><br><span class=\"line\">    |—— *.js</span><br><span class=\"line\">|—— Gemfile</span><br><span class=\"line\">|—— Gemfile.lock</span><br><span class=\"line\">|—— index.html</span><br></pre></td></tr></table></figure>\n<p>接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。</p>\n<ul>\n<li><code>_config.yml</code> 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件</li>\n<li><code>_includes</code> 文章各个部分的html文件，可以在布局中包含这些文件</li>\n<li><code>_layouts</code> 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。</li>\n<li><code>_posts</code> 存放博客文章</li>\n<li><code>CNAME</code> 域名地址</li>\n<li><code>css</code> 存放博客所用css</li>\n<li><code>script</code> 存放博客所用JavaScript</li>\n<li><code>index.html</code> 博客主页</li>\n</ul>\n<h2 id=\"write blog\">写博客</h2>\n\n<p>博客文章都是用<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">markdown格式</a>书写，命名格式为<em>时间加标题</em>，形如：<code>2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</code></p>\n<p>文章需要在开头位置加入一段特殊的文字，其中定义了使用到的<strong>样式</strong>、<strong>文章标题</strong>、<strong>时间</strong>、<strong>分类</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;Welcome to Jekyll!&quot;</span><br><span class=\"line\">date: 2014-01-27 21:57:11</span><br><span class=\"line\">categories: Blog</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入<code>_post</code>文件夹中，并同步到Github上哦。</p>\n<h2 id=\"decoration\">装修</h2>\n\n<h3 id=\"use template\">使用模板</h3>\n\n<p>之前在<a href=\"#jekyll dictionary\">Jekyll目录解析</a>中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"external\">Jekyll 主题</a>中选择自己喜欢的主题并放入到自己的项目中去。</p>\n<p>以我的博客为例，我选择了<a href=\"http://jekyllthemes.org/themes/pithy/\" target=\"_blank\" rel=\"external\">Pithy</a>主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入<code>bundle exec jekyll serve</code>运行jekyll服务器，打开<code>http://localhost:4000</code>就可以查看到效果了。</p>\n<h3 id=\"stylish\">自定义样式</h3>\n\n<p>如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您<a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"external\">Run Noob</a>、<a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"external\">w3cschool</a>这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。</p>\n<h2 id=\"customize\">定制</h2>\n\n<h3 id=\"cname\">使用独立域名</h3>\n\n<ul>\n<li>新建一个文件，命名为<strong>CNAME</strong>，然后在里面写入你需要绑定的独立域名就可以了。</li>\n<li>在你的域名服务商处添加解析地址。</li>\n</ul>\n<p>完成以上步骤你就可以使用自己的独立域名了。</p>\n<h3 id=\"add comment\">添加评论功能</h3>\n\n<h4 id=\"ds\">多说</h4>\n\n<p>多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。</p>\n<ul>\n<li>登录<a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a>，创建一个项目，拷贝你的<strong>通用代码</strong>。</li>\n<li>在<code>_include</code>文件夹里新建一个<code>comment.html</code>文件，将通用代码粘贴进去。</li>\n<li>修改<strong>通用代码</strong>中需要配置的地方</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"请将此处替换成文章在你的站点中的ID\"</span></span><br><span class=\"line\">    <span class=\"attr\">data-title</span>=<span class=\"string\">\"请替换成文章的标题\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"请替换成文章的网址\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改为</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"【 page.id 】\"</span></span><br><span class=\"line\">    <span class=\"attr\">data-title</span>=<span class=\"string\">\"【 page.title 】\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"your web site【 page.url 】\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意<code>【】</code>需要替换为<strong>两个大括号</strong>，<code>your web site</code>需替换为<strong>您的域名地址</strong>。</p>\n<ul>\n<li>在<code>_layout</code>中的<code>post.html</code>中的底部加入<code>【% include comment.html %】</code>（【】须替换为{}）</li>\n<li>在<strong>多说</strong>的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等</li>\n</ul>\n<h4 id=\"disqus\">Disqus</h4>\n\n<p>Disqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。</p>\n<ul>\n<li><a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">注册Disqus</a></li>\n<li>右上角设置项中选择<code>Add Disqus To Site</code>，按步骤走，最后复制生成的<strong>Universal Code</strong></li>\n<li>其它部分类似如上的集成多说操作，<em>但不需要自己修改代码了</em></li>\n<li>Disqus也有控制台可以对评论进行操作</li>\n</ul>\n<p><strong>注意</strong>：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。</p>\n<h2 id=\"reference\">参考</h2>\n\n<ul>\n<li><a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\" target=\"_blank\" rel=\"external\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a></li>\n<li><a href=\"https://help.github.com/categories/github-pages-basics/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n</ul>\n","excerpt":"","more":"<p>我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了<a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a>、<a href=\"https://help.github.com/articles/using-jekyll-with-pages/\">《Using Jekyll with Pages》</a>。鄙人于此也作一下<strong>使用Jekyll在Github-Pages上搭建个人博客</strong>的总结，也可以给其他后来者做一些参考。</p>\n<blockquote>\n<p>本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考<a href=\"http://www.imooc.com/learn/390\">《版本控制入门 – 搬进 Github》</a>。</p>\n<p>在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看<a href=\"http://saito.im/slide/ruby-new.html\">这里</a></p>\n</blockquote>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#begin\">开始</a><ul>\n<li><a href=\"#new respontory\">新建一个仓库</a></li>\n<li><a href=\"#clone\">clone到本地</a></li>\n<li><a href=\"#update index\">上传页面</a></li>\n</ul>\n</li>\n<li><a href=\"#build\">建造</a><ul>\n<li><a href=\"#build environment\">搭建本地环境</a></li>\n<li><a href=\"#use jekyll\">Jekyll的使用</a></li>\n<li><a href=\"#jekyll dictionary\">Jekyll目录解析</a></li>\n</ul>\n</li>\n<li><a href=\"#write blog\">写博客</a></li>\n<li><a href=\"#decoration\">装修</a><ul>\n<li><a href=\"#use template\">使用模板</a></li>\n<li><a href=\"#stylish\">自定义样式</a></li>\n</ul>\n</li>\n<li><a href=\"#customize\">定制</a><ul>\n<li><a href=\"#cname\">使用独立域名</a></li>\n<li><a href=\"#add comment\">添加评论功能</a><ul>\n<li><a href=\"#ds\">多说</a></li>\n<li><a href=\"#disqus\">Disqus</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#reference\">参考</a></li>\n</ul>\n<h2 id=\"begin\">开始</h2>\n\n<h3 id=\"new respontory\">新建一个仓库</h3>\n\n<ul>\n<li>如果没有Github帐号，首先<a href=\"https://github.com/\">注册一个</a>。</li>\n<li>接下来新建一个仓库</li>\n</ul>\n<p><strong>注：</strong>Repository name(仓库名)必须是 <code>yourusername.github.io</code></p>\n<p>比如我的用户名是loshine，那么我的这个仓库名就是<code>loshine.github.io</code></p>\n<h3 id=\"clone\">clone到本地</h3>\n\n<p>使用Github客户端或者Git命令行工具将这个项目clone到本地。</p>\n<h3 id=\"update index\">上传页面</h3>\n\n<p>之后，新建一个<code>index.html</code>文件，push到对应的<strong>master</strong>分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问<code>yourusername.github.io</code>，就能看见完整的网页了。</p>\n<h2 id=\"build\">建造</h2>\n\n<h3 id=\"build environment\">搭建本地环境</h3>\n\n<p>由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。</p>\n<ol>\n<li><strong>Ruby</strong> - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请<a href=\"https://www.ruby-lang.org/en/downloads/\">安装Ruby环境</a>。</li>\n<li><strong>Bundler</strong> - 打开终端输入<code>gem install bundler</code>以安装。</li>\n<li><strong>github-pages</strong> - 打开终端输入<code>gem install github-pages</code>以安装。</li>\n<li><strong>Jekyll</strong> - 打开终端输入<code>gem install jekyll</code>以安装。</li>\n</ol>\n<p><strong>注</strong>: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为<a href=\"http://ruby.taobao.org/\">淘宝镜像源</a>解决。</p>\n<h3 id=\"use jekyll\">Jekyll的使用</h3>\n\n<ol>\n<li>在我们之前创建的仓库下新建一个文件，命名为<strong>Gemfile</strong>，并写入<code>gem &#39;github-pages&#39;</code>。</li>\n<li>在仓库目录下打开命令行工具，输入<code>bundle install</code>。</li>\n<li>在命令行工具中输入<code>bundle exec jekyll serve</code>，按提示打开地址，就可以在本地进行查看和调试网站了。</li>\n</ol>\n<h3 id=\"jekyll dictionary\">Jekyll目录解析</h3>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|—— _config.yml</span><br><span class=\"line\">|—— _includes</span><br><span class=\"line\">    |—— footer.html</span><br><span class=\"line\">    |—— header.html</span><br><span class=\"line\">|—— _layouts</span><br><span class=\"line\">    |—— default.html</span><br><span class=\"line\">    |—— post.html</span><br><span class=\"line\">|—— _posts</span><br><span class=\"line\">    |—— 2015-04-09-welcome-to-jekyll.md</span><br><span class=\"line\">    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</span><br><span class=\"line\">|—— _site</span><br><span class=\"line\">|—— css</span><br><span class=\"line\">    |—— *.css</span><br><span class=\"line\">|—— script</span><br><span class=\"line\">    |—— *.js</span><br><span class=\"line\">|—— Gemfile</span><br><span class=\"line\">|—— Gemfile.lock</span><br><span class=\"line\">|—— index.html</span><br></pre></td></tr></table></figure>\n<p>接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。</p>\n<ul>\n<li><code>_config.yml</code> 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件</li>\n<li><code>_includes</code> 文章各个部分的html文件，可以在布局中包含这些文件</li>\n<li><code>_layouts</code> 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。</li>\n<li><code>_posts</code> 存放博客文章</li>\n<li><code>CNAME</code> 域名地址</li>\n<li><code>css</code> 存放博客所用css</li>\n<li><code>script</code> 存放博客所用JavaScript</li>\n<li><code>index.html</code> 博客主页</li>\n</ul>\n<h2 id=\"write blog\">写博客</h2>\n\n<p>博客文章都是用<a href=\"http://wowubuntu.com/markdown/\">markdown格式</a>书写，命名格式为<em>时间加标题</em>，形如：<code>2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</code></p>\n<p>文章需要在开头位置加入一段特殊的文字，其中定义了使用到的<strong>样式</strong>、<strong>文章标题</strong>、<strong>时间</strong>、<strong>分类</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;Welcome to Jekyll!&quot;</span><br><span class=\"line\">date: 2014-01-27 21:57:11</span><br><span class=\"line\">categories: Blog</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入<code>_post</code>文件夹中，并同步到Github上哦。</p>\n<h2 id=\"decoration\">装修</h2>\n\n<h3 id=\"use template\">使用模板</h3>\n\n<p>之前在<a href=\"#jekyll dictionary\">Jekyll目录解析</a>中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在<a href=\"http://jekyllthemes.org/\">Jekyll 主题</a>中选择自己喜欢的主题并放入到自己的项目中去。</p>\n<p>以我的博客为例，我选择了<a href=\"http://jekyllthemes.org/themes/pithy/\">Pithy</a>主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入<code>bundle exec jekyll serve</code>运行jekyll服务器，打开<code>http://localhost:4000</code>就可以查看到效果了。</p>\n<h3 id=\"stylish\">自定义样式</h3>\n\n<p>如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您<a href=\"http://www.runoob.com/\">Run Noob</a>、<a href=\"http://www.w3school.com.cn/\">w3cschool</a>这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。</p>\n<h2 id=\"customize\">定制</h2>\n\n<h3 id=\"cname\">使用独立域名</h3>\n\n<ul>\n<li>新建一个文件，命名为<strong>CNAME</strong>，然后在里面写入你需要绑定的独立域名就可以了。</li>\n<li>在你的域名服务商处添加解析地址。</li>\n</ul>\n<p>完成以上步骤你就可以使用自己的独立域名了。</p>\n<h3 id=\"add comment\">添加评论功能</h3>\n\n<h4 id=\"ds\">多说</h4>\n\n<p>多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。</p>\n<ul>\n<li>登录<a href=\"http://duoshuo.com/\">多说</a>，创建一个项目，拷贝你的<strong>通用代码</strong>。</li>\n<li>在<code>_include</code>文件夹里新建一个<code>comment.html</code>文件，将通用代码粘贴进去。</li>\n<li>修改<strong>通用代码</strong>中需要配置的地方</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"请将此处替换成文章在你的站点中的ID\"</span></span><br><span class=\"line\">    <span class=\"attr\">data-title</span>=<span class=\"string\">\"请替换成文章的标题\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"请替换成文章的网址\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改为</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"【 page.id 】\"</span></span><br><span class=\"line\">    <span class=\"attr\">data-title</span>=<span class=\"string\">\"【 page.title 】\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"your web site【 page.url 】\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意<code>【】</code>需要替换为<strong>两个大括号</strong>，<code>your web site</code>需替换为<strong>您的域名地址</strong>。</p>\n<ul>\n<li>在<code>_layout</code>中的<code>post.html</code>中的底部加入<code>【% include comment.html %】</code>（【】须替换为{}）</li>\n<li>在<strong>多说</strong>的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等</li>\n</ul>\n<h4 id=\"disqus\">Disqus</h4>\n\n<p>Disqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。</p>\n<ul>\n<li><a href=\"https://disqus.com/\">注册Disqus</a></li>\n<li>右上角设置项中选择<code>Add Disqus To Site</code>，按步骤走，最后复制生成的<strong>Universal Code</strong></li>\n<li>其它部分类似如上的集成多说操作，<em>但不需要自己修改代码了</em></li>\n<li>Disqus也有控制台可以对评论进行操作</li>\n</ul>\n<p><strong>注意</strong>：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。</p>\n<h2 id=\"reference\">参考</h2>\n\n<ul>\n<li><a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a></li>\n<li><a href=\"https://help.github.com/categories/github-pages-basics/\">官方文档</a></li>\n</ul>\n"},{"title":"Java中的单例设计模式","date":"2015-08-17T16:00:00.000Z","_content":"单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n\n## 目录\n\n* [特点](#feature)\n* [实现](#implement)\n\t* [饿汉式](#hunger style)\n\t* [懒汉式](#lazy style)\n\n<h2 id=\"feature\">特点</h2>\n\n单例模式有以下特点：\n\n1. 单例类只能有一个实例\n2. 单例类必须自己创建自己的唯一实例\n3. 单例类必须给所有其他对象提供这一实例\n\n<h2 id=\"implement\">实现</h2>\n\n<h3 id=\"hunger style\">饿汉式</h3>\n\n饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。\n\n```java\npublic class Singleton {\n\n    // 饿汉式，开始就建立一个对象\n    private static final Singleton single = new Singleton();\n    \n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    public static Singleton getInstance() {\n        return single;\n    }\n}\n```\n\n<h3 id=\"lazy style\">懒汉式</h3>\n\n懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。\n\n```java\npublic class Singleton {\n    // 懒汉式，刚开始不创建对象\n    private static Singleton single=null;\n\n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    // 静态工厂方法\n    public static Singleton getInstance() {\n         if (single == null) {\n             single = new Singleton();\n         }\n        return single;  \n    }\n}\n```\n\n这种懒汉式实现是**非线程安全**的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式\n\n* 同步`getInstance()`方法\n\n```java\npublic static synchronized Singleton getInstance() {\n    if (single == null) {\n        single = new Singleton();\n    }    \n    return single;\n}\n```\n\n* 代码块加锁和双重检查\n\n```java\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        synchronized (Singleton.class) {\n            if (singleton == null) {\n            singleton = new Singleton();\n            }\n        }\n    }\n    return singleton;\n}\n```\n\n* 静态内部类\n\n```java\npublic class Singleton {\n    \n    // 用于封装单例实例的内部类\n    private static class LazyHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    \n    // 私有构造\n    private Singleton() {}\n    \n    // 获取单例实例的方法\n    public static final Singleton getInstance() {\n        return LazyHolder.INSTANCE;\n    }    \n}\n```\n\n其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。","source":"_posts/2015-08-18-Java中的单例设计模式.md","raw":"---\ntitle: Java中的单例设计模式\ndate: 2015-08-18\ntags: [设计模式, Java]\n---\n单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n\n## 目录\n\n* [特点](#feature)\n* [实现](#implement)\n\t* [饿汉式](#hunger style)\n\t* [懒汉式](#lazy style)\n\n<h2 id=\"feature\">特点</h2>\n\n单例模式有以下特点：\n\n1. 单例类只能有一个实例\n2. 单例类必须自己创建自己的唯一实例\n3. 单例类必须给所有其他对象提供这一实例\n\n<h2 id=\"implement\">实现</h2>\n\n<h3 id=\"hunger style\">饿汉式</h3>\n\n饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。\n\n```java\npublic class Singleton {\n\n    // 饿汉式，开始就建立一个对象\n    private static final Singleton single = new Singleton();\n    \n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    public static Singleton getInstance() {\n        return single;\n    }\n}\n```\n\n<h3 id=\"lazy style\">懒汉式</h3>\n\n懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。\n\n```java\npublic class Singleton {\n    // 懒汉式，刚开始不创建对象\n    private static Singleton single=null;\n\n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    // 静态工厂方法\n    public static Singleton getInstance() {\n         if (single == null) {\n             single = new Singleton();\n         }\n        return single;  \n    }\n}\n```\n\n这种懒汉式实现是**非线程安全**的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式\n\n* 同步`getInstance()`方法\n\n```java\npublic static synchronized Singleton getInstance() {\n    if (single == null) {\n        single = new Singleton();\n    }    \n    return single;\n}\n```\n\n* 代码块加锁和双重检查\n\n```java\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        synchronized (Singleton.class) {\n            if (singleton == null) {\n            singleton = new Singleton();\n            }\n        }\n    }\n    return singleton;\n}\n```\n\n* 静态内部类\n\n```java\npublic class Singleton {\n    \n    // 用于封装单例实例的内部类\n    private static class LazyHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    \n    // 私有构造\n    private Singleton() {}\n    \n    // 获取单例实例的方法\n    public static final Singleton getInstance() {\n        return LazyHolder.INSTANCE;\n    }    \n}\n```\n\n其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。","slug":"Java中的单例设计模式","published":1,"updated":"2016-03-03T16:07:36.000Z","_id":"cilcgs9qu0001o5e9t8p18p8s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#feature\">特点</a></li>\n<li><a href=\"#implement\">实现</a><ul>\n<li><a href=\"#hunger style\">饿汉式</a></li>\n<li><a href=\"#lazy style\">懒汉式</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"feature\">特点</h2>\n\n<p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例</li>\n<li>单例类必须自己创建自己的唯一实例</li>\n<li>单例类必须给所有其他对象提供这一实例</li>\n</ol>\n<h2 id=\"implement\">实现</h2>\n\n<h3 id=\"hunger style\">饿汉式</h3>\n\n<p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 饿汉式，开始就建立一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lazy style\">懒汉式</h3>\n\n<p>懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 懒汉式，刚开始不创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton single=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 静态工厂方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种懒汉式实现是<strong>非线程安全</strong>的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式</p>\n<ul>\n<li>同步<code>getInstance()</code>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>代码块加锁和双重检查</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>静态内部类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 用于封装单例实例的内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 私有构造</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取单例实例的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。</p>\n","excerpt":"","more":"<p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#feature\">特点</a></li>\n<li><a href=\"#implement\">实现</a><ul>\n<li><a href=\"#hunger style\">饿汉式</a></li>\n<li><a href=\"#lazy style\">懒汉式</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"feature\">特点</h2>\n\n<p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例</li>\n<li>单例类必须自己创建自己的唯一实例</li>\n<li>单例类必须给所有其他对象提供这一实例</li>\n</ol>\n<h2 id=\"implement\">实现</h2>\n\n<h3 id=\"hunger style\">饿汉式</h3>\n\n<p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 饿汉式，开始就建立一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lazy style\">懒汉式</h3>\n\n<p>懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 懒汉式，刚开始不创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton single=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 静态工厂方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种懒汉式实现是<strong>非线程安全</strong>的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式</p>\n<ul>\n<li>同步<code>getInstance()</code>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>代码块加锁和双重检查</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>静态内部类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 用于封装单例实例的内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 私有构造</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取单例实例的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cilcgs9qo0000o5e9z3vhz557","tag_id":"cilcgs9qx0002o5e9269qp7p6","_id":"cilcgs9r20006o5e9kfa13qno"},{"post_id":"cilcgs9qo0000o5e9z3vhz557","tag_id":"cilcgs9r00003o5e9u7yqz0mf","_id":"cilcgs9r20007o5e9f58i9165"},{"post_id":"cilcgs9qo0000o5e9z3vhz557","tag_id":"cilcgs9r10004o5e91qudb73t","_id":"cilcgs9r20009o5e9ioia4jen"},{"post_id":"cilcgs9qu0001o5e9t8p18p8s","tag_id":"cilcgs9r10005o5e9z6gu28rd","_id":"cilcgs9r3000ao5e9fc3lq013"},{"post_id":"cilcgs9qu0001o5e9t8p18p8s","tag_id":"cilcgs9r20008o5e9uigtxol4","_id":"cilcgs9r3000bo5e96iwn0xwu"}],"Tag":[{"name":"jekyll","_id":"cilcgs9qx0002o5e9269qp7p6"},{"name":"github","_id":"cilcgs9r00003o5e9u7yqz0mf"},{"name":"github-pages","_id":"cilcgs9r10004o5e91qudb73t"},{"name":"设计模式","_id":"cilcgs9r10005o5e9z6gu28rd"},{"name":"Java","_id":"cilcgs9r20008o5e9uigtxol4"}]}}