{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"source/assets/video/鼠须管演示.mov","path":"assets/video/鼠须管演示.mov","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"ce4808ba274df5b0f0a8bdffbc2d2ca7b1658fd4","modified":1471103627000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1471103627000},{"_id":"themes/maupassant/README.md","hash":"def832798496a6ad6a18e0ba2c7149571ded21a0","modified":1471103627000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1471103627000},{"_id":"themes/maupassant/_config.yml","hash":"06e48bfd8efc8b2414b79945fe90a09b37000c60","modified":1471103627000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1471103627000},{"_id":"source/_posts/2015-08-17-build-personal-blog-in-github-pages-with-jekyll.md","hash":"e083be25d4653e8b268c47840b1629b2e54b7c8d","modified":1471103627000},{"_id":"source/_posts/2015-08-18-singleton-in-java.md","hash":"9b7e93b5f9d10614572dd5cf2fed0ab96dd2b4bf","modified":1471103627000},{"_id":"source/_posts/2015-08-20-android-studio-keymap.md","hash":"52e6bee74e3fe6f15acdf8fcee957e086779f66e","modified":1471103627000},{"_id":"source/_posts/2015-08-22-android-design-support-library.md","hash":"50446516df94bb7b890204f8a305d3493df6c13c","modified":1471103627000},{"_id":"source/_posts/2015-08-25-template-method-pattern-in-java.md","hash":"8f09dbbceadfa90818e592b8a7e4b833b6ad83b7","modified":1471103627000},{"_id":"source/_posts/2015-08-26-volley.md","hash":"259b58200116fc1d0de8eea5b734d7db91d329ca","modified":1471103627000},{"_id":"source/_posts/2015-09-12-rime.md","hash":"0d4d053d1af0cc9a333165624b306b95755f1a56","modified":1471103627000},{"_id":"source/_posts/2016-03-08-android-databinding-with-kotlin.md","hash":"a9bdd3c900844fbc65f3fb84e2e58320bbac7ab4","modified":1471103627000},{"_id":"source/_posts/2015-10-17-implements-parcelable-in-kotlin.md","hash":"dd589dcd345aefff3aa33656d5b61f2ec14ea1c7","modified":1471103627000},{"_id":"source/_posts/2016-03-01-delegated-properties-in-kotlin.md","hash":"e2e6b421c29aa1afaad57f3b260189e2d16cfd71","modified":1471103627000},{"_id":"source/_posts/2016-03-22-migrate-blog-to-hexo.md","hash":"3a500ab9ba694881f41de732bcd1e6ce91f19125","modified":1471103627000},{"_id":"source/_posts/2016-03-26-custom-view-in-android.md","hash":"5a9e0c743abe9860b917fbe8740f8a7cae0adf6c","modified":1471103627000},{"_id":"source/_posts/2016-04-20-guide-with-gradual-background.md","hash":"e5882d2bffde579b0068efee0e8e46ad04e4da9b","modified":1471103627000},{"_id":"source/_posts/2016-03-30-use-lambda-in-android.md","hash":"2bc4ef36ca64cd622af982fad001f84a3141f289","modified":1471103627000},{"_id":"source/_posts/2016-04-21-measure-custom-view-in-android.md","hash":"7df63dee63f68cb92e2c11526e62e2f6b9bf90ca","modified":1471103627000},{"_id":"source/_posts/2016-06-01-night-mode-in-android.md","hash":"4545b277b8759deb615e152f9b4e0c3179215fe6","modified":1471103627000},{"_id":"source/_posts/2016-08-13-custom-view-attrs.md","hash":"9adacf69b8b3213998aeaf3e37573c780871531f","modified":1471103830000},{"_id":"source/about/index.md","hash":"70c904721ada4c23814caec7275cf0aa135d7962","modified":1471103627000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1471103627000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1471103627000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1471103627000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1471103627000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1471103627000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1471103627000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1471103627000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1471103627000},{"_id":"themes/maupassant/layout/base.jade","hash":"ce9e1efb5a039d785445d2c89ba33cb0967f21df","modified":1471103627000},{"_id":"themes/maupassant/layout/index.jade","hash":"ac74f4f7cee705693bf5977bbae074373acddb7c","modified":1471103627000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1471103627000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1471103627000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1471103627000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1471103627000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1471103627000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1471103627000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1471103627000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1471103627000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"00af53f447c04dc8ed7bbee544f05278edda0f60","modified":1471103627000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1471103627000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1471103627000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1471103627000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1471103627000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1471103627000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1471103627000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1471103627000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1471103627000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1471103627000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1471103627000},{"_id":"themes/maupassant/source/css/style.scss","hash":"810e09434428b2159a2898935bddb95d33d57400","modified":1471103627000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1471103627000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1471103627000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1471103627000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1471103627000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471103627000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471103627000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471103627000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471103627000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471103627000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471103627000},{"_id":"source/assets/video/鼠须管演示.mov","hash":"c707c45409dbfed477c5feee85fadc94bc305203","modified":1471103627000},{"_id":"public/about/index.html","hash":"0c97db27c6f6baf822ab0ee737fd00aa96d6f388","modified":1471103851962},{"_id":"public/2016/06/01/night-mode-in-android/index.html","hash":"7169d92e8c396bea53ca9093ed8587ab4d1d8e69","modified":1471103851962},{"_id":"public/2016/03/22/migrate-blog-to-hexo/index.html","hash":"dc59644866aab2dfbdfbbafdf7d9a8253505c876","modified":1471103851963},{"_id":"public/2016/03/08/android-databinding-with-kotlin/index.html","hash":"b3049ca33633f3d5259868e8f9b747b9ebf7850d","modified":1471103851963},{"_id":"public/2015/08/20/android-studio-keymap/index.html","hash":"1b5f5a12a0bd53b50fff26403dcb5684d9a04876","modified":1471103851963},{"_id":"public/categories/技术/index.html","hash":"38ab77824f9348da8c2ec01017b0a8b0285132f7","modified":1471103851963},{"_id":"public/categories/技术/page/2/index.html","hash":"be47e954d4e4149798517f1d2df5a97277b508c3","modified":1471103851963},{"_id":"public/index.html","hash":"3c4e1bbee7e547fad33e23ffd05c3eeacedaa7f9","modified":1471103851963},{"_id":"public/page/2/index.html","hash":"fa76d53e73fe45595cda36cdb4b3079f60952b96","modified":1471103851963},{"_id":"public/archives/index.html","hash":"dc9ffff40e26c46a63b2b843e842a3d22217e107","modified":1471103851963},{"_id":"public/archives/2015/index.html","hash":"de602e1441329ca30a17ce31babd122a6339aa03","modified":1471103851963},{"_id":"public/archives/page/2/index.html","hash":"290217829666b4a1e1b5a3da6dd4bea8cbc199cd","modified":1471103851963},{"_id":"public/archives/2015/08/index.html","hash":"0e2bec600e8f5143511f38ebb0a88a8a2731851e","modified":1471103851963},{"_id":"public/archives/2015/09/index.html","hash":"c2fc014a85ab59da809eb98a2bed22ab4dd46bf6","modified":1471103851963},{"_id":"public/archives/2015/10/index.html","hash":"445d0883abc0cde21bae1c0e33b2d63358930d56","modified":1471103851963},{"_id":"public/archives/2016/index.html","hash":"73591db6cbe44e572f193992962cbaa9c15d74b8","modified":1471103851963},{"_id":"public/archives/2016/03/index.html","hash":"7a9efcddbd4e0626ab99744adc7cae70baf1fc02","modified":1471103851963},{"_id":"public/archives/2016/04/index.html","hash":"30c74f6926f5fc7ded0ee082b24c74dc5fb47f9b","modified":1471103851963},{"_id":"public/archives/2016/06/index.html","hash":"2e2ef49be27c5193cde4ad1d64359116e874e495","modified":1471103851963},{"_id":"public/archives/2016/08/index.html","hash":"31a434707e360e6ec78805f3e2e109c45ff560e1","modified":1471103851963},{"_id":"public/tags/jekyll/index.html","hash":"bdd630d6e58fe04d46dcd347055d88a38a483792","modified":1471103851963},{"_id":"public/tags/github/index.html","hash":"97b7fb25a40f4514a6559cd7f12127aa901bd28d","modified":1471103851963},{"_id":"public/tags/github-pages/index.html","hash":"3d16fd396a86cef3735af3ea2444ffdd32f91db7","modified":1471103851964},{"_id":"public/tags/设计模式/index.html","hash":"0cd75b23549c5aa788906350807efa14160922d0","modified":1471103851964},{"_id":"public/tags/Java/index.html","hash":"a3db583b66ecf809bf3eac18936e2876988641ea","modified":1471103851964},{"_id":"public/tags/Android-Studio/index.html","hash":"41400d4bcd787c0db94e8fce3dee2551ba18c678","modified":1471103851964},{"_id":"public/tags/Android/index.html","hash":"daea07ee50fb1525ae51c1553fa6753bec9704d6","modified":1471103851964},{"_id":"public/tags/Android/page/2/index.html","hash":"ed967ac11abbee6fef37e20947e24448597eca90","modified":1471103851964},{"_id":"public/tags/Volley/index.html","hash":"512624fc04e86fec707279823a03e4688f541064","modified":1471103851964},{"_id":"public/tags/RIME/index.html","hash":"44001ff08c5a3a28af04ffaa608b8a66f43336e9","modified":1471103851964},{"_id":"public/tags/Kotlin/index.html","hash":"49ec3c2992244c7ef5172a9cf7be40db2cd2f755","modified":1471103851964},{"_id":"public/tags/Hexo/index.html","hash":"c7d0512cad4444adbfac6e5735de98b451669f29","modified":1471103851964},{"_id":"public/2016/08/13/custom-view-attrs/index.html","hash":"7468c2bed284b84f8232c2c548fd46cf6d43c743","modified":1471103851964},{"_id":"public/2016/04/22/measure-custom-view-in-android/index.html","hash":"4a8c03ef264e67749ee3e6925959b999e09560df","modified":1471103851964},{"_id":"public/2016/04/01/guide-with-gradual-background/index.html","hash":"d815b267196f25163def4c9b67cc130fccd0bf82","modified":1471103851964},{"_id":"public/2016/03/30/use-lambda-in-android/index.html","hash":"2fcb8a429d268441fd575808703e93ac27206a12","modified":1471103851964},{"_id":"public/2016/03/26/custom-view-in-android/index.html","hash":"7e5d4dfa19b8a3d61490d60d4d4f72432ba651a2","modified":1471103851964},{"_id":"public/2016/03/01/delegated-properties-in-kotlin/index.html","hash":"e014cba607cef3ba4246600ea2925c955eb6be74","modified":1471103851964},{"_id":"public/2015/10/17/implements-parcelable-in-kotlin/index.html","hash":"8c3d6382a00ee6d8978e234320d1d5fc9e550b1c","modified":1471103851965},{"_id":"public/2015/09/12/rime/index.html","hash":"4c568988d0c1082745d0ae82ba2ebab78b90b215","modified":1471103851965},{"_id":"public/2015/08/27/volley/index.html","hash":"2cf15af29a868e3486bc486cdb47987a012736b4","modified":1471103851966},{"_id":"public/2015/08/25/template-method-pattern-in-java/index.html","hash":"cbe77a4060fef09027706d8cb6b09af93e6f6a90","modified":1471103851966},{"_id":"public/2015/08/22/android-design-support-library/index.html","hash":"394278263cb3b422abf5f93083d9d3911b81c784","modified":1471103851966},{"_id":"public/2015/08/17/build-personal-blog-in-github-pages-with-jekyll/index.html","hash":"972cbd5185ff0849e12acfaaedd8bdb1e5b5f91a","modified":1471103851966},{"_id":"public/2015/08/18/singleton-in-java/index.html","hash":"4f16a66845af1bd13d214e7a5b7334ca0db7c4bc","modified":1471103851966},{"_id":"public/CNAME","hash":"ce4808ba274df5b0f0a8bdffbc2d2ca7b1658fd4","modified":1471103851974},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471103851974},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471103851975},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471103851975},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471103851975},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471103851975},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471103851975},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1471103852006},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1471103852007},{"_id":"public/js/fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1471103852007},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1471103852007},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1471103852007},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1471103852007},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1471103852007},{"_id":"public/css/style.css","hash":"f2fa9afef0f5a3a51245b5756b4c23059c1eabbb","modified":1471103852007},{"_id":"public/assets/video/鼠须管演示.mov","hash":"c707c45409dbfed477c5feee85fadc94bc305203","modified":1471103852047}],"Category":[{"name":"技术","_id":"cirtd8zv00004gy6epke6yixc"}],"Data":[],"Page":[{"comments":0,"_content":"\n# 关于我\n\n就是个 Android 从业者，喜欢研究新技术，喜欢一些好玩儿的东西\n\n# 联系方式\n\n<i class=\"fa fa-github\" /> [@loshine](https://github.com/loshine)\n\n<i class=\"fa fa-envelope\" /> [loshine1992@gmail.com](mailto:loshine1992@gmail.com)","source":"about/index.md","raw":"---\ncomments: false\n---\n\n# 关于我\n\n就是个 Android 从业者，喜欢研究新技术，喜欢一些好玩儿的东西\n\n# 联系方式\n\n<i class=\"fa fa-github\" /> [@loshine](https://github.com/loshine)\n\n<i class=\"fa fa-envelope\" /> [loshine1992@gmail.com](mailto:loshine1992@gmail.com)","date":"2016-08-13T15:53:47.000Z","updated":"2016-08-13T15:53:47.000Z","path":"about/index.html","title":"","layout":"page","_id":"cirtd8zuu0001gy6efppiowrz","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>就是个 Android 从业者，喜欢研究新技术，喜欢一些好玩儿的东西</p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p><i class=\"fa fa-github\"> <a href=\"https://github.com/loshine\" target=\"_blank\" rel=\"external\">@loshine</a></i></p>\n<p><i class=\"fa fa-envelope\"> <a href=\"mailto:loshine1992@gmail.com\" target=\"_blank\" rel=\"external\">loshine1992@gmail.com</a></i></p>\n","excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>就是个 Android 从业者，喜欢研究新技术，喜欢一些好玩儿的东西</p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p><i class=\"fa fa-github\" /> <a href=\"https://github.com/loshine\">@loshine</a></p>\n<p><i class=\"fa fa-envelope\" /> <a href=\"mailto:loshine1992@gmail.com\">loshine1992@gmail.com</a></p>\n"}],"Post":[{"title":"使用Jekyll在Github-Pages上搭建个人博客","date":"2015-08-17T02:12:30.000Z","toc":true,"description":"我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了《“授人以渔”的教你搭建个人独立博客》——Azure Yu、《Using Jekyll with Pages》。鄙人于此也作一下使用Jekyll在Github-Pages上搭建个人博客的总结，也可以给其他后来者做一些参考。","_content":"> 我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了[《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]、[《Using Jekyll with Pages》][site2]。鄙人于此也作一下**使用Jekyll在Github-Pages上搭建个人博客**的总结，也可以给其他后来者做一些参考。\n> \n> 本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考[《版本控制入门 – 搬进 Github》][site3]。\n> \n> 在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看[这里][site4]\n\n[site1]: http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\n[site2]: https://help.github.com/articles/using-jekyll-with-pages/\n[site3]: http://www.imooc.com/learn/390\n[site4]: http://saito.im/slide/ruby-new.html\n\n# 开始\n\n## 新建一个仓库\n\n* 如果没有Github帐号，首先[注册一个][register]。\n* 接下来新建一个仓库\n\n**注：**Repository name(仓库名)必须是 `yourusername.github.io`\n\n比如我的用户名是loshine，那么我的这个仓库名就是`loshine.github.io`\n\n[register]: https://github.com/\n\n## clone到本地\n\n使用Github客户端或者Git命令行工具将这个项目clone到本地。\n\n## 上传页面\n\n之后，新建一个`index.html`文件，push到对应的**master**分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问`yourusername.github.io`，就能看见完整的网页了。\n<h1 id=\"build\">建造</h1>\n\n## 搭建本地环境\n\n由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。\n\n1. **Ruby** - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请[安装Ruby环境][ruby]。\n2. **Bundler** - 打开终端输入`gem install bundler`以安装。\n3. **github-pages** - 打开终端输入`gem install github-pages`以安装。\n3. **Jekyll** - 打开终端输入`gem install jekyll`以安装。\n\n**注**: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为[淘宝镜像源][taobaoGem]解决。\n\n[ruby]: https://www.ruby-lang.org/en/downloads/\n[taobaoGem]: http://ruby.taobao.org/\n\n## Jekyll的使用\n\n1. 在我们之前创建的仓库下新建一个文件，命名为**Gemfile**，并写入`gem 'github-pages'`。\n2. 在仓库目录下打开命令行工具，输入`bundle install`。\n3. 在命令行工具中输入`bundle exec jekyll serve`，按提示打开地址，就可以在本地进行查看和调试网站了。\n\n## Jekyll目录解析\n\n```\n|—— _config.yml\n|—— _includes\n    |—— footer.html\n    |—— header.html\n|—— _layouts\n    |—— default.html\n    |—— post.html\n|—— _posts\n    |—— 2015-04-09-welcome-to-jekyll.md\n    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md\n|—— _site\n|—— css\n    |—— *.css\n|—— script\n    |—— *.js\n|—— Gemfile\n|—— Gemfile.lock\n|—— index.html\n```\n\n接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。\n\n* `_config.yml` 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件\n* `_includes` 文章各个部分的html文件，可以在布局中包含这些文件\n* `_layouts` 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。\n* `_posts` 存放博客文章\n* `CNAME` 域名地址\n* `css` 存放博客所用css\n* `script` 存放博客所用JavaScript\n* `index.html` 博客主页\n<h1 id=\"write blog\">写博客</h1>\n\n博客文章都是用[markdown格式][markdown]书写，命名格式为*时间加标题*，形如：`2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md`\n\n文章需要在开头位置加入一段特殊的文字，其中定义了使用到的**样式**、**文章标题**、**时间**、**分类**。\n\n```md\n---\nlayout: post\ntitle: \"Welcome to Jekyll!\"\ndate: 2014-01-27 21:57:11\ncategories: Blog\n---\n```\n\n完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入`_post`文件夹中，并同步到Github上哦。\n\n[markdown]: http://wowubuntu.com/markdown/\n\n# 装修\n\n## 使用模板\n\n之前在[Jekyll目录解析](#jekyll dictionary)中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在[Jekyll 主题][theme]中选择自己喜欢的主题并放入到自己的项目中去。\n\n以我的博客为例，我选择了[Pithy][theme-pithy]主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入`bundle exec jekyll serve`运行jekyll服务器，打开`http://localhost:4000`就可以查看到效果了。\n\n[theme]: http://jekyllthemes.org/\n[theme-pithy]: http://jekyllthemes.org/themes/pithy/\n\n## 自定义样式\n\n如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您[Run Noob][run noob]、[w3cschool][w3cschool]这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。\n\n[run noob]: http://www.runoob.com/\n[w3cschool]: http://www.w3school.com.cn/\n\n# 定制\n\n## 使用独立域名\n\n* 新建一个文件，命名为**CNAME**，然后在里面写入你需要绑定的独立域名就可以了。\n* 在你的域名服务商处添加解析地址。\n\n完成以上步骤你就可以使用自己的独立域名了。\n\n## 添加评论功能\n\n### 多说\n\n多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。\n\n* 登录[多说][ds]，创建一个项目，拷贝你的**通用代码**。\n* 在`_include`文件夹里新建一个`comment.html`文件，将通用代码粘贴进去。\n* 修改**通用代码**中需要配置的地方\n\n```html\n<div class=\"ds-thread\" data-thread-key=\"请将此处替换成文章在你的站点中的ID\"\n    data-title=\"请替换成文章的标题\" data-url=\"请替换成文章的网址\"></div>\n```\n\n修改为\n\n```html\n<div class=\"ds-thread\" data-thread-key=\"【 page.id 】\"\n    data-title=\"【 page.title 】\" data-url=\"your web site【 page.url 】\"></div>\n```\n\n注意`【】`需要替换为**两个大括号**，`your web site`需替换为**您的域名地址**。\n\n* 在`_layout`中的`post.html`中的底部加入`【% include comment.html %】`（【】须替换为{}）\n* 在**多说**的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等\n\n[ds]: http://duoshuo.com/\n\n### Disqus\n\nDisqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。\n\n* [注册Disqus][disqus]\n* 右上角设置项中选择`Add Disqus To Site`，按步骤走，最后复制生成的**Universal Code**\n* 其它部分类似如上的集成多说操作，*但不需要自己修改代码了*\n* Disqus也有控制台可以对评论进行操作\n\n**注意**：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。\n\n[disqus]: https://disqus.com/\n\n# 参考\n\n* [《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]\n* [官方文档][official documents]\n\n[official documents]: https://help.github.com/categories/github-pages-basics/\n","source":"_posts/2015-08-17-build-personal-blog-in-github-pages-with-jekyll.md","raw":"---\ntitle: 使用Jekyll在Github-Pages上搭建个人博客\ndate: 2015-08-17 10:12:30\ncategory: [技术]\ntags: [jekyll,github,github-pages]\ntoc: true\ndescription: 我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了《“授人以渔”的教你搭建个人独立博客》——Azure Yu、《Using Jekyll with Pages》。鄙人于此也作一下使用Jekyll在Github-Pages上搭建个人博客的总结，也可以给其他后来者做一些参考。\n---\n> 我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了[《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]、[《Using Jekyll with Pages》][site2]。鄙人于此也作一下**使用Jekyll在Github-Pages上搭建个人博客**的总结，也可以给其他后来者做一些参考。\n> \n> 本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考[《版本控制入门 – 搬进 Github》][site3]。\n> \n> 在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看[这里][site4]\n\n[site1]: http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\n[site2]: https://help.github.com/articles/using-jekyll-with-pages/\n[site3]: http://www.imooc.com/learn/390\n[site4]: http://saito.im/slide/ruby-new.html\n\n# 开始\n\n## 新建一个仓库\n\n* 如果没有Github帐号，首先[注册一个][register]。\n* 接下来新建一个仓库\n\n**注：**Repository name(仓库名)必须是 `yourusername.github.io`\n\n比如我的用户名是loshine，那么我的这个仓库名就是`loshine.github.io`\n\n[register]: https://github.com/\n\n## clone到本地\n\n使用Github客户端或者Git命令行工具将这个项目clone到本地。\n\n## 上传页面\n\n之后，新建一个`index.html`文件，push到对应的**master**分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问`yourusername.github.io`，就能看见完整的网页了。\n<h1 id=\"build\">建造</h1>\n\n## 搭建本地环境\n\n由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。\n\n1. **Ruby** - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请[安装Ruby环境][ruby]。\n2. **Bundler** - 打开终端输入`gem install bundler`以安装。\n3. **github-pages** - 打开终端输入`gem install github-pages`以安装。\n3. **Jekyll** - 打开终端输入`gem install jekyll`以安装。\n\n**注**: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为[淘宝镜像源][taobaoGem]解决。\n\n[ruby]: https://www.ruby-lang.org/en/downloads/\n[taobaoGem]: http://ruby.taobao.org/\n\n## Jekyll的使用\n\n1. 在我们之前创建的仓库下新建一个文件，命名为**Gemfile**，并写入`gem 'github-pages'`。\n2. 在仓库目录下打开命令行工具，输入`bundle install`。\n3. 在命令行工具中输入`bundle exec jekyll serve`，按提示打开地址，就可以在本地进行查看和调试网站了。\n\n## Jekyll目录解析\n\n```\n|—— _config.yml\n|—— _includes\n    |—— footer.html\n    |—— header.html\n|—— _layouts\n    |—— default.html\n    |—— post.html\n|—— _posts\n    |—— 2015-04-09-welcome-to-jekyll.md\n    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md\n|—— _site\n|—— css\n    |—— *.css\n|—— script\n    |—— *.js\n|—— Gemfile\n|—— Gemfile.lock\n|—— index.html\n```\n\n接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。\n\n* `_config.yml` 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件\n* `_includes` 文章各个部分的html文件，可以在布局中包含这些文件\n* `_layouts` 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。\n* `_posts` 存放博客文章\n* `CNAME` 域名地址\n* `css` 存放博客所用css\n* `script` 存放博客所用JavaScript\n* `index.html` 博客主页\n<h1 id=\"write blog\">写博客</h1>\n\n博客文章都是用[markdown格式][markdown]书写，命名格式为*时间加标题*，形如：`2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md`\n\n文章需要在开头位置加入一段特殊的文字，其中定义了使用到的**样式**、**文章标题**、**时间**、**分类**。\n\n```md\n---\nlayout: post\ntitle: \"Welcome to Jekyll!\"\ndate: 2014-01-27 21:57:11\ncategories: Blog\n---\n```\n\n完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入`_post`文件夹中，并同步到Github上哦。\n\n[markdown]: http://wowubuntu.com/markdown/\n\n# 装修\n\n## 使用模板\n\n之前在[Jekyll目录解析](#jekyll dictionary)中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在[Jekyll 主题][theme]中选择自己喜欢的主题并放入到自己的项目中去。\n\n以我的博客为例，我选择了[Pithy][theme-pithy]主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入`bundle exec jekyll serve`运行jekyll服务器，打开`http://localhost:4000`就可以查看到效果了。\n\n[theme]: http://jekyllthemes.org/\n[theme-pithy]: http://jekyllthemes.org/themes/pithy/\n\n## 自定义样式\n\n如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您[Run Noob][run noob]、[w3cschool][w3cschool]这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。\n\n[run noob]: http://www.runoob.com/\n[w3cschool]: http://www.w3school.com.cn/\n\n# 定制\n\n## 使用独立域名\n\n* 新建一个文件，命名为**CNAME**，然后在里面写入你需要绑定的独立域名就可以了。\n* 在你的域名服务商处添加解析地址。\n\n完成以上步骤你就可以使用自己的独立域名了。\n\n## 添加评论功能\n\n### 多说\n\n多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。\n\n* 登录[多说][ds]，创建一个项目，拷贝你的**通用代码**。\n* 在`_include`文件夹里新建一个`comment.html`文件，将通用代码粘贴进去。\n* 修改**通用代码**中需要配置的地方\n\n```html\n<div class=\"ds-thread\" data-thread-key=\"请将此处替换成文章在你的站点中的ID\"\n    data-title=\"请替换成文章的标题\" data-url=\"请替换成文章的网址\"></div>\n```\n\n修改为\n\n```html\n<div class=\"ds-thread\" data-thread-key=\"【 page.id 】\"\n    data-title=\"【 page.title 】\" data-url=\"your web site【 page.url 】\"></div>\n```\n\n注意`【】`需要替换为**两个大括号**，`your web site`需替换为**您的域名地址**。\n\n* 在`_layout`中的`post.html`中的底部加入`【% include comment.html %】`（【】须替换为{}）\n* 在**多说**的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等\n\n[ds]: http://duoshuo.com/\n\n### Disqus\n\nDisqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。\n\n* [注册Disqus][disqus]\n* 右上角设置项中选择`Add Disqus To Site`，按步骤走，最后复制生成的**Universal Code**\n* 其它部分类似如上的集成多说操作，*但不需要自己修改代码了*\n* Disqus也有控制台可以对评论进行操作\n\n**注意**：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。\n\n[disqus]: https://disqus.com/\n\n# 参考\n\n* [《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]\n* [官方文档][official documents]\n\n[official documents]: https://help.github.com/categories/github-pages-basics/\n","slug":"build-personal-blog-in-github-pages-with-jekyll","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zup0000gy6e4x4fy1r2","content":"<blockquote>\n<p>我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了<a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\" target=\"_blank\" rel=\"external\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a>、<a href=\"https://help.github.com/articles/using-jekyll-with-pages/\" target=\"_blank\" rel=\"external\">《Using Jekyll with Pages》</a>。鄙人于此也作一下<strong>使用Jekyll在Github-Pages上搭建个人博客</strong>的总结，也可以给其他后来者做一些参考。</p>\n<p>本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考<a href=\"http://www.imooc.com/learn/390\" target=\"_blank\" rel=\"external\">《版本控制入门 – 搬进 Github》</a>。</p>\n<p>在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看<a href=\"http://saito.im/slide/ruby-new.html\" target=\"_blank\" rel=\"external\">这里</a></p>\n</blockquote>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"新建一个仓库\"><a href=\"#新建一个仓库\" class=\"headerlink\" title=\"新建一个仓库\"></a>新建一个仓库</h2><ul>\n<li>如果没有Github帐号，首先<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">注册一个</a>。</li>\n<li>接下来新建一个仓库</li>\n</ul>\n<p><strong>注：</strong>Repository name(仓库名)必须是 <code>yourusername.github.io</code></p>\n<p>比如我的用户名是loshine，那么我的这个仓库名就是<code>loshine.github.io</code></p>\n<h2 id=\"clone到本地\"><a href=\"#clone到本地\" class=\"headerlink\" title=\"clone到本地\"></a>clone到本地</h2><p>使用Github客户端或者Git命令行工具将这个项目clone到本地。</p>\n<h2 id=\"上传页面\"><a href=\"#上传页面\" class=\"headerlink\" title=\"上传页面\"></a>上传页面</h2><p>之后，新建一个<code>index.html</code>文件，push到对应的<strong>master</strong>分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问<code>yourusername.github.io</code>，就能看见完整的网页了。</p>\n<h1 id=\"build\">建造</h1>\n\n<h2 id=\"搭建本地环境\"><a href=\"#搭建本地环境\" class=\"headerlink\" title=\"搭建本地环境\"></a>搭建本地环境</h2><p>由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。</p>\n<ol>\n<li><strong>Ruby</strong> - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请<a href=\"https://www.ruby-lang.org/en/downloads/\" target=\"_blank\" rel=\"external\">安装Ruby环境</a>。</li>\n<li><strong>Bundler</strong> - 打开终端输入<code>gem install bundler</code>以安装。</li>\n<li><strong>github-pages</strong> - 打开终端输入<code>gem install github-pages</code>以安装。</li>\n<li><strong>Jekyll</strong> - 打开终端输入<code>gem install jekyll</code>以安装。</li>\n</ol>\n<p><strong>注</strong>: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为<a href=\"http://ruby.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝镜像源</a>解决。</p>\n<h2 id=\"Jekyll的使用\"><a href=\"#Jekyll的使用\" class=\"headerlink\" title=\"Jekyll的使用\"></a>Jekyll的使用</h2><ol>\n<li>在我们之前创建的仓库下新建一个文件，命名为<strong>Gemfile</strong>，并写入<code>gem &#39;github-pages&#39;</code>。</li>\n<li>在仓库目录下打开命令行工具，输入<code>bundle install</code>。</li>\n<li>在命令行工具中输入<code>bundle exec jekyll serve</code>，按提示打开地址，就可以在本地进行查看和调试网站了。</li>\n</ol>\n<h2 id=\"Jekyll目录解析\"><a href=\"#Jekyll目录解析\" class=\"headerlink\" title=\"Jekyll目录解析\"></a>Jekyll目录解析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">|—— _config.yml</div><div class=\"line\">|—— _includes</div><div class=\"line\">    |—— footer.html</div><div class=\"line\">    |—— header.html</div><div class=\"line\">|—— _layouts</div><div class=\"line\">    |—— default.html</div><div class=\"line\">    |—— post.html</div><div class=\"line\">|—— _posts</div><div class=\"line\">    |—— 2015-04-09-welcome-to-jekyll.md</div><div class=\"line\">    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</div><div class=\"line\">|—— _site</div><div class=\"line\">|—— css</div><div class=\"line\">    |—— *.css</div><div class=\"line\">|—— script</div><div class=\"line\">    |—— *.js</div><div class=\"line\">|—— Gemfile</div><div class=\"line\">|—— Gemfile.lock</div><div class=\"line\">|—— index.html</div></pre></td></tr></table></figure>\n<p>接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。</p>\n<ul>\n<li><code>_config.yml</code> 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件</li>\n<li><code>_includes</code> 文章各个部分的html文件，可以在布局中包含这些文件</li>\n<li><code>_layouts</code> 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。</li>\n<li><code>_posts</code> 存放博客文章</li>\n<li><code>CNAME</code> 域名地址</li>\n<li><code>css</code> 存放博客所用css</li>\n<li><code>script</code> 存放博客所用JavaScript</li>\n<li><code>index.html</code> 博客主页<h1 id=\"write blog\">写博客</h1>\n\n</li>\n</ul>\n<p>博客文章都是用<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">markdown格式</a>书写，命名格式为<em>时间加标题</em>，形如：<code>2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</code></p>\n<p>文章需要在开头位置加入一段特殊的文字，其中定义了使用到的<strong>样式</strong>、<strong>文章标题</strong>、<strong>时间</strong>、<strong>分类</strong>。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">layout: post</div><div class=\"line\">title: \"Welcome to Jekyll!\"</div><div class=\"line\">date: 2014-01-27 21:57:11</div><div class=\"line\"><span class=\"section\">categories: Blog</span></div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入<code>_post</code>文件夹中，并同步到Github上哦。</p>\n<h1 id=\"装修\"><a href=\"#装修\" class=\"headerlink\" title=\"装修\"></a>装修</h1><h2 id=\"使用模板\"><a href=\"#使用模板\" class=\"headerlink\" title=\"使用模板\"></a>使用模板</h2><p>之前在<a href=\"#jekyll dictionary\">Jekyll目录解析</a>中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"external\">Jekyll 主题</a>中选择自己喜欢的主题并放入到自己的项目中去。</p>\n<p>以我的博客为例，我选择了<a href=\"http://jekyllthemes.org/themes/pithy/\" target=\"_blank\" rel=\"external\">Pithy</a>主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入<code>bundle exec jekyll serve</code>运行jekyll服务器，打开<code>http://localhost:4000</code>就可以查看到效果了。</p>\n<h2 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h2><p>如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您<a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"external\">Run Noob</a>、<a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"external\">w3cschool</a>这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。</p>\n<h1 id=\"定制\"><a href=\"#定制\" class=\"headerlink\" title=\"定制\"></a>定制</h1><h2 id=\"使用独立域名\"><a href=\"#使用独立域名\" class=\"headerlink\" title=\"使用独立域名\"></a>使用独立域名</h2><ul>\n<li>新建一个文件，命名为<strong>CNAME</strong>，然后在里面写入你需要绑定的独立域名就可以了。</li>\n<li>在你的域名服务商处添加解析地址。</li>\n</ul>\n<p>完成以上步骤你就可以使用自己的独立域名了。</p>\n<h2 id=\"添加评论功能\"><a href=\"#添加评论功能\" class=\"headerlink\" title=\"添加评论功能\"></a>添加评论功能</h2><h3 id=\"多说\"><a href=\"#多说\" class=\"headerlink\" title=\"多说\"></a>多说</h3><p>多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。</p>\n<ul>\n<li>登录<a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a>，创建一个项目，拷贝你的<strong>通用代码</strong>。</li>\n<li>在<code>_include</code>文件夹里新建一个<code>comment.html</code>文件，将通用代码粘贴进去。</li>\n<li>修改<strong>通用代码</strong>中需要配置的地方</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"请将此处替换成文章在你的站点中的ID\"</span></span></div><div class=\"line\">    <span class=\"attr\">data-title</span>=<span class=\"string\">\"请替换成文章的标题\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"请替换成文章的网址\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>修改为</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"【 page.id 】\"</span></span></div><div class=\"line\">    <span class=\"attr\">data-title</span>=<span class=\"string\">\"【 page.title 】\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"your web site【 page.url 】\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意<code>【】</code>需要替换为<strong>两个大括号</strong>，<code>your web site</code>需替换为<strong>您的域名地址</strong>。</p>\n<ul>\n<li>在<code>_layout</code>中的<code>post.html</code>中的底部加入<code>【% include comment.html %】</code>（【】须替换为{}）</li>\n<li>在<strong>多说</strong>的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等</li>\n</ul>\n<h3 id=\"Disqus\"><a href=\"#Disqus\" class=\"headerlink\" title=\"Disqus\"></a>Disqus</h3><p>Disqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。</p>\n<ul>\n<li><a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">注册Disqus</a></li>\n<li>右上角设置项中选择<code>Add Disqus To Site</code>，按步骤走，最后复制生成的<strong>Universal Code</strong></li>\n<li>其它部分类似如上的集成多说操作，<em>但不需要自己修改代码了</em></li>\n<li>Disqus也有控制台可以对评论进行操作</li>\n</ul>\n<p><strong>注意</strong>：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\" target=\"_blank\" rel=\"external\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a></li>\n<li><a href=\"https://help.github.com/categories/github-pages-basics/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了<a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a>、<a href=\"https://help.github.com/articles/using-jekyll-with-pages/\">《Using Jekyll with Pages》</a>。鄙人于此也作一下<strong>使用Jekyll在Github-Pages上搭建个人博客</strong>的总结，也可以给其他后来者做一些参考。</p>\n<p>本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考<a href=\"http://www.imooc.com/learn/390\">《版本控制入门 – 搬进 Github》</a>。</p>\n<p>在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看<a href=\"http://saito.im/slide/ruby-new.html\">这里</a></p>\n</blockquote>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"新建一个仓库\"><a href=\"#新建一个仓库\" class=\"headerlink\" title=\"新建一个仓库\"></a>新建一个仓库</h2><ul>\n<li>如果没有Github帐号，首先<a href=\"https://github.com/\">注册一个</a>。</li>\n<li>接下来新建一个仓库</li>\n</ul>\n<p><strong>注：</strong>Repository name(仓库名)必须是 <code>yourusername.github.io</code></p>\n<p>比如我的用户名是loshine，那么我的这个仓库名就是<code>loshine.github.io</code></p>\n<h2 id=\"clone到本地\"><a href=\"#clone到本地\" class=\"headerlink\" title=\"clone到本地\"></a>clone到本地</h2><p>使用Github客户端或者Git命令行工具将这个项目clone到本地。</p>\n<h2 id=\"上传页面\"><a href=\"#上传页面\" class=\"headerlink\" title=\"上传页面\"></a>上传页面</h2><p>之后，新建一个<code>index.html</code>文件，push到对应的<strong>master</strong>分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问<code>yourusername.github.io</code>，就能看见完整的网页了。</p>\n<h1 id=\"build\">建造</h1>\n\n<h2 id=\"搭建本地环境\"><a href=\"#搭建本地环境\" class=\"headerlink\" title=\"搭建本地环境\"></a>搭建本地环境</h2><p>由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。</p>\n<ol>\n<li><strong>Ruby</strong> - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请<a href=\"https://www.ruby-lang.org/en/downloads/\">安装Ruby环境</a>。</li>\n<li><strong>Bundler</strong> - 打开终端输入<code>gem install bundler</code>以安装。</li>\n<li><strong>github-pages</strong> - 打开终端输入<code>gem install github-pages</code>以安装。</li>\n<li><strong>Jekyll</strong> - 打开终端输入<code>gem install jekyll</code>以安装。</li>\n</ol>\n<p><strong>注</strong>: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为<a href=\"http://ruby.taobao.org/\">淘宝镜像源</a>解决。</p>\n<h2 id=\"Jekyll的使用\"><a href=\"#Jekyll的使用\" class=\"headerlink\" title=\"Jekyll的使用\"></a>Jekyll的使用</h2><ol>\n<li>在我们之前创建的仓库下新建一个文件，命名为<strong>Gemfile</strong>，并写入<code>gem &#39;github-pages&#39;</code>。</li>\n<li>在仓库目录下打开命令行工具，输入<code>bundle install</code>。</li>\n<li>在命令行工具中输入<code>bundle exec jekyll serve</code>，按提示打开地址，就可以在本地进行查看和调试网站了。</li>\n</ol>\n<h2 id=\"Jekyll目录解析\"><a href=\"#Jekyll目录解析\" class=\"headerlink\" title=\"Jekyll目录解析\"></a>Jekyll目录解析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">|—— _config.yml</div><div class=\"line\">|—— _includes</div><div class=\"line\">    |—— footer.html</div><div class=\"line\">    |—— header.html</div><div class=\"line\">|—— _layouts</div><div class=\"line\">    |—— default.html</div><div class=\"line\">    |—— post.html</div><div class=\"line\">|—— _posts</div><div class=\"line\">    |—— 2015-04-09-welcome-to-jekyll.md</div><div class=\"line\">    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</div><div class=\"line\">|—— _site</div><div class=\"line\">|—— css</div><div class=\"line\">    |—— *.css</div><div class=\"line\">|—— script</div><div class=\"line\">    |—— *.js</div><div class=\"line\">|—— Gemfile</div><div class=\"line\">|—— Gemfile.lock</div><div class=\"line\">|—— index.html</div></pre></td></tr></table></figure>\n<p>接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。</p>\n<ul>\n<li><code>_config.yml</code> 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件</li>\n<li><code>_includes</code> 文章各个部分的html文件，可以在布局中包含这些文件</li>\n<li><code>_layouts</code> 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。</li>\n<li><code>_posts</code> 存放博客文章</li>\n<li><code>CNAME</code> 域名地址</li>\n<li><code>css</code> 存放博客所用css</li>\n<li><code>script</code> 存放博客所用JavaScript</li>\n<li><code>index.html</code> 博客主页<h1 id=\"write blog\">写博客</h1>\n\n</li>\n</ul>\n<p>博客文章都是用<a href=\"http://wowubuntu.com/markdown/\">markdown格式</a>书写，命名格式为<em>时间加标题</em>，形如：<code>2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</code></p>\n<p>文章需要在开头位置加入一段特殊的文字，其中定义了使用到的<strong>样式</strong>、<strong>文章标题</strong>、<strong>时间</strong>、<strong>分类</strong>。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">layout: post</div><div class=\"line\">title: \"Welcome to Jekyll!\"</div><div class=\"line\">date: 2014-01-27 21:57:11</div><div class=\"line\"><span class=\"section\">categories: Blog</div><div class=\"line\">---</span></div></pre></td></tr></table></figure>\n<p>完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入<code>_post</code>文件夹中，并同步到Github上哦。</p>\n<h1 id=\"装修\"><a href=\"#装修\" class=\"headerlink\" title=\"装修\"></a>装修</h1><h2 id=\"使用模板\"><a href=\"#使用模板\" class=\"headerlink\" title=\"使用模板\"></a>使用模板</h2><p>之前在<a href=\"#jekyll dictionary\">Jekyll目录解析</a>中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在<a href=\"http://jekyllthemes.org/\">Jekyll 主题</a>中选择自己喜欢的主题并放入到自己的项目中去。</p>\n<p>以我的博客为例，我选择了<a href=\"http://jekyllthemes.org/themes/pithy/\">Pithy</a>主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入<code>bundle exec jekyll serve</code>运行jekyll服务器，打开<code>http://localhost:4000</code>就可以查看到效果了。</p>\n<h2 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h2><p>如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您<a href=\"http://www.runoob.com/\">Run Noob</a>、<a href=\"http://www.w3school.com.cn/\">w3cschool</a>这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。</p>\n<h1 id=\"定制\"><a href=\"#定制\" class=\"headerlink\" title=\"定制\"></a>定制</h1><h2 id=\"使用独立域名\"><a href=\"#使用独立域名\" class=\"headerlink\" title=\"使用独立域名\"></a>使用独立域名</h2><ul>\n<li>新建一个文件，命名为<strong>CNAME</strong>，然后在里面写入你需要绑定的独立域名就可以了。</li>\n<li>在你的域名服务商处添加解析地址。</li>\n</ul>\n<p>完成以上步骤你就可以使用自己的独立域名了。</p>\n<h2 id=\"添加评论功能\"><a href=\"#添加评论功能\" class=\"headerlink\" title=\"添加评论功能\"></a>添加评论功能</h2><h3 id=\"多说\"><a href=\"#多说\" class=\"headerlink\" title=\"多说\"></a>多说</h3><p>多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。</p>\n<ul>\n<li>登录<a href=\"http://duoshuo.com/\">多说</a>，创建一个项目，拷贝你的<strong>通用代码</strong>。</li>\n<li>在<code>_include</code>文件夹里新建一个<code>comment.html</code>文件，将通用代码粘贴进去。</li>\n<li>修改<strong>通用代码</strong>中需要配置的地方</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"请将此处替换成文章在你的站点中的ID\"</span></div><div class=\"line\">    <span class=\"attr\">data-title</span>=<span class=\"string\">\"请替换成文章的标题\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"请替换成文章的网址\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>修改为</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"【 page.id 】\"</span></div><div class=\"line\">    <span class=\"attr\">data-title</span>=<span class=\"string\">\"【 page.title 】\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"your web site【 page.url 】\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意<code>【】</code>需要替换为<strong>两个大括号</strong>，<code>your web site</code>需替换为<strong>您的域名地址</strong>。</p>\n<ul>\n<li>在<code>_layout</code>中的<code>post.html</code>中的底部加入<code>【% include comment.html %】</code>（【】须替换为{}）</li>\n<li>在<strong>多说</strong>的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等</li>\n</ul>\n<h3 id=\"Disqus\"><a href=\"#Disqus\" class=\"headerlink\" title=\"Disqus\"></a>Disqus</h3><p>Disqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。</p>\n<ul>\n<li><a href=\"https://disqus.com/\">注册Disqus</a></li>\n<li>右上角设置项中选择<code>Add Disqus To Site</code>，按步骤走，最后复制生成的<strong>Universal Code</strong></li>\n<li>其它部分类似如上的集成多说操作，<em>但不需要自己修改代码了</em></li>\n<li>Disqus也有控制台可以对评论进行操作</li>\n</ul>\n<p><strong>注意</strong>：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a></li>\n<li><a href=\"https://help.github.com/categories/github-pages-basics/\">官方文档</a></li>\n</ul>\n"},{"title":"Java中的单例设计模式","date":"2015-08-18T03:19:30.000Z","toc":true,"description":"单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。","_content":"> 单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n\n# 特点\n\n单例模式有以下特点：\n\n1. 单例类只能有一个实例\n2. 单例类必须自己创建自己的唯一实例\n3. 单例类必须给所有其他对象提供这一实例\n\n# 实现\n\n## 饿汉式\n\n饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。\n\n```java\npublic class Singleton {\n\n    // 饿汉式，开始就建立一个对象\n    private static final Singleton single = new Singleton();\n    \n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    public static Singleton getInstance() {\n        return single;\n    }\n}\n```\n\n## 懒汉式\n\n懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。\n\n```java\npublic class Singleton {\n    // 懒汉式，刚开始不创建对象\n    private static Singleton single=null;\n\n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    // 静态工厂方法\n    public static Singleton getInstance() {\n         if (single == null) {\n             single = new Singleton();\n         }\n        return single;  \n    }\n}\n```\n\n这种懒汉式实现是**非线程安全**的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式\n\n* 同步`getInstance()`方法\n\n```java\npublic static synchronized Singleton getInstance() {\n    if (single == null) {\n        single = new Singleton();\n    }    \n    return single;\n}\n```\n\n* 代码块加锁和双重检查\n\n```java\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        synchronized (Singleton.class) {\n            if (singleton == null) {\n            singleton = new Singleton();\n            }\n        }\n    }\n    return singleton;\n}\n```\n\n* 静态内部类\n\n```java\npublic class Singleton {\n    \n    // 用于封装单例实例的内部类\n    private static class LazyHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    \n    // 私有构造\n    private Singleton() {}\n    \n    // 获取单例实例的方法\n    public static final Singleton getInstance() {\n        return LazyHolder.INSTANCE;\n    }    \n}\n```\n\n其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。\n","source":"_posts/2015-08-18-singleton-in-java.md","raw":"---\ntitle: Java中的单例设计模式\ndate: 2015-08-18 11:19:30\ncategory: [技术]\ntags: [设计模式, Java]\ntoc: true\ndescription: 单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n---\n> 单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n\n# 特点\n\n单例模式有以下特点：\n\n1. 单例类只能有一个实例\n2. 单例类必须自己创建自己的唯一实例\n3. 单例类必须给所有其他对象提供这一实例\n\n# 实现\n\n## 饿汉式\n\n饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。\n\n```java\npublic class Singleton {\n\n    // 饿汉式，开始就建立一个对象\n    private static final Singleton single = new Singleton();\n    \n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    public static Singleton getInstance() {\n        return single;\n    }\n}\n```\n\n## 懒汉式\n\n懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。\n\n```java\npublic class Singleton {\n    // 懒汉式，刚开始不创建对象\n    private static Singleton single=null;\n\n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    // 静态工厂方法\n    public static Singleton getInstance() {\n         if (single == null) {\n             single = new Singleton();\n         }\n        return single;  \n    }\n}\n```\n\n这种懒汉式实现是**非线程安全**的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式\n\n* 同步`getInstance()`方法\n\n```java\npublic static synchronized Singleton getInstance() {\n    if (single == null) {\n        single = new Singleton();\n    }    \n    return single;\n}\n```\n\n* 代码块加锁和双重检查\n\n```java\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        synchronized (Singleton.class) {\n            if (singleton == null) {\n            singleton = new Singleton();\n            }\n        }\n    }\n    return singleton;\n}\n```\n\n* 静态内部类\n\n```java\npublic class Singleton {\n    \n    // 用于封装单例实例的内部类\n    private static class LazyHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    \n    // 私有构造\n    private Singleton() {}\n    \n    // 获取单例实例的方法\n    public static final Singleton getInstance() {\n        return LazyHolder.INSTANCE;\n    }    \n}\n```\n\n其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。\n","slug":"singleton-in-java","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zuv0002gy6eiz7pu438","content":"<blockquote>\n<p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\n</blockquote>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例</li>\n<li>单例类必须自己创建自己的唯一实例</li>\n<li>单例类必须给所有其他对象提供这一实例</li>\n</ol>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h2><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 饿汉式，开始就建立一个对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton single = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> single;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h2><p>懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 懒汉式，刚开始不创建对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton single=<span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 静态工厂方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             single = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">         &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> single;  </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种懒汉式实现是<strong>非线程安全</strong>的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式</p>\n<ul>\n<li>同步<code>getInstance()</code>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        single = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;    </div><div class=\"line\">    <span class=\"keyword\">return</span> single;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>代码块加锁和双重检查</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> singleton;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>静态内部类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 用于封装单例实例的内部类</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 私有构造</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 获取单例实例的方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</div><div class=\"line\">    &#125;    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。</p>\n","excerpt":"","more":"<blockquote>\n<p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\n</blockquote>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例</li>\n<li>单例类必须自己创建自己的唯一实例</li>\n<li>单例类必须给所有其他对象提供这一实例</li>\n</ol>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h2><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 饿汉式，开始就建立一个对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton single = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> single;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h2><p>懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 懒汉式，刚开始不创建对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton single=<span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 静态工厂方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             single = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">         &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> single;  </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种懒汉式实现是<strong>非线程安全</strong>的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式</p>\n<ul>\n<li>同步<code>getInstance()</code>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        single = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;    </div><div class=\"line\">    <span class=\"keyword\">return</span> single;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>代码块加锁和双重检查</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> singleton;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>静态内部类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 用于封装单例实例的内部类</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 私有构造</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 获取单例实例的方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</div><div class=\"line\">    &#125;    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。</p>\n"},{"title":"Android Studio常用快捷键","date":"2015-08-20T14:31:30.000Z","toc":true,"description":"之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。","_content":"\n> 之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。\n\n# 快捷键\n\n| Action | Mac OSX | Win/Linux |\n|:-------|:--------|:----------|\n| 注释代码(//) | Cmd + / | Ctrl + / |\n| 注释代码(/**/) | Cmd + Option + / | Ctrl + Shift + / |\n| 格式化代码 | Cmd + Option + L | Ctrl + Alt + L |\n| 清除无效包引用 | Option + Control + O | Alt + Ctrl + O |\n| 查找 | Cmd + F | Ctrl + F |\n| 查找+替换 | Cmd + R | Ctrl + R |\n| 上下移动代码 | Option + Shift + Up/Down | Alt + Shift + Up/Down |\n| 删除行 | Cmd + Delete | Ctrl + Y |\n| 扩大缩小选中范围 | Option + Up/Down | Ctrl + W/Ctrl + Shift + W |\n| 快捷生成结构体 | Cmd + Option + T | Ctrl + Alt + T |\n| 快捷覆写方法 | Cmd + O | Ctrl + O |\n| 快捷定位到行首/尾 | Cmd + Left/Right | Ctrl + Left/Right |\n| 折叠展开代码块 | Cmd + Plus,Minus | Ctrl + Plus/Minus |\n| 折叠展开全部代码块 | Cmd + Shift + Plus,Minus | Ctrl + Shift + Plus,Minus |\n| 文件方法结构 | Cmd + F12 | Ctrl + F12 |\n| 查找调用的位置 | Ctrl + Option + H | Ctrl + Alt + H |\n| 大小写转换 | Cmd + Shift + U | Ctrl + Shift + U |\n| 编译项目 | Cmd + F9 | Ctrl + F9 |\n| 运行项目 | Ctrl + R | Ctrl + R |\n| 代码提示 | Option + Space | Alt + Space |\n\n(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)\n","source":"_posts/2015-08-20-android-studio-keymap.md","raw":"---\ntitle: Android Studio常用快捷键\ndate:   2015-08-20 22:31:30\ncategory: [技术]\ntags: [Android Studio, Android]\ntoc: true\ndescription: 之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。\n---\n\n> 之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。\n\n# 快捷键\n\n| Action | Mac OSX | Win/Linux |\n|:-------|:--------|:----------|\n| 注释代码(//) | Cmd + / | Ctrl + / |\n| 注释代码(/**/) | Cmd + Option + / | Ctrl + Shift + / |\n| 格式化代码 | Cmd + Option + L | Ctrl + Alt + L |\n| 清除无效包引用 | Option + Control + O | Alt + Ctrl + O |\n| 查找 | Cmd + F | Ctrl + F |\n| 查找+替换 | Cmd + R | Ctrl + R |\n| 上下移动代码 | Option + Shift + Up/Down | Alt + Shift + Up/Down |\n| 删除行 | Cmd + Delete | Ctrl + Y |\n| 扩大缩小选中范围 | Option + Up/Down | Ctrl + W/Ctrl + Shift + W |\n| 快捷生成结构体 | Cmd + Option + T | Ctrl + Alt + T |\n| 快捷覆写方法 | Cmd + O | Ctrl + O |\n| 快捷定位到行首/尾 | Cmd + Left/Right | Ctrl + Left/Right |\n| 折叠展开代码块 | Cmd + Plus,Minus | Ctrl + Plus/Minus |\n| 折叠展开全部代码块 | Cmd + Shift + Plus,Minus | Ctrl + Shift + Plus,Minus |\n| 文件方法结构 | Cmd + F12 | Ctrl + F12 |\n| 查找调用的位置 | Ctrl + Option + H | Ctrl + Alt + H |\n| 大小写转换 | Cmd + Shift + U | Ctrl + Shift + U |\n| 编译项目 | Cmd + F9 | Ctrl + F9 |\n| 运行项目 | Ctrl + R | Ctrl + R |\n| 代码提示 | Option + Space | Alt + Space |\n\n(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)\n","slug":"android-studio-keymap","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zv10005gy6e1gdaxcno","content":"<blockquote>\n<p>之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。</p>\n</blockquote>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Action</th>\n<th style=\"text-align:left\">Mac OSX</th>\n<th style=\"text-align:left\">Win/Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">注释代码(//)</td>\n<td style=\"text-align:left\">Cmd + /</td>\n<td style=\"text-align:left\">Ctrl + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释代码(/**/)</td>\n<td style=\"text-align:left\">Cmd + Option + /</td>\n<td style=\"text-align:left\">Ctrl + Shift + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">格式化代码</td>\n<td style=\"text-align:left\">Cmd + Option + L</td>\n<td style=\"text-align:left\">Ctrl + Alt + L</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">清除无效包引用</td>\n<td style=\"text-align:left\">Option + Control + O</td>\n<td style=\"text-align:left\">Alt + Ctrl + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\">Cmd + F</td>\n<td style=\"text-align:left\">Ctrl + F</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找+替换</td>\n<td style=\"text-align:left\">Cmd + R</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">上下移动代码</td>\n<td style=\"text-align:left\">Option + Shift + Up/Down</td>\n<td style=\"text-align:left\">Alt + Shift + Up/Down</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除行</td>\n<td style=\"text-align:left\">Cmd + Delete</td>\n<td style=\"text-align:left\">Ctrl + Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">扩大缩小选中范围</td>\n<td style=\"text-align:left\">Option + Up/Down</td>\n<td style=\"text-align:left\">Ctrl + W/Ctrl + Shift + W</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷生成结构体</td>\n<td style=\"text-align:left\">Cmd + Option + T</td>\n<td style=\"text-align:left\">Ctrl + Alt + T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷覆写方法</td>\n<td style=\"text-align:left\">Cmd + O</td>\n<td style=\"text-align:left\">Ctrl + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷定位到行首/尾</td>\n<td style=\"text-align:left\">Cmd + Left/Right</td>\n<td style=\"text-align:left\">Ctrl + Left/Right</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠展开代码块</td>\n<td style=\"text-align:left\">Cmd + Plus,Minus</td>\n<td style=\"text-align:left\">Ctrl + Plus/Minus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠展开全部代码块</td>\n<td style=\"text-align:left\">Cmd + Shift + Plus,Minus</td>\n<td style=\"text-align:left\">Ctrl + Shift + Plus,Minus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文件方法结构</td>\n<td style=\"text-align:left\">Cmd + F12</td>\n<td style=\"text-align:left\">Ctrl + F12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找调用的位置</td>\n<td style=\"text-align:left\">Ctrl + Option + H</td>\n<td style=\"text-align:left\">Ctrl + Alt + H</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大小写转换</td>\n<td style=\"text-align:left\">Cmd + Shift + U</td>\n<td style=\"text-align:left\">Ctrl + Shift + U</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">编译项目</td>\n<td style=\"text-align:left\">Cmd + F9</td>\n<td style=\"text-align:left\">Ctrl + F9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">运行项目</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">代码提示</td>\n<td style=\"text-align:left\">Option + Space</td>\n<td style=\"text-align:left\">Alt + Space</td>\n</tr>\n</tbody>\n</table>\n<p>(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)</p>\n","excerpt":"","more":"<blockquote>\n<p>之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。</p>\n</blockquote>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Action</th>\n<th style=\"text-align:left\">Mac OSX</th>\n<th style=\"text-align:left\">Win/Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">注释代码(//)</td>\n<td style=\"text-align:left\">Cmd + /</td>\n<td style=\"text-align:left\">Ctrl + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释代码(/**/)</td>\n<td style=\"text-align:left\">Cmd + Option + /</td>\n<td style=\"text-align:left\">Ctrl + Shift + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">格式化代码</td>\n<td style=\"text-align:left\">Cmd + Option + L</td>\n<td style=\"text-align:left\">Ctrl + Alt + L</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">清除无效包引用</td>\n<td style=\"text-align:left\">Option + Control + O</td>\n<td style=\"text-align:left\">Alt + Ctrl + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\">Cmd + F</td>\n<td style=\"text-align:left\">Ctrl + F</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找+替换</td>\n<td style=\"text-align:left\">Cmd + R</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">上下移动代码</td>\n<td style=\"text-align:left\">Option + Shift + Up/Down</td>\n<td style=\"text-align:left\">Alt + Shift + Up/Down</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除行</td>\n<td style=\"text-align:left\">Cmd + Delete</td>\n<td style=\"text-align:left\">Ctrl + Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">扩大缩小选中范围</td>\n<td style=\"text-align:left\">Option + Up/Down</td>\n<td style=\"text-align:left\">Ctrl + W/Ctrl + Shift + W</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷生成结构体</td>\n<td style=\"text-align:left\">Cmd + Option + T</td>\n<td style=\"text-align:left\">Ctrl + Alt + T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷覆写方法</td>\n<td style=\"text-align:left\">Cmd + O</td>\n<td style=\"text-align:left\">Ctrl + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷定位到行首/尾</td>\n<td style=\"text-align:left\">Cmd + Left/Right</td>\n<td style=\"text-align:left\">Ctrl + Left/Right</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠展开代码块</td>\n<td style=\"text-align:left\">Cmd + Plus,Minus</td>\n<td style=\"text-align:left\">Ctrl + Plus/Minus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠展开全部代码块</td>\n<td style=\"text-align:left\">Cmd + Shift + Plus,Minus</td>\n<td style=\"text-align:left\">Ctrl + Shift + Plus,Minus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文件方法结构</td>\n<td style=\"text-align:left\">Cmd + F12</td>\n<td style=\"text-align:left\">Ctrl + F12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找调用的位置</td>\n<td style=\"text-align:left\">Ctrl + Option + H</td>\n<td style=\"text-align:left\">Ctrl + Alt + H</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大小写转换</td>\n<td style=\"text-align:left\">Cmd + Shift + U</td>\n<td style=\"text-align:left\">Ctrl + Shift + U</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">编译项目</td>\n<td style=\"text-align:left\">Cmd + F9</td>\n<td style=\"text-align:left\">Ctrl + F9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">运行项目</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">代码提示</td>\n<td style=\"text-align:left\">Option + Space</td>\n<td style=\"text-align:left\">Alt + Space</td>\n</tr>\n</tbody>\n</table>\n<p>(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)</p>\n"},{"title":"Android Design Support Library","date":"2015-08-22T03:24:30.000Z","toc":true,"description":"Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。","_content":"> Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。\n\n# 使用\n\n要使用非常简单，在Gradle中添加如下语句即可\n\n```groovy\ncompile 'com.android.support:design:23.0.0'\n```\n\n# 组件\n\n## Snackbar\n\nSnackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。*其使用方式与Toast基本相同*。\n\n```java\nSnackbar.make(view, \"Snackbar comes out\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View v) {\n                                Toast.makeText(\n                                        MainActivity.this,\n                                        \"Toast comes out\",\n                                        Toast.LENGTH_SHORT).show();\n                            }\n                        }).show();\n```\n\n此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。\n\n显示效果：\n\n![Snackbar](http://7xl94a.com1.z0.glb.clouddn.com/123123.png)\n\n官网API：[Snackbar API][snackbar api]\n\n## TextInputLayout\n\n通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。\n\n使用方法：\n\n```xml\n<android.support.design.widget.TextInputLayout\n        android:id=\"@+id/til_pwd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n</android.support.design.widget.TextInputLayout>\n```\n\n在代码中监听：\n\n```java\nTextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);\nEditText editText = textInputLayout.getEditText();\ntextInputLayout.setHint(\"Password\");\n\neditText.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n        if (s.length() > 4) {\n            textInputLayout.setError(\"Password error\");\n            textInputLayout.setErrorEnabled(true);\n        } else {\n            textInputLayout.setErrorEnabled(false);\n        }\n    }\n\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n```\n\n**注意**：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：\n\n```xml\n<item name=\"colorAccent\">#1743b7</item>\n```\n\n显示效果：\n\n![textinputlayout1](http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png)\n\n![textinputlayout2](http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png)\n\n官网API：[TextInputLayout API][textinputlayout api]\n\n## Floating Action Button\n\nFloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：\n\n![floatingactionbutton](http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png)\n\nFloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。\n\n```xml\n<android.support.design.widget.FloatingActionButton\n        android:id=\"@+id/fab\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"@dimen/fab_margin\"\n        android:src=\"@drawable/ic_done\"/>\n```\n\n通过指定`layout_gravity`就可以指定它的位置。 \n\n同样，你可以通过指定`anchor`，即显示位置的锚点：\n\n```xml\n<android.support.design.widget.FloatingActionButton\n        android:layout_height=\"wrap_content\"\n        android:layout_width=\"wrap_content\"\n        app:layout_anchor=\"@id/app_bar\"\n        app:layout_anchorGravity=\"bottom|right|end\"\n        android:src=\"@android:drawable/ic_done\"\n        android:layout_margin=\"15dp\"\n        android:clickable=\"true\"/>\n```\n\n除了一般大小的悬浮操作按钮，它还支持 mini size（`fabSize=\"mini\"`）。FloatingActionButton 继承自 ImageView，你可以使用`android:src`或者 ImageView 的任意方法，比如`setImageDrawable()`来设置 FloatingActionButton 里面的图标。\n\n官网API：[Floating Action Button][floatingactionbutton api]\n\n## TabLayout\n\nTabLayout既实现了**固定的选项卡** - view的宽度平均分配，也实现了**可滚动的选项卡** - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：\n\n```java\nTabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);\ntabLayout.addTab(tabLayout.newTab().setText(\"tab1\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"tab2\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"tab3\"));\n```\n\n通常 TabLayout 都会和 ViewPager 配合起来使用：\n\n```java\nmViewPager = (ViewPager) findViewById(R.id.viewpager);\n// 设置 ViewPager 的数据等\nsetupViewPager();\nTabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);\ntabLayout.setupWithViewPager(mViewPager);\n```\n\n显示效果：\n\n![tablayout](http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png)\n\n官网API：[TabLayout API][tablayout api]\n\n## NavigationView\n\nNavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：\n\n```xml\n<android.support.v4.widget.DrawerLayout\n    android:id=\"@+id/dl_main_drawer\"\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\">\n\n    <!-- 你的内容布局-->\n    <include layout=\"@layout/navigation_content\"/>\n\n    <android.support.design.widget.NavigationView\n        android:id=\"@+id/nv_main_navigation\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:headerLayout=\"@layout/navigation_header\"\n        app:menu=\"@menu/drawer_view\"/>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n其中最重要的就是这两个属性：`app:headerLayout`和`app:menu`\n\n通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：\n\n![navigationview](http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png)\n\n其中最上面的布局就是`app:headerLayout`所指定的头布局：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"200dp\"\n              android:background=\"?attr/colorPrimaryDark\"\n              android:gravity=\"center\"\n              android:orientation=\"vertical\"\n              android:padding=\"16dp\"\n              android:theme=\"@style/ThemeOverlay.AppCompat.Dark\">\n\n    <ImageView\n        android:layout_width=\"100dp\"\n        android:layout_height=\"100dp\"\n        android:layout_marginTop=\"16dp\"\n        android:background=\"@drawable/ic_user\"/>\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:gravity=\"center\"\n        android:text=\"XuYisheng\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\n        android:textSize=\"20sp\"/>\n\n</LinearLayout>\n```\n\n而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/nav_home\"\n            android:icon=\"@drawable/ic_dashboard\"\n            android:title=\"CC Talk\"/>\n        <item\n            android:id=\"@+id/nav_messages\"\n            android:icon=\"@drawable/ic_event\"\n            android:title=\"HJ Class\"/>\n        <item\n            android:id=\"@+id/nav_friends\"\n            android:icon=\"@drawable/ic_headset\"\n            android:title=\"Words\"/>\n        <item\n            android:id=\"@+id/nav_discussion\"\n            android:icon=\"@drawable/ic_forum\"\n            android:title=\"Big HJ\"/>\n    </group>\n\n    <item android:title=\"Version\">\n        <menu>\n            <item\n                android:icon=\"@drawable/ic_dashboard\"\n                android:title=\"Android\"/>\n            <item\n                android:icon=\"@drawable/ic_dashboard\"\n                android:title=\"iOS\"/>\n        </menu>\n    </item>\n\n</menu>\n```\n\n你可以通过设置一个`OnNavigationItemSelectedListener`，使用其`setNavigationItemSelectedListener()`来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：\n\n```java\nprivate void setupDrawerContent(NavigationView navigationView) {\n    navigationView.setNavigationItemSelectedListener(\n        new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(MenuItem menuItem) {\n                menuItem.setChecked(true);\n                mDrawerLayout.closeDrawers();\n                return true;\n            }\n        }\n    });\n}\n```\n\n官网API：[NavigationView API][navigationview api]\n\n## AppBarLayout\n\nAppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。\n\n![appbarlayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png)\n\n这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。\n\n```xml\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n        <android.support.design.widget.TabLayout\n            android:id=\"@+id/tabs\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n    </android.support.design.widget.AppBarLayout>\n```\n\n官网API：[AppBarLayout API][appbarlayout api]\n\n## CoordinatorLayout\n\nCoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。\n\n### Floating View\n\nMaterial Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：\n\n```xml\nandroid:layout_gravity=\"end|bottom\"\n```\n\n来指定显示的位置。同时，它还提供了`layout_anchor`来供你设置显示坐标的锚点：\n\n```xml\napp:layout_anchor=\"@id/appbar\"\n```\n\n### 创建滚动\n\nCoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。\n\n> 一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给`Snackbar.make()`，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。\n\n官方的例子很好的说明了这一点：\n\n```xml\n<android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n     <! -- Your Scrollable View -->\n    <android.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" />\n\n    <android.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <android.support.v7.widget.Toolbar\n                  ...\n                  app:layout_scrollFlags=\"scroll|enterAlways\">\n\n            <android.support.design.widget.TabLayout\n                  ...\n                  app:layout_scrollFlags=\"scroll|enterAlways\">\n     </android.support.design.widget.AppBarLayout>\n</android.support.design.widget.CoordinatorLayout>\n```\n\n其中，一个可以滚动的组件，例如 RecyclerView、ListView（**注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的**）。如果：\n\n1. 给这个可滚动组件设置了`layout_behavior`\n2. 给另一个控件设置了`layout_scrollFlags`\n\n那么，当设置了`layout_behavior`的控件滑动时，就会触发设置了`layout_scrollFlags`的控件发生状态的改变。 \n\n![coordinatorlayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif)\n\n设置的`layout_scrollFlags`有如下几种选项：\n\n* scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。\n* enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。\n* enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。\n* exitUntilCollapsed: 向上滚动时收缩 View。\n\n需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。\n\n例如我们前面例子中的，也就是这种模式：\n\n```xml\napp:layout_scrollFlags=\"scroll|enterAlways\"\n```\n\n> PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。\n\n官网API：[CoordinatorLayout][coordinatorlayout]\n\n## CollapsingToolbarLayout\n\nCollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。\n\n这里先看一个例子：\n\n```xml\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/detail_backdrop_height\"\n        android:fitsSystemWindows=\"true\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.design.widget.CollapsingToolbarLayout\n            android:id=\"@+id/collapsing_toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:fitsSystemWindows=\"true\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:expandedTitleMarginEnd=\"64dp\"\n            app:expandedTitleMarginStart=\"48dp\"\n            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n\n            <ImageView\n                android:id=\"@+id/backdrop\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:fitsSystemWindows=\"true\"\n                android:scaleType=\"centerCrop\"\n                android:src=\"@drawable/ic_banner\"\n                app:layout_collapseMode=\"parallax\"/>\n\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                app:layout_collapseMode=\"pin\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n        </android.support.design.widget.CollapsingToolbarLayout>\n\n    </android.support.design.widget.AppBarLayout>\n```\n\n我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的`layout_collapseMode`。\n\n这里使用了 CollapsingToolbarLayout 的`app:layout_collapseMode=\"pin\"`来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用`setTitle()`，而不是在 Toolbar 上。\n\n除了固定住 view，你还可以使用`app:layout_collapseMode=\"parallax\"`（以及使用`app:layout_collapseParallaxMultiplier=\"0.7\"`来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的`app:contentScrim=\"?attr/colorPrimary\"`属性一起配合更完美。\n\n在这个例子中，我们同样设置了：\n\n```xml\napp:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n```\n\n来接收一个：\n\n```xml\napp:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n```\n\n这样才能产生滚动效果，而通过`layout_collapseMode`，我们就设置了滚动时内容的变化效果。\n\n![CollapsingToolbarLayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif)\n\n### CoordinatorLayout与自定义view\n\n有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以`Coordinator.Behavior`的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过`onDependentViewChanged()`接收回调。\n\n可以使用`CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)`注解或者在布局中使用`app:layout_behavior=\"com.example.app.你的View$Behavior\"`属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。\n\n官方API：[CollapsingToolbarLayout][collapsingtoolbarlayout]\n\n# 总结\n\n研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。\n\n# 参考\n\nThanks to [《Android Design Support Library使用详解》][article]\n\n\n[snackbar api]: http://developer.android.com/reference/android/support/design/widget/Snackbar.html\n[textinputlayout api]: http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html\n[floatingactionbutton api]: http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html\n[tablayout api]: http://developer.android.com/reference/android/support/design/widget/TabLayout.html\n[navigationview api]: http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html\n[appbarlayout api]: http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html\n[coordinatorlayout]: http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html\n[collapsingtoolbarlayout]: http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html\n[article]: http://blog.csdn.net/eclipsexys/article/details/46349721\n","source":"_posts/2015-08-22-android-design-support-library.md","raw":"---\ntitle: Android Design Support Library\ndate: 2015-08-22 11:24:30\ncategory: [技术]\ntags: [Android]\ntoc: true\ndescription: Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。\n---\n> Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。\n\n# 使用\n\n要使用非常简单，在Gradle中添加如下语句即可\n\n```groovy\ncompile 'com.android.support:design:23.0.0'\n```\n\n# 组件\n\n## Snackbar\n\nSnackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。*其使用方式与Toast基本相同*。\n\n```java\nSnackbar.make(view, \"Snackbar comes out\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View v) {\n                                Toast.makeText(\n                                        MainActivity.this,\n                                        \"Toast comes out\",\n                                        Toast.LENGTH_SHORT).show();\n                            }\n                        }).show();\n```\n\n此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。\n\n显示效果：\n\n![Snackbar](http://7xl94a.com1.z0.glb.clouddn.com/123123.png)\n\n官网API：[Snackbar API][snackbar api]\n\n## TextInputLayout\n\n通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。\n\n使用方法：\n\n```xml\n<android.support.design.widget.TextInputLayout\n        android:id=\"@+id/til_pwd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n</android.support.design.widget.TextInputLayout>\n```\n\n在代码中监听：\n\n```java\nTextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);\nEditText editText = textInputLayout.getEditText();\ntextInputLayout.setHint(\"Password\");\n\neditText.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n        if (s.length() > 4) {\n            textInputLayout.setError(\"Password error\");\n            textInputLayout.setErrorEnabled(true);\n        } else {\n            textInputLayout.setErrorEnabled(false);\n        }\n    }\n\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n```\n\n**注意**：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：\n\n```xml\n<item name=\"colorAccent\">#1743b7</item>\n```\n\n显示效果：\n\n![textinputlayout1](http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png)\n\n![textinputlayout2](http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png)\n\n官网API：[TextInputLayout API][textinputlayout api]\n\n## Floating Action Button\n\nFloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：\n\n![floatingactionbutton](http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png)\n\nFloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。\n\n```xml\n<android.support.design.widget.FloatingActionButton\n        android:id=\"@+id/fab\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"@dimen/fab_margin\"\n        android:src=\"@drawable/ic_done\"/>\n```\n\n通过指定`layout_gravity`就可以指定它的位置。 \n\n同样，你可以通过指定`anchor`，即显示位置的锚点：\n\n```xml\n<android.support.design.widget.FloatingActionButton\n        android:layout_height=\"wrap_content\"\n        android:layout_width=\"wrap_content\"\n        app:layout_anchor=\"@id/app_bar\"\n        app:layout_anchorGravity=\"bottom|right|end\"\n        android:src=\"@android:drawable/ic_done\"\n        android:layout_margin=\"15dp\"\n        android:clickable=\"true\"/>\n```\n\n除了一般大小的悬浮操作按钮，它还支持 mini size（`fabSize=\"mini\"`）。FloatingActionButton 继承自 ImageView，你可以使用`android:src`或者 ImageView 的任意方法，比如`setImageDrawable()`来设置 FloatingActionButton 里面的图标。\n\n官网API：[Floating Action Button][floatingactionbutton api]\n\n## TabLayout\n\nTabLayout既实现了**固定的选项卡** - view的宽度平均分配，也实现了**可滚动的选项卡** - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：\n\n```java\nTabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);\ntabLayout.addTab(tabLayout.newTab().setText(\"tab1\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"tab2\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"tab3\"));\n```\n\n通常 TabLayout 都会和 ViewPager 配合起来使用：\n\n```java\nmViewPager = (ViewPager) findViewById(R.id.viewpager);\n// 设置 ViewPager 的数据等\nsetupViewPager();\nTabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);\ntabLayout.setupWithViewPager(mViewPager);\n```\n\n显示效果：\n\n![tablayout](http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png)\n\n官网API：[TabLayout API][tablayout api]\n\n## NavigationView\n\nNavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：\n\n```xml\n<android.support.v4.widget.DrawerLayout\n    android:id=\"@+id/dl_main_drawer\"\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\">\n\n    <!-- 你的内容布局-->\n    <include layout=\"@layout/navigation_content\"/>\n\n    <android.support.design.widget.NavigationView\n        android:id=\"@+id/nv_main_navigation\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:headerLayout=\"@layout/navigation_header\"\n        app:menu=\"@menu/drawer_view\"/>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n其中最重要的就是这两个属性：`app:headerLayout`和`app:menu`\n\n通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：\n\n![navigationview](http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png)\n\n其中最上面的布局就是`app:headerLayout`所指定的头布局：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"200dp\"\n              android:background=\"?attr/colorPrimaryDark\"\n              android:gravity=\"center\"\n              android:orientation=\"vertical\"\n              android:padding=\"16dp\"\n              android:theme=\"@style/ThemeOverlay.AppCompat.Dark\">\n\n    <ImageView\n        android:layout_width=\"100dp\"\n        android:layout_height=\"100dp\"\n        android:layout_marginTop=\"16dp\"\n        android:background=\"@drawable/ic_user\"/>\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:gravity=\"center\"\n        android:text=\"XuYisheng\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\n        android:textSize=\"20sp\"/>\n\n</LinearLayout>\n```\n\n而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/nav_home\"\n            android:icon=\"@drawable/ic_dashboard\"\n            android:title=\"CC Talk\"/>\n        <item\n            android:id=\"@+id/nav_messages\"\n            android:icon=\"@drawable/ic_event\"\n            android:title=\"HJ Class\"/>\n        <item\n            android:id=\"@+id/nav_friends\"\n            android:icon=\"@drawable/ic_headset\"\n            android:title=\"Words\"/>\n        <item\n            android:id=\"@+id/nav_discussion\"\n            android:icon=\"@drawable/ic_forum\"\n            android:title=\"Big HJ\"/>\n    </group>\n\n    <item android:title=\"Version\">\n        <menu>\n            <item\n                android:icon=\"@drawable/ic_dashboard\"\n                android:title=\"Android\"/>\n            <item\n                android:icon=\"@drawable/ic_dashboard\"\n                android:title=\"iOS\"/>\n        </menu>\n    </item>\n\n</menu>\n```\n\n你可以通过设置一个`OnNavigationItemSelectedListener`，使用其`setNavigationItemSelectedListener()`来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：\n\n```java\nprivate void setupDrawerContent(NavigationView navigationView) {\n    navigationView.setNavigationItemSelectedListener(\n        new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(MenuItem menuItem) {\n                menuItem.setChecked(true);\n                mDrawerLayout.closeDrawers();\n                return true;\n            }\n        }\n    });\n}\n```\n\n官网API：[NavigationView API][navigationview api]\n\n## AppBarLayout\n\nAppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。\n\n![appbarlayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png)\n\n这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。\n\n```xml\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n        <android.support.design.widget.TabLayout\n            android:id=\"@+id/tabs\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n    </android.support.design.widget.AppBarLayout>\n```\n\n官网API：[AppBarLayout API][appbarlayout api]\n\n## CoordinatorLayout\n\nCoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。\n\n### Floating View\n\nMaterial Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：\n\n```xml\nandroid:layout_gravity=\"end|bottom\"\n```\n\n来指定显示的位置。同时，它还提供了`layout_anchor`来供你设置显示坐标的锚点：\n\n```xml\napp:layout_anchor=\"@id/appbar\"\n```\n\n### 创建滚动\n\nCoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。\n\n> 一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给`Snackbar.make()`，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。\n\n官方的例子很好的说明了这一点：\n\n```xml\n<android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n     <! -- Your Scrollable View -->\n    <android.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" />\n\n    <android.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <android.support.v7.widget.Toolbar\n                  ...\n                  app:layout_scrollFlags=\"scroll|enterAlways\">\n\n            <android.support.design.widget.TabLayout\n                  ...\n                  app:layout_scrollFlags=\"scroll|enterAlways\">\n     </android.support.design.widget.AppBarLayout>\n</android.support.design.widget.CoordinatorLayout>\n```\n\n其中，一个可以滚动的组件，例如 RecyclerView、ListView（**注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的**）。如果：\n\n1. 给这个可滚动组件设置了`layout_behavior`\n2. 给另一个控件设置了`layout_scrollFlags`\n\n那么，当设置了`layout_behavior`的控件滑动时，就会触发设置了`layout_scrollFlags`的控件发生状态的改变。 \n\n![coordinatorlayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif)\n\n设置的`layout_scrollFlags`有如下几种选项：\n\n* scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。\n* enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。\n* enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。\n* exitUntilCollapsed: 向上滚动时收缩 View。\n\n需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。\n\n例如我们前面例子中的，也就是这种模式：\n\n```xml\napp:layout_scrollFlags=\"scroll|enterAlways\"\n```\n\n> PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。\n\n官网API：[CoordinatorLayout][coordinatorlayout]\n\n## CollapsingToolbarLayout\n\nCollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。\n\n这里先看一个例子：\n\n```xml\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/detail_backdrop_height\"\n        android:fitsSystemWindows=\"true\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.design.widget.CollapsingToolbarLayout\n            android:id=\"@+id/collapsing_toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:fitsSystemWindows=\"true\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:expandedTitleMarginEnd=\"64dp\"\n            app:expandedTitleMarginStart=\"48dp\"\n            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n\n            <ImageView\n                android:id=\"@+id/backdrop\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:fitsSystemWindows=\"true\"\n                android:scaleType=\"centerCrop\"\n                android:src=\"@drawable/ic_banner\"\n                app:layout_collapseMode=\"parallax\"/>\n\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                app:layout_collapseMode=\"pin\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n        </android.support.design.widget.CollapsingToolbarLayout>\n\n    </android.support.design.widget.AppBarLayout>\n```\n\n我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的`layout_collapseMode`。\n\n这里使用了 CollapsingToolbarLayout 的`app:layout_collapseMode=\"pin\"`来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用`setTitle()`，而不是在 Toolbar 上。\n\n除了固定住 view，你还可以使用`app:layout_collapseMode=\"parallax\"`（以及使用`app:layout_collapseParallaxMultiplier=\"0.7\"`来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的`app:contentScrim=\"?attr/colorPrimary\"`属性一起配合更完美。\n\n在这个例子中，我们同样设置了：\n\n```xml\napp:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n```\n\n来接收一个：\n\n```xml\napp:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n```\n\n这样才能产生滚动效果，而通过`layout_collapseMode`，我们就设置了滚动时内容的变化效果。\n\n![CollapsingToolbarLayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif)\n\n### CoordinatorLayout与自定义view\n\n有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以`Coordinator.Behavior`的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过`onDependentViewChanged()`接收回调。\n\n可以使用`CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)`注解或者在布局中使用`app:layout_behavior=\"com.example.app.你的View$Behavior\"`属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。\n\n官方API：[CollapsingToolbarLayout][collapsingtoolbarlayout]\n\n# 总结\n\n研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。\n\n# 参考\n\nThanks to [《Android Design Support Library使用详解》][article]\n\n\n[snackbar api]: http://developer.android.com/reference/android/support/design/widget/Snackbar.html\n[textinputlayout api]: http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html\n[floatingactionbutton api]: http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html\n[tablayout api]: http://developer.android.com/reference/android/support/design/widget/TabLayout.html\n[navigationview api]: http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html\n[appbarlayout api]: http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html\n[coordinatorlayout]: http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html\n[collapsingtoolbarlayout]: http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html\n[article]: http://blog.csdn.net/eclipsexys/article/details/46349721\n","slug":"android-design-support-library","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zv50006gy6epdpzh4sk","content":"<blockquote>\n<p>Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。</p>\n</blockquote>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>要使用非常简单，在Gradle中添加如下语句即可</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:design:23.0.0'</span></div></pre></td></tr></table></figure>\n<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><h2 id=\"Snackbar\"><a href=\"#Snackbar\" class=\"headerlink\" title=\"Snackbar\"></a>Snackbar</h2><p>Snackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。<em>其使用方式与Toast基本相同</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Snackbar.make(view, <span class=\"string\">\"Snackbar comes out\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">                        .setAction(<span class=\"string\">\"Action\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                                Toast.makeText(</div><div class=\"line\">                                        MainActivity.<span class=\"keyword\">this</span>,</div><div class=\"line\">                                        <span class=\"string\">\"Toast comes out\"</span>,</div><div class=\"line\">                                        Toast.LENGTH_SHORT).show();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;).show();</div></pre></td></tr></table></figure>\n<p>此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。</p>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/123123.png\" alt=\"Snackbar\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/Snackbar.html\" target=\"_blank\" rel=\"external\">Snackbar API</a></p>\n<h2 id=\"TextInputLayout\"><a href=\"#TextInputLayout\" class=\"headerlink\" title=\"TextInputLayout\"></a>TextInputLayout</h2><p>通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。</p>\n<p>使用方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/til_pwd\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在代码中监听：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">TextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);</div><div class=\"line\">EditText editText = textInputLayout.getEditText();</div><div class=\"line\">textInputLayout.setHint(<span class=\"string\">\"Password\"</span>);</div><div class=\"line\"></div><div class=\"line\">editText.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            textInputLayout.setError(<span class=\"string\">\"Password error\"</span>);</div><div class=\"line\">            textInputLayout.setErrorEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            textInputLayout.setErrorEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>#1743b7<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png\" alt=\"textinputlayout1\"></p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png\" alt=\"textinputlayout2\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html\" target=\"_blank\" rel=\"external\">TextInputLayout API</a></p>\n<h2 id=\"Floating-Action-Button\"><a href=\"#Floating-Action-Button\" class=\"headerlink\" title=\"Floating Action Button\"></a>Floating Action Button</h2><p>FloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png\" alt=\"floatingactionbutton\"></p>\n<p>FloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"end|bottom\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"@dimen/fab_margin\"</span></div><div class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_done\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>通过指定<code>layout_gravity</code>就可以指定它的位置。 </p>\n<p>同样，你可以通过指定<code>anchor</code>，即显示位置的锚点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_anchor</span>=<span class=\"string\">\"@id/app_bar\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_anchorGravity</span>=<span class=\"string\">\"bottom|right|end\"</span></div><div class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@android:drawable/ic_done\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"15dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>除了一般大小的悬浮操作按钮，它还支持 mini size（<code>fabSize=&quot;mini&quot;</code>）。FloatingActionButton 继承自 ImageView，你可以使用<code>android:src</code>或者 ImageView 的任意方法，比如<code>setImageDrawable()</code>来设置 FloatingActionButton 里面的图标。</p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html\" target=\"_blank\" rel=\"external\">Floating Action Button</a></p>\n<h2 id=\"TabLayout\"><a href=\"#TabLayout\" class=\"headerlink\" title=\"TabLayout\"></a>TabLayout</h2><p>TabLayout既实现了<strong>固定的选项卡</strong> - view的宽度平均分配，也实现了<strong>可滚动的选项卡</strong> - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab1\"</span>));</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab2\"</span>));</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab3\"</span>));</div></pre></td></tr></table></figure>\n<p>通常 TabLayout 都会和 ViewPager 配合起来使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mViewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\"><span class=\"comment\">// 设置 ViewPager 的数据等</span></div><div class=\"line\">setupViewPager();</div><div class=\"line\">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">tabLayout.setupWithViewPager(mViewPager);</div></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png\" alt=\"tablayout\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/TabLayout.html\" target=\"_blank\" rel=\"external\">TabLayout API</a></p>\n<h2 id=\"NavigationView\"><a href=\"#NavigationView\" class=\"headerlink\" title=\"NavigationView\"></a>NavigationView</h2><p>NavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dl_main_drawer\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 你的内容布局--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/navigation_content\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nv_main_navigation\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></div><div class=\"line\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/navigation_header\"</span></div><div class=\"line\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/drawer_view\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>其中最重要的就是这两个属性：<code>app:headerLayout</code>和<code>app:menu</code></p>\n<p>通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png\" alt=\"navigationview\"></p>\n<p>其中最上面的布局就是<code>app:headerLayout</code>所指定的头布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></div><div class=\"line\">              <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimaryDark\"</span></div><div class=\"line\">              <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">              <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">              <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/ic_user\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"XuYisheng\"</span></div><div class=\"line\">        <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"@style/TextAppearance.AppCompat.Body1\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20sp\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_home\"</span></div><div class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"CC Talk\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_messages\"</span></div><div class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_event\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"HJ Class\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_friends\"</span></div><div class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_headset\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Words\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_discussion\"</span></div><div class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_forum\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Big HJ\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:title</span>=<span class=\"string\">\"Version\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">menu</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">item</span></span></div><div class=\"line\">                <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></div><div class=\"line\">                <span class=\"attr\">android:title</span>=<span class=\"string\">\"Android\"</span>/&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">item</span></span></div><div class=\"line\">                <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></div><div class=\"line\">                <span class=\"attr\">android:title</span>=<span class=\"string\">\"iOS\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>你可以通过设置一个<code>OnNavigationItemSelectedListener</code>，使用其<code>setNavigationItemSelectedListener()</code>来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupDrawerContent</span><span class=\"params\">(NavigationView navigationView)</span> </span>&#123;</div><div class=\"line\">    navigationView.setNavigationItemSelectedListener(</div><div class=\"line\">        <span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(MenuItem menuItem)</span> </span>&#123;</div><div class=\"line\">                menuItem.setChecked(<span class=\"keyword\">true</span>);</div><div class=\"line\">                mDrawerLayout.closeDrawers();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>官网API：<a href=\"http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html\" target=\"_blank\" rel=\"external\">NavigationView API</a></p>\n<h2 id=\"AppBarLayout\"><a href=\"#AppBarLayout\" class=\"headerlink\" title=\"AppBarLayout\"></a>AppBarLayout</h2><p>AppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png\" alt=\"appbarlayout\"></p>\n<p>这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">        <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html\" target=\"_blank\" rel=\"external\">AppBarLayout API</a></p>\n<h2 id=\"CoordinatorLayout\"><a href=\"#CoordinatorLayout\" class=\"headerlink\" title=\"CoordinatorLayout\"></a>CoordinatorLayout</h2><p>CoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。</p>\n<h3 id=\"Floating-View\"><a href=\"#Floating-View\" class=\"headerlink\" title=\"Floating View\"></a>Floating View</h3><p>Material Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:layout_gravity=\"end|bottom\"</div></pre></td></tr></table></figure>\n<p>来指定显示的位置。同时，它还提供了<code>layout_anchor</code>来供你设置显示坐标的锚点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_anchor=\"@id/appbar\"</div></pre></td></tr></table></figure>\n<h3 id=\"创建滚动\"><a href=\"#创建滚动\" class=\"headerlink\" title=\"创建滚动\"></a>创建滚动</h3><p>CoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。</p>\n<blockquote>\n<p>一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给<code>Snackbar.make()</code>，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。</p>\n</blockquote>\n<p>官方的例子很好的说明了这一点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span></div><div class=\"line\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">Your</span> <span class=\"attr\">Scrollable</span> <span class=\"attr\">View</span> <span class=\"attr\">--</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">                  <span class=\"attr\">...</span></div><div class=\"line\">                  <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">                  <span class=\"attr\">...</span></div><div class=\"line\">                  <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>&gt;</div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>其中，一个可以滚动的组件，例如 RecyclerView、ListView（<strong>注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的</strong>）。如果：</p>\n<ol>\n<li>给这个可滚动组件设置了<code>layout_behavior</code></li>\n<li>给另一个控件设置了<code>layout_scrollFlags</code></li>\n</ol>\n<p>那么，当设置了<code>layout_behavior</code>的控件滑动时，就会触发设置了<code>layout_scrollFlags</code>的控件发生状态的改变。 </p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif\" alt=\"coordinatorlayout\"></p>\n<p>设置的<code>layout_scrollFlags</code>有如下几种选项：</p>\n<ul>\n<li>scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。</li>\n<li>enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。</li>\n<li>enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</li>\n<li>exitUntilCollapsed: 向上滚动时收缩 View。</li>\n</ul>\n<p>需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。</p>\n<p>例如我们前面例子中的，也就是这种模式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_scrollFlags=\"scroll|enterAlways\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。</p>\n</blockquote>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html\" target=\"_blank\" rel=\"external\">CoordinatorLayout</a></p>\n<h2 id=\"CollapsingToolbarLayout\"><a href=\"#CollapsingToolbarLayout\" class=\"headerlink\" title=\"CollapsingToolbarLayout\"></a>CollapsingToolbarLayout</h2><p>CollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。</p>\n<p>这里先看一个例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/detail_backdrop_height\"</span></div><div class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsing_toolbar\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">        <span class=\"attr\">app:expandedTitleMarginEnd</span>=<span class=\"string\">\"64dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:expandedTitleMarginStart</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|exitUntilCollapsed\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/backdrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_banner\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span></div><div class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的<code>layout_collapseMode</code>。</p>\n<p>这里使用了 CollapsingToolbarLayout 的<code>app:layout_collapseMode=&quot;pin&quot;</code>来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用<code>setTitle()</code>，而不是在 Toolbar 上。</p>\n<p>除了固定住 view，你还可以使用<code>app:layout_collapseMode=&quot;parallax&quot;</code>（以及使用<code>app:layout_collapseParallaxMultiplier=&quot;0.7&quot;</code>来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的<code>app:contentScrim=&quot;?attr/colorPrimary&quot;</code>属性一起配合更完美。</p>\n<p>在这个例子中，我们同样设置了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"&gt;</div></pre></td></tr></table></figure>\n<p>来接收一个：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt;</div></pre></td></tr></table></figure>\n<p>这样才能产生滚动效果，而通过<code>layout_collapseMode</code>，我们就设置了滚动时内容的变化效果。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif\" alt=\"CollapsingToolbarLayout\"></p>\n<h3 id=\"CoordinatorLayout与自定义view\"><a href=\"#CoordinatorLayout与自定义view\" class=\"headerlink\" title=\"CoordinatorLayout与自定义view\"></a>CoordinatorLayout与自定义view</h3><p>有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以<code>Coordinator.Behavior</code>的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过<code>onDependentViewChanged()</code>接收回调。</p>\n<p>可以使用<code>CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)</code>注解或者在布局中使用<code>app:layout_behavior=&quot;com.example.app.你的View$Behavior&quot;</code>属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。</p>\n<p>官方API：<a href=\"http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html\" target=\"_blank\" rel=\"external\">CollapsingToolbarLayout</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>Thanks to <a href=\"http://blog.csdn.net/eclipsexys/article/details/46349721\" target=\"_blank\" rel=\"external\">《Android Design Support Library使用详解》</a></p>\n","excerpt":"","more":"<blockquote>\n<p>Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。</p>\n</blockquote>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>要使用非常简单，在Gradle中添加如下语句即可</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:design:23.0.0'</span></div></pre></td></tr></table></figure>\n<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><h2 id=\"Snackbar\"><a href=\"#Snackbar\" class=\"headerlink\" title=\"Snackbar\"></a>Snackbar</h2><p>Snackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。<em>其使用方式与Toast基本相同</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Snackbar.make(view, <span class=\"string\">\"Snackbar comes out\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">                        .setAction(<span class=\"string\">\"Action\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                                Toast.makeText(</div><div class=\"line\">                                        MainActivity.<span class=\"keyword\">this</span>,</div><div class=\"line\">                                        <span class=\"string\">\"Toast comes out\"</span>,</div><div class=\"line\">                                        Toast.LENGTH_SHORT).show();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;).show();</div></pre></td></tr></table></figure>\n<p>此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。</p>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/123123.png\" alt=\"Snackbar\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/Snackbar.html\">Snackbar API</a></p>\n<h2 id=\"TextInputLayout\"><a href=\"#TextInputLayout\" class=\"headerlink\" title=\"TextInputLayout\"></a>TextInputLayout</h2><p>通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。</p>\n<p>使用方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/til_pwd\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在代码中监听：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">TextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);</div><div class=\"line\">EditText editText = textInputLayout.getEditText();</div><div class=\"line\">textInputLayout.setHint(<span class=\"string\">\"Password\"</span>);</div><div class=\"line\"></div><div class=\"line\">editText.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            textInputLayout.setError(<span class=\"string\">\"Password error\"</span>);</div><div class=\"line\">            textInputLayout.setErrorEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            textInputLayout.setErrorEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>#1743b7<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png\" alt=\"textinputlayout1\"></p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png\" alt=\"textinputlayout2\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html\">TextInputLayout API</a></p>\n<h2 id=\"Floating-Action-Button\"><a href=\"#Floating-Action-Button\" class=\"headerlink\" title=\"Floating Action Button\"></a>Floating Action Button</h2><p>FloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png\" alt=\"floatingactionbutton\"></p>\n<p>FloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"end|bottom\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"@dimen/fab_margin\"</span></div><div class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_done\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>通过指定<code>layout_gravity</code>就可以指定它的位置。 </p>\n<p>同样，你可以通过指定<code>anchor</code>，即显示位置的锚点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_anchor</span>=<span class=\"string\">\"@id/app_bar\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_anchorGravity</span>=<span class=\"string\">\"bottom|right|end\"</span></div><div class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@android:drawable/ic_done\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"15dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>除了一般大小的悬浮操作按钮，它还支持 mini size（<code>fabSize=&quot;mini&quot;</code>）。FloatingActionButton 继承自 ImageView，你可以使用<code>android:src</code>或者 ImageView 的任意方法，比如<code>setImageDrawable()</code>来设置 FloatingActionButton 里面的图标。</p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html\">Floating Action Button</a></p>\n<h2 id=\"TabLayout\"><a href=\"#TabLayout\" class=\"headerlink\" title=\"TabLayout\"></a>TabLayout</h2><p>TabLayout既实现了<strong>固定的选项卡</strong> - view的宽度平均分配，也实现了<strong>可滚动的选项卡</strong> - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab1\"</span>));</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab2\"</span>));</div><div class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab3\"</span>));</div></pre></td></tr></table></figure>\n<p>通常 TabLayout 都会和 ViewPager 配合起来使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mViewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\"><span class=\"comment\">// 设置 ViewPager 的数据等</span></div><div class=\"line\">setupViewPager();</div><div class=\"line\">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">tabLayout.setupWithViewPager(mViewPager);</div></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png\" alt=\"tablayout\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/TabLayout.html\">TabLayout API</a></p>\n<h2 id=\"NavigationView\"><a href=\"#NavigationView\" class=\"headerlink\" title=\"NavigationView\"></a>NavigationView</h2><p>NavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dl_main_drawer\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 你的内容布局--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/navigation_content\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nv_main_navigation\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></div><div class=\"line\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/navigation_header\"</span></div><div class=\"line\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/drawer_view\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>其中最重要的就是这两个属性：<code>app:headerLayout</code>和<code>app:menu</code></p>\n<p>通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png\" alt=\"navigationview\"></p>\n<p>其中最上面的布局就是<code>app:headerLayout</code>所指定的头布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></div><div class=\"line\">              <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimaryDark\"</span></div><div class=\"line\">              <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">              <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">              <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/ic_user\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"XuYisheng\"</span></div><div class=\"line\">        <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"@style/TextAppearance.AppCompat.Body1\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20sp\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_home\"</span></div><div class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"CC Talk\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_messages\"</span></div><div class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_event\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"HJ Class\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_friends\"</span></div><div class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_headset\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Words\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_discussion\"</span></div><div class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_forum\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Big HJ\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:title</span>=<span class=\"string\">\"Version\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">menu</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">item</span></div><div class=\"line\">                <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></div><div class=\"line\">                <span class=\"attr\">android:title</span>=<span class=\"string\">\"Android\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">item</span></div><div class=\"line\">                <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></div><div class=\"line\">                <span class=\"attr\">android:title</span>=<span class=\"string\">\"iOS\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>你可以通过设置一个<code>OnNavigationItemSelectedListener</code>，使用其<code>setNavigationItemSelectedListener()</code>来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupDrawerContent</span><span class=\"params\">(NavigationView navigationView)</span> </span>&#123;</div><div class=\"line\">    navigationView.setNavigationItemSelectedListener(</div><div class=\"line\">        <span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(MenuItem menuItem)</span> </span>&#123;</div><div class=\"line\">                menuItem.setChecked(<span class=\"keyword\">true</span>);</div><div class=\"line\">                mDrawerLayout.closeDrawers();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>官网API：<a href=\"http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html\">NavigationView API</a></p>\n<h2 id=\"AppBarLayout\"><a href=\"#AppBarLayout\" class=\"headerlink\" title=\"AppBarLayout\"></a>AppBarLayout</h2><p>AppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png\" alt=\"appbarlayout\"></p>\n<p>这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">        <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html\">AppBarLayout API</a></p>\n<h2 id=\"CoordinatorLayout\"><a href=\"#CoordinatorLayout\" class=\"headerlink\" title=\"CoordinatorLayout\"></a>CoordinatorLayout</h2><p>CoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。</p>\n<h3 id=\"Floating-View\"><a href=\"#Floating-View\" class=\"headerlink\" title=\"Floating View\"></a>Floating View</h3><p>Material Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:layout_gravity=\"end|bottom\"</div></pre></td></tr></table></figure>\n<p>来指定显示的位置。同时，它还提供了<code>layout_anchor</code>来供你设置显示坐标的锚点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_anchor=\"@id/appbar\"</div></pre></td></tr></table></figure>\n<h3 id=\"创建滚动\"><a href=\"#创建滚动\" class=\"headerlink\" title=\"创建滚动\"></a>创建滚动</h3><p>CoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。</p>\n<blockquote>\n<p>一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给<code>Snackbar.make()</code>，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。</p>\n</blockquote>\n<p>官方的例子很好的说明了这一点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></div><div class=\"line\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">Your</span> <span class=\"attr\">Scrollable</span> <span class=\"attr\">View</span> <span class=\"attr\">--</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">                  <span class=\"attr\">...</span></div><div class=\"line\">                  <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></div><div class=\"line\">                  <span class=\"attr\">...</span></div><div class=\"line\">                  <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>其中，一个可以滚动的组件，例如 RecyclerView、ListView（<strong>注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的</strong>）。如果：</p>\n<ol>\n<li>给这个可滚动组件设置了<code>layout_behavior</code></li>\n<li>给另一个控件设置了<code>layout_scrollFlags</code></li>\n</ol>\n<p>那么，当设置了<code>layout_behavior</code>的控件滑动时，就会触发设置了<code>layout_scrollFlags</code>的控件发生状态的改变。 </p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif\" alt=\"coordinatorlayout\"></p>\n<p>设置的<code>layout_scrollFlags</code>有如下几种选项：</p>\n<ul>\n<li>scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。</li>\n<li>enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。</li>\n<li>enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</li>\n<li>exitUntilCollapsed: 向上滚动时收缩 View。</li>\n</ul>\n<p>需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。</p>\n<p>例如我们前面例子中的，也就是这种模式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_scrollFlags=\"scroll|enterAlways\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。</p>\n</blockquote>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html\">CoordinatorLayout</a></p>\n<h2 id=\"CollapsingToolbarLayout\"><a href=\"#CollapsingToolbarLayout\" class=\"headerlink\" title=\"CollapsingToolbarLayout\"></a>CollapsingToolbarLayout</h2><p>CollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。</p>\n<p>这里先看一个例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/detail_backdrop_height\"</span></div><div class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsing_toolbar\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">        <span class=\"attr\">app:expandedTitleMarginEnd</span>=<span class=\"string\">\"64dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:expandedTitleMarginStart</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|exitUntilCollapsed\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/backdrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_banner\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span></div><div class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的<code>layout_collapseMode</code>。</p>\n<p>这里使用了 CollapsingToolbarLayout 的<code>app:layout_collapseMode=&quot;pin&quot;</code>来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用<code>setTitle()</code>，而不是在 Toolbar 上。</p>\n<p>除了固定住 view，你还可以使用<code>app:layout_collapseMode=&quot;parallax&quot;</code>（以及使用<code>app:layout_collapseParallaxMultiplier=&quot;0.7&quot;</code>来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的<code>app:contentScrim=&quot;?attr/colorPrimary&quot;</code>属性一起配合更完美。</p>\n<p>在这个例子中，我们同样设置了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"&gt;</div></pre></td></tr></table></figure>\n<p>来接收一个：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt;</div></pre></td></tr></table></figure>\n<p>这样才能产生滚动效果，而通过<code>layout_collapseMode</code>，我们就设置了滚动时内容的变化效果。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif\" alt=\"CollapsingToolbarLayout\"></p>\n<h3 id=\"CoordinatorLayout与自定义view\"><a href=\"#CoordinatorLayout与自定义view\" class=\"headerlink\" title=\"CoordinatorLayout与自定义view\"></a>CoordinatorLayout与自定义view</h3><p>有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以<code>Coordinator.Behavior</code>的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过<code>onDependentViewChanged()</code>接收回调。</p>\n<p>可以使用<code>CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)</code>注解或者在布局中使用<code>app:layout_behavior=&quot;com.example.app.你的View$Behavior&quot;</code>属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。</p>\n<p>官方API：<a href=\"http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html\">CollapsingToolbarLayout</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>Thanks to <a href=\"http://blog.csdn.net/eclipsexys/article/details/46349721\">《Android Design Support Library使用详解》</a></p>\n"},{"title":"Java中的模板方法模式","date":"2015-08-25T05:50:30.000Z","toc":true,"description":"准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。","_content":"> 准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。\n\n# 结构\n\n模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做**基本方法**(primitive method)；而将这些基本方法汇总起来的方法叫做**模板方法**(template method)，这个设计模式的名字就是从此而来。\n\n模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：\n\n![](http://7xl94a.com1.z0.glb.clouddn.com/123123123.png)\n\n这里涉及到两个角色：\n\n**抽象模板(Abstract Template)角色：**\n\n* 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。\n* 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。\n\n**具体模板(Concrete Template)角色：**\n\n* 实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。\n* 每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。\n\n## 示例代码\n\n抽象模板角色类，`abstractMethod()`、`doHookMethod()`等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由`templateMethod()`方法代表。\n\n```java\npublic abstract class AbstractTemplate {\n    \n    /**\n     * 模板方法\n     */\n    public void templateMethod(){\n        // 调用基本方法\n        abstractMethod();\n        doHookMethod();\n        concreteMethod();\n    }\n    \n    /**\n     * 抽象方法，子类必须实现的方法\n     */\n    protected abstract void abstractMethod();\n    \n    /**\n     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头\n     */\n    protected void doHookMethod(){}\n    \n    /**\n     * 具体方法，由父类实现，子类无法 override\n     */\n    private final void concreteMethod(){\n        // 业务相关的代码\n    }\n}\n```\n\n具体模板角色类，实现了父类所声明的基本方法，`abstractMethod()`方法所代表的就是强制子类实现的剩余逻辑，而`doHookMethod()`方法是可选择实现的逻辑，不是必须实现的。\n\n```java\npublic class ConcreteTemplate extends AbstractTemplate {\n    \n    // 基本方法的实现\n    @Override\n    public void abstractMethod() {\n        // 业务相关的代码\n    }\n    \n    // 重写父类的方法\n    @Override\n    public void hookMethod() {\n        // 业务相关的代码\n    }\n}\n```\n\n**模板方法模式的关键**：*子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑*。\n \n每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照**责任**的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。\n\n# 在Servlet中的应用\n\n使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个`service()`方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的**模板方法模式**。下面是`service()`方法的源代码：\n\n```java\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n \n        String method = req.getMethod();\n \n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n \n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n \n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n \n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);       \n \n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n \n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n \n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n \n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n \n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n \n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n```\n\n当然，这个`service()`方法也可以被子类置换掉。\n \n下面给出一个简单的 Servlet 例子：\n \nTestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：`doGet()`和`doPost()`：\n\n```java\n    public class TestServlet extends HttpServlet {\n     \n        public void doGet(HttpServletRequest request, HttpServletResponse response)\n                throws ServletException, IOException {\n     \n            System.out.println(\"using the GET method\");\n \n        }\n     \n        public void doPost(HttpServletRequest request, HttpServletResponse response)\n                throws ServletException, IOException {\n     \n            System.out.println(\"using the POST method\");\n        }\n     \n    }\n```\n\n从上面的例子可以看出这是一个典型的模板方法模式。\n \nHttpServlet 担任抽象模板角色\n \n* **模板方法**：由`service()`方法担任。\n* **基本方法**：由`doPost()`、`doGet()`等方法担任。\n \nTestServlet 担任具体模板角色\n \n* TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是`doGet()`和`doPost()`。\n","source":"_posts/2015-08-25-template-method-pattern-in-java.md","raw":"---\ntitle: Java中的模板方法模式\ndate: 2015-08-25 13:50:30\ncategory: [技术]\ntags: [Java, 设计模式]\ntoc: true\ndescription: 准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。\n---\n> 准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。\n\n# 结构\n\n模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做**基本方法**(primitive method)；而将这些基本方法汇总起来的方法叫做**模板方法**(template method)，这个设计模式的名字就是从此而来。\n\n模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：\n\n![](http://7xl94a.com1.z0.glb.clouddn.com/123123123.png)\n\n这里涉及到两个角色：\n\n**抽象模板(Abstract Template)角色：**\n\n* 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。\n* 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。\n\n**具体模板(Concrete Template)角色：**\n\n* 实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。\n* 每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。\n\n## 示例代码\n\n抽象模板角色类，`abstractMethod()`、`doHookMethod()`等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由`templateMethod()`方法代表。\n\n```java\npublic abstract class AbstractTemplate {\n    \n    /**\n     * 模板方法\n     */\n    public void templateMethod(){\n        // 调用基本方法\n        abstractMethod();\n        doHookMethod();\n        concreteMethod();\n    }\n    \n    /**\n     * 抽象方法，子类必须实现的方法\n     */\n    protected abstract void abstractMethod();\n    \n    /**\n     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头\n     */\n    protected void doHookMethod(){}\n    \n    /**\n     * 具体方法，由父类实现，子类无法 override\n     */\n    private final void concreteMethod(){\n        // 业务相关的代码\n    }\n}\n```\n\n具体模板角色类，实现了父类所声明的基本方法，`abstractMethod()`方法所代表的就是强制子类实现的剩余逻辑，而`doHookMethod()`方法是可选择实现的逻辑，不是必须实现的。\n\n```java\npublic class ConcreteTemplate extends AbstractTemplate {\n    \n    // 基本方法的实现\n    @Override\n    public void abstractMethod() {\n        // 业务相关的代码\n    }\n    \n    // 重写父类的方法\n    @Override\n    public void hookMethod() {\n        // 业务相关的代码\n    }\n}\n```\n\n**模板方法模式的关键**：*子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑*。\n \n每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照**责任**的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。\n\n# 在Servlet中的应用\n\n使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个`service()`方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的**模板方法模式**。下面是`service()`方法的源代码：\n\n```java\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n \n        String method = req.getMethod();\n \n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n \n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n \n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n \n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);       \n \n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n \n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n \n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n \n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n \n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n \n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n```\n\n当然，这个`service()`方法也可以被子类置换掉。\n \n下面给出一个简单的 Servlet 例子：\n \nTestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：`doGet()`和`doPost()`：\n\n```java\n    public class TestServlet extends HttpServlet {\n     \n        public void doGet(HttpServletRequest request, HttpServletResponse response)\n                throws ServletException, IOException {\n     \n            System.out.println(\"using the GET method\");\n \n        }\n     \n        public void doPost(HttpServletRequest request, HttpServletResponse response)\n                throws ServletException, IOException {\n     \n            System.out.println(\"using the POST method\");\n        }\n     \n    }\n```\n\n从上面的例子可以看出这是一个典型的模板方法模式。\n \nHttpServlet 担任抽象模板角色\n \n* **模板方法**：由`service()`方法担任。\n* **基本方法**：由`doPost()`、`doGet()`等方法担任。\n \nTestServlet 担任具体模板角色\n \n* TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是`doGet()`和`doPost()`。\n","slug":"template-method-pattern-in-java","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zv80008gy6ec751qfxb","content":"<blockquote>\n<p>准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。</p>\n</blockquote>\n<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做<strong>基本方法</strong>(primitive method)；而将这些基本方法汇总起来的方法叫做<strong>模板方法</strong>(template method)，这个设计模式的名字就是从此而来。</p>\n<p>模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/123123123.png\" alt=\"\"></p>\n<p>这里涉及到两个角色：</p>\n<p><strong>抽象模板(Abstract Template)角色：</strong></p>\n<ul>\n<li>定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。</li>\n<li>定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</li>\n</ul>\n<p><strong>具体模板(Concrete Template)角色：</strong></p>\n<ul>\n<li>实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。</li>\n<li>每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>抽象模板角色类，<code>abstractMethod()</code>、<code>doHookMethod()</code>等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由<code>templateMethod()</code>方法代表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 模板方法</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 调用基本方法</span></div><div class=\"line\">        abstractMethod();</div><div class=\"line\">        doHookMethod();</div><div class=\"line\">        concreteMethod();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 抽象方法，子类必须实现的方法</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doHookMethod</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 具体方法，由父类实现，子类无法 override</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">concreteMethod</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体模板角色类，实现了父类所声明的基本方法，<code>abstractMethod()</code>方法所代表的就是强制子类实现的剩余逻辑，而<code>doHookMethod()</code>方法是可选择实现的逻辑，不是必须实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 基本方法的实现</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 重写父类的方法</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hookMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>模板方法模式的关键</strong>：<em>子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑</em>。</p>\n<p>每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照<strong>责任</strong>的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。</p>\n<h1 id=\"在Servlet中的应用\"><a href=\"#在Servlet中的应用\" class=\"headerlink\" title=\"在Servlet中的应用\"></a>在Servlet中的应用</h1><p>使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个<code>service()</code>方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的<strong>模板方法模式</strong>。下面是<code>service()</code>方法的源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></div><div class=\"line\">    <span class=\"keyword\">throws</span> ServletException, IOException &#123;</div><div class=\"line\"> </div><div class=\"line\">    String method = req.getMethod();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// servlet doesn't support if-modified-since, no reason</span></div><div class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></div><div class=\"line\">            doGet(req, resp);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</div><div class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; (lastModified / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>)) &#123;</div><div class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></div><div class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></div><div class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></div><div class=\"line\">                maybeSetLastModified(resp, lastModified);</div><div class=\"line\">                doGet(req, resp);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</div><div class=\"line\">        maybeSetLastModified(resp, lastModified);</div><div class=\"line\">        doHead(req, resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</div><div class=\"line\">        doPost(req, resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</div><div class=\"line\">        doPut(req, resp);       </div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</div><div class=\"line\">        doDelete(req, resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</div><div class=\"line\">        doOptions(req,resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</div><div class=\"line\">        doTrace(req,resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">        <span class=\"comment\">// Note that this means NO servlet supports whatever</span></div><div class=\"line\">        <span class=\"comment\">// method was requested, anywhere on this server.</span></div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\"> </div><div class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</div><div class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</div><div class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</div><div class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</div><div class=\"line\"> </div><div class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然，这个<code>service()</code>方法也可以被子类置换掉。</p>\n<p>下面给出一个简单的 Servlet 例子：</p>\n<p>TestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：<code>doGet()</code>和<code>doPost()</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException &#123;</div><div class=\"line\"> </div><div class=\"line\">        System.out.println(<span class=\"string\">\"using the GET method\"</span>);</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException &#123;</div><div class=\"line\"> </div><div class=\"line\">        System.out.println(<span class=\"string\">\"using the POST method\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的例子可以看出这是一个典型的模板方法模式。</p>\n<p>HttpServlet 担任抽象模板角色</p>\n<ul>\n<li><strong>模板方法</strong>：由<code>service()</code>方法担任。</li>\n<li><strong>基本方法</strong>：由<code>doPost()</code>、<code>doGet()</code>等方法担任。</li>\n</ul>\n<p>TestServlet 担任具体模板角色</p>\n<ul>\n<li>TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是<code>doGet()</code>和<code>doPost()</code>。</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。</p>\n</blockquote>\n<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做<strong>基本方法</strong>(primitive method)；而将这些基本方法汇总起来的方法叫做<strong>模板方法</strong>(template method)，这个设计模式的名字就是从此而来。</p>\n<p>模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/123123123.png\" alt=\"\"></p>\n<p>这里涉及到两个角色：</p>\n<p><strong>抽象模板(Abstract Template)角色：</strong></p>\n<ul>\n<li>定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。</li>\n<li>定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</li>\n</ul>\n<p><strong>具体模板(Concrete Template)角色：</strong></p>\n<ul>\n<li>实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。</li>\n<li>每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>抽象模板角色类，<code>abstractMethod()</code>、<code>doHookMethod()</code>等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由<code>templateMethod()</code>方法代表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 模板方法</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 调用基本方法</span></div><div class=\"line\">        abstractMethod();</div><div class=\"line\">        doHookMethod();</div><div class=\"line\">        concreteMethod();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 抽象方法，子类必须实现的方法</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doHookMethod</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 具体方法，由父类实现，子类无法 override</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">concreteMethod</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体模板角色类，实现了父类所声明的基本方法，<code>abstractMethod()</code>方法所代表的就是强制子类实现的剩余逻辑，而<code>doHookMethod()</code>方法是可选择实现的逻辑，不是必须实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 基本方法的实现</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 重写父类的方法</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hookMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>模板方法模式的关键</strong>：<em>子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑</em>。</p>\n<p>每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照<strong>责任</strong>的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。</p>\n<h1 id=\"在Servlet中的应用\"><a href=\"#在Servlet中的应用\" class=\"headerlink\" title=\"在Servlet中的应用\"></a>在Servlet中的应用</h1><p>使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个<code>service()</code>方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的<strong>模板方法模式</strong>。下面是<code>service()</code>方法的源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></div><div class=\"line\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    String method = req.getMethod();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// servlet doesn't support if-modified-since, no reason</span></div><div class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></div><div class=\"line\">            doGet(req, resp);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</div><div class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; (lastModified / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>)) &#123;</div><div class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></div><div class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></div><div class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></div><div class=\"line\">                maybeSetLastModified(resp, lastModified);</div><div class=\"line\">                doGet(req, resp);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</div><div class=\"line\">        maybeSetLastModified(resp, lastModified);</div><div class=\"line\">        doHead(req, resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</div><div class=\"line\">        doPost(req, resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</div><div class=\"line\">        doPut(req, resp);       </div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</div><div class=\"line\">        doDelete(req, resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</div><div class=\"line\">        doOptions(req,resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</div><div class=\"line\">        doTrace(req,resp);</div><div class=\"line\"> </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">        <span class=\"comment\">// Note that this means NO servlet supports whatever</span></div><div class=\"line\">        <span class=\"comment\">// method was requested, anywhere on this server.</span></div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\"> </div><div class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</div><div class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</div><div class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</div><div class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</div><div class=\"line\"> </div><div class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然，这个<code>service()</code>方法也可以被子类置换掉。</p>\n<p>下面给出一个简单的 Servlet 例子：</p>\n<p>TestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：<code>doGet()</code>和<code>doPost()</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        System.out.println(<span class=\"string\">\"using the GET method\"</span>);</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        System.out.println(<span class=\"string\">\"using the POST method\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的例子可以看出这是一个典型的模板方法模式。</p>\n<p>HttpServlet 担任抽象模板角色</p>\n<ul>\n<li><strong>模板方法</strong>：由<code>service()</code>方法担任。</li>\n<li><strong>基本方法</strong>：由<code>doPost()</code>、<code>doGet()</code>等方法担任。</li>\n</ul>\n<p>TestServlet 担任具体模板角色</p>\n<ul>\n<li>TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是<code>doGet()</code>和<code>doPost()</code>。</li>\n</ul>\n"},{"title":"Android网络通信框架Volley","date":"2015-08-27T15:37:30.000Z","toc":true,"description":"之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。","_content":"之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。\n\n# Why\n\n之前从网络下载图片可能要这样：\n\n1. 在`ListAdapter#getView()`里开始图像的读取\n2. 通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源\n3. 在`AsyncTask#onPostExecute()`里设置相应 ImageView 的属性\n\n再有，屏幕旋转的时候，有时候*会导致再次从网络取得数据*。为了防止不必要的网络访问，可能我们要自己实现 cache。\n\n还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。\n\n**这些问题使用 Volley 都可以很简单地解决**。\n\nVolley 提供了如下的便捷功能：\n\n* JSON，图像的异步下载\n* 网络请求序列\n* 网络请求优先级处理\n* 缓存\n* 多级别取消请求\n* 和 Activity 生命周期的联动\n\n**人生苦短，快用 Volley！**\n\n# How\n\n## 集成\n\n三种集成方法，其中后两种都是非官方渠道：\n\n* 编译源码导入项目\n    1. 从 Git 库 clone 最新版 \n\t\t```bash\n\t\tgit clone https://android.googlesource.com/platform/frameworks/volley\n\t\t```\n    2. 编译为 jar 包\n    3. 导入项目\n\n* Gradle构建（非官方渠道，推荐）\n    ```groovy\ncompile 'com.mcxiaoke.volley:library:1.0.18'\n    ```\n\n* Maven构建（非官方渠道）\n    ```xml\n<dependency>\n    <groupId>com.mcxiaoke.volley</groupId>\n    <artifactId>library</artifactId>\n    <version>{latest-version}</version>\n</dependency>\n    ```\n\n## 使用\n\n具体使用流程如下：\n\n1. 在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象\n2. 创建一个 Request 对象（子类实现）\n3. 添加到序列\n4. 开始序列\n\n在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：\n\n* ClearCacheRequest\n* ImageRequest\n* JSONRequest\n* StringRequest\n\n下面我们就对这几个子类进行介绍以及给出示例\n\n### ClearCacheRequest\n\n虚构的请求，用于清空已有的缓存文件。\n\nClearCacheRequest的优先级很高，为`Priority.IMMEDIATE`，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法`mCache.clear()`写在了`isCanceled()`方法体中，能最早的得到执行。\n\n### ImageRequest\n\n待完成\n\n### JSONRequest\n\nJSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。\n\nJsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。\n\n### StringRequest\n\nStringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：\n\n```java\npublic class StringRequestActivity extends AppCompatActivity {\n\n    /**\n     * Volley 请求队列对象\n     */\n    private RequestQueue mRequestQueue;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_string_request);\n        \n        // 构造请求队列\n        mRequestQueue = Volley.newRequestQueue(context);\n        \n        StringRequest request = new StringRequest(\"http://www.baidu.com\",\n            new Response.Listener<String>() {\n                @Override\n                public void onResponse(String response) {\n                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);\n                }\n            },\n             new Response.ErrorListener() {\n                @Override\n                public void onErrorResponse(VolleyError error) {\n                    Log.i(\"net error\", error.getLocalizedMessage());\n                }\n            });\n        mRequestQueue.add(request);\n    }\n    \n    @Override\n    protected void onStop() {\n        super.onStop();\n        // 退出时取消所有网络请求\n        mRequestQueue.cancelAll(this);\n    }\n}\n```\n\n### 自定义Request\n\n一个简单的使用 Pull 解析的 XMLRequest\n\n```java\npublic class XMLRequest extends Request<XmlPullParser> {  \n\n    private final Listener<XmlPullParser> mListener;\n\n    public XMLRequest(int method, String url, Listener<XmlPullParser> listener,\n            ErrorListener errorListener) {  \n        super(method, url, errorListener);  \n        mListener = listener;  \n    }  \n  \n    public XMLRequest(String url, Listener<XmlPullParser> listener, ErrorListener errorListener) {  \n        this(Method.GET, url, listener, errorListener);  \n    }  \n  \n    @Override  \n    protected Response<XmlPullParser> parseNetworkResponse(NetworkResponse response) {  \n        try {  \n            String xmlString = new String(response.data,  \n                    HttpHeaderParser.parseCharset(response.headers));  \n            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();\n            XmlPullParser xmlPullParser = factory.newPullParser();\n            xmlPullParser.setInput(new StringReader(xmlString));\n            return Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));\n        } catch (UnsupportedEncodingException e) {\n            return Response.error(new ParseError(e));  \n        } catch (XmlPullParserException e) {\n            return Response.error(new ParseError(e));  \n        }\n    }\n  \n    @Override\n    protected void deliverResponse(XmlPullParser response) {  \n        mListener.onResponse(response);\n    }\n  \n}  \n```\n\n在`parseNetworkResponse()`方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在`deliverResponse()`方法中则是将XmlPullParser对象进行回调。\n\n## 与生命周期的联动\n\n当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。\n\n所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。\n\n* 可以针对某些个 request 做取消操作\n    ```java\n@Override\npublic void onStop() {\n    for (Request <?> req : mRequestQueue) {\n        req.cancel();\n    }\n}\n    ```\n* 取消这个队列里的所有请求\n    ```java\n@Override\nprotected void onStop() {\n    super.onStop();\n    mRequestQueue.cancelAll(this);\n}  \n    ```\n* 可以根据 RequestFilter 或者 Tag 来终止某些请求\n    ```java\n@Override  \nprotected void onStop() {\n    super.onStop();\n\n    // 根据 RequestFilter\n    mRequestQueue.cancelAll(new RequestFilter() {});\n    // 根据 Tag\n    mRequestQueue.cancelAll(new Object());\n}\n    ```\n","source":"_posts/2015-08-26-volley.md","raw":"---\ntitle: Android网络通信框架Volley\ndate: 2015-08-27 23:37:30\ncategory: [技术]\ntags: [Android, Volley]\ntoc: true\ndescription: 之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。\n---\n之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。\n\n# Why\n\n之前从网络下载图片可能要这样：\n\n1. 在`ListAdapter#getView()`里开始图像的读取\n2. 通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源\n3. 在`AsyncTask#onPostExecute()`里设置相应 ImageView 的属性\n\n再有，屏幕旋转的时候，有时候*会导致再次从网络取得数据*。为了防止不必要的网络访问，可能我们要自己实现 cache。\n\n还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。\n\n**这些问题使用 Volley 都可以很简单地解决**。\n\nVolley 提供了如下的便捷功能：\n\n* JSON，图像的异步下载\n* 网络请求序列\n* 网络请求优先级处理\n* 缓存\n* 多级别取消请求\n* 和 Activity 生命周期的联动\n\n**人生苦短，快用 Volley！**\n\n# How\n\n## 集成\n\n三种集成方法，其中后两种都是非官方渠道：\n\n* 编译源码导入项目\n    1. 从 Git 库 clone 最新版 \n\t\t```bash\n\t\tgit clone https://android.googlesource.com/platform/frameworks/volley\n\t\t```\n    2. 编译为 jar 包\n    3. 导入项目\n\n* Gradle构建（非官方渠道，推荐）\n    ```groovy\ncompile 'com.mcxiaoke.volley:library:1.0.18'\n    ```\n\n* Maven构建（非官方渠道）\n    ```xml\n<dependency>\n    <groupId>com.mcxiaoke.volley</groupId>\n    <artifactId>library</artifactId>\n    <version>{latest-version}</version>\n</dependency>\n    ```\n\n## 使用\n\n具体使用流程如下：\n\n1. 在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象\n2. 创建一个 Request 对象（子类实现）\n3. 添加到序列\n4. 开始序列\n\n在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：\n\n* ClearCacheRequest\n* ImageRequest\n* JSONRequest\n* StringRequest\n\n下面我们就对这几个子类进行介绍以及给出示例\n\n### ClearCacheRequest\n\n虚构的请求，用于清空已有的缓存文件。\n\nClearCacheRequest的优先级很高，为`Priority.IMMEDIATE`，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法`mCache.clear()`写在了`isCanceled()`方法体中，能最早的得到执行。\n\n### ImageRequest\n\n待完成\n\n### JSONRequest\n\nJSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。\n\nJsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。\n\n### StringRequest\n\nStringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：\n\n```java\npublic class StringRequestActivity extends AppCompatActivity {\n\n    /**\n     * Volley 请求队列对象\n     */\n    private RequestQueue mRequestQueue;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_string_request);\n        \n        // 构造请求队列\n        mRequestQueue = Volley.newRequestQueue(context);\n        \n        StringRequest request = new StringRequest(\"http://www.baidu.com\",\n            new Response.Listener<String>() {\n                @Override\n                public void onResponse(String response) {\n                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);\n                }\n            },\n             new Response.ErrorListener() {\n                @Override\n                public void onErrorResponse(VolleyError error) {\n                    Log.i(\"net error\", error.getLocalizedMessage());\n                }\n            });\n        mRequestQueue.add(request);\n    }\n    \n    @Override\n    protected void onStop() {\n        super.onStop();\n        // 退出时取消所有网络请求\n        mRequestQueue.cancelAll(this);\n    }\n}\n```\n\n### 自定义Request\n\n一个简单的使用 Pull 解析的 XMLRequest\n\n```java\npublic class XMLRequest extends Request<XmlPullParser> {  \n\n    private final Listener<XmlPullParser> mListener;\n\n    public XMLRequest(int method, String url, Listener<XmlPullParser> listener,\n            ErrorListener errorListener) {  \n        super(method, url, errorListener);  \n        mListener = listener;  \n    }  \n  \n    public XMLRequest(String url, Listener<XmlPullParser> listener, ErrorListener errorListener) {  \n        this(Method.GET, url, listener, errorListener);  \n    }  \n  \n    @Override  \n    protected Response<XmlPullParser> parseNetworkResponse(NetworkResponse response) {  \n        try {  \n            String xmlString = new String(response.data,  \n                    HttpHeaderParser.parseCharset(response.headers));  \n            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();\n            XmlPullParser xmlPullParser = factory.newPullParser();\n            xmlPullParser.setInput(new StringReader(xmlString));\n            return Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));\n        } catch (UnsupportedEncodingException e) {\n            return Response.error(new ParseError(e));  \n        } catch (XmlPullParserException e) {\n            return Response.error(new ParseError(e));  \n        }\n    }\n  \n    @Override\n    protected void deliverResponse(XmlPullParser response) {  \n        mListener.onResponse(response);\n    }\n  \n}  \n```\n\n在`parseNetworkResponse()`方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在`deliverResponse()`方法中则是将XmlPullParser对象进行回调。\n\n## 与生命周期的联动\n\n当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。\n\n所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。\n\n* 可以针对某些个 request 做取消操作\n    ```java\n@Override\npublic void onStop() {\n    for (Request <?> req : mRequestQueue) {\n        req.cancel();\n    }\n}\n    ```\n* 取消这个队列里的所有请求\n    ```java\n@Override\nprotected void onStop() {\n    super.onStop();\n    mRequestQueue.cancelAll(this);\n}  \n    ```\n* 可以根据 RequestFilter 或者 Tag 来终止某些请求\n    ```java\n@Override  \nprotected void onStop() {\n    super.onStop();\n\n    // 根据 RequestFilter\n    mRequestQueue.cancelAll(new RequestFilter() {});\n    // 根据 Tag\n    mRequestQueue.cancelAll(new Object());\n}\n    ```\n","slug":"volley","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zva000agy6esqlwrx2a","content":"<p>之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。</p>\n<h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h1><p>之前从网络下载图片可能要这样：</p>\n<ol>\n<li>在<code>ListAdapter#getView()</code>里开始图像的读取</li>\n<li>通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源</li>\n<li>在<code>AsyncTask#onPostExecute()</code>里设置相应 ImageView 的属性</li>\n</ol>\n<p>再有，屏幕旋转的时候，有时候<em>会导致再次从网络取得数据</em>。为了防止不必要的网络访问，可能我们要自己实现 cache。</p>\n<p>还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。</p>\n<p><strong>这些问题使用 Volley 都可以很简单地解决</strong>。</p>\n<p>Volley 提供了如下的便捷功能：</p>\n<ul>\n<li>JSON，图像的异步下载</li>\n<li>网络请求序列</li>\n<li>网络请求优先级处理</li>\n<li>缓存</li>\n<li>多级别取消请求</li>\n<li>和 Activity 生命周期的联动</li>\n</ul>\n<p><strong>人生苦短，快用 Volley！</strong></p>\n<h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><h2 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h2><p>三种集成方法，其中后两种都是非官方渠道：</p>\n<ul>\n<li><p>编译源码导入项目</p>\n<ol>\n<li><p>从 Git 库 clone 最新版 </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://android.googlesource.com/platform/frameworks/volley</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译为 jar 包</p>\n</li>\n<li>导入项目</li>\n</ol>\n</li>\n<li><p>Gradle构建（非官方渠道，推荐）</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.mcxiaoke.volley:library:1.0.18'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Maven构建（非官方渠道）</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mcxiaoke.volley<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>library<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>&#123;latest-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>具体使用流程如下：</p>\n<ol>\n<li>在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象</li>\n<li>创建一个 Request 对象（子类实现）</li>\n<li>添加到序列</li>\n<li>开始序列</li>\n</ol>\n<p>在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：</p>\n<ul>\n<li>ClearCacheRequest</li>\n<li>ImageRequest</li>\n<li>JSONRequest</li>\n<li>StringRequest</li>\n</ul>\n<p>下面我们就对这几个子类进行介绍以及给出示例</p>\n<h3 id=\"ClearCacheRequest\"><a href=\"#ClearCacheRequest\" class=\"headerlink\" title=\"ClearCacheRequest\"></a>ClearCacheRequest</h3><p>虚构的请求，用于清空已有的缓存文件。</p>\n<p>ClearCacheRequest的优先级很高，为<code>Priority.IMMEDIATE</code>，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法<code>mCache.clear()</code>写在了<code>isCanceled()</code>方法体中，能最早的得到执行。</p>\n<h3 id=\"ImageRequest\"><a href=\"#ImageRequest\" class=\"headerlink\" title=\"ImageRequest\"></a>ImageRequest</h3><p>待完成</p>\n<h3 id=\"JSONRequest\"><a href=\"#JSONRequest\" class=\"headerlink\" title=\"JSONRequest\"></a>JSONRequest</h3><p>JSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。</p>\n<p>JsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。</p>\n<h3 id=\"StringRequest\"><a href=\"#StringRequest\" class=\"headerlink\" title=\"StringRequest\"></a>StringRequest</h3><p>StringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringRequestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Volley 请求队列对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> RequestQueue mRequestQueue;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_string_request);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 构造请求队列</span></div><div class=\"line\">        mRequestQueue = Volley.newRequestQueue(context);</div><div class=\"line\">        </div><div class=\"line\">        StringRequest request = <span class=\"keyword\">new</span> StringRequest(<span class=\"string\">\"http://www.baidu.com\"</span>,</div><div class=\"line\">            <span class=\"keyword\">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\">                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">             <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</div><div class=\"line\">                    Log.i(<span class=\"string\">\"net error\"</span>, error.getLocalizedMessage());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        mRequestQueue.add(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">        <span class=\"comment\">// 退出时取消所有网络请求</span></div><div class=\"line\">        mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"自定义Request\"><a href=\"#自定义Request\" class=\"headerlink\" title=\"自定义Request\"></a>自定义Request</h3><p>一个简单的使用 Pull 解析的 XMLRequest</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XMLRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span>&lt;<span class=\"title\">XmlPullParser</span>&gt; </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Listener&lt;XmlPullParser&gt; mListener;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XMLRequest</span><span class=\"params\">(<span class=\"keyword\">int</span> method, String url, Listener&lt;XmlPullParser&gt; listener,</span></span></div><div class=\"line\">            ErrorListener errorListener) &#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>(method, url, errorListener);  </div><div class=\"line\">        mListener = listener;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XMLRequest</span><span class=\"params\">(String url, Listener&lt;XmlPullParser&gt; listener, ErrorListener errorListener)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>(Method.GET, url, listener, errorListener);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Response&lt;XmlPullParser&gt; <span class=\"title\">parseNetworkResponse</span><span class=\"params\">(NetworkResponse response)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            String xmlString = <span class=\"keyword\">new</span> String(response.data,  </div><div class=\"line\">                    HttpHeaderParser.parseCharset(response.headers));  </div><div class=\"line\">            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</div><div class=\"line\">            XmlPullParser xmlPullParser = factory.newPullParser();</div><div class=\"line\">            xmlPullParser.setInput(<span class=\"keyword\">new</span> StringReader(xmlString));</div><div class=\"line\">            <span class=\"keyword\">return</span> Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(e));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(e));  </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverResponse</span><span class=\"params\">(XmlPullParser response)</span> </span>&#123;  </div><div class=\"line\">        mListener.onResponse(response);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>parseNetworkResponse()</code>方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在<code>deliverResponse()</code>方法中则是将XmlPullParser对象进行回调。</p>\n<h2 id=\"与生命周期的联动\"><a href=\"#与生命周期的联动\" class=\"headerlink\" title=\"与生命周期的联动\"></a>与生命周期的联动</h2><p>当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。</p>\n<p>所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。</p>\n<ul>\n<li><p>可以针对某些个 request 做取消操作</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request &lt;?&gt; req : mRequestQueue) &#123;</div><div class=\"line\">        req.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>取消这个队列里的所有请求</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以根据 RequestFilter 或者 Tag 来终止某些请求</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 根据 RequestFilter</span></div><div class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">new</span> RequestFilter() &#123;&#125;);</div><div class=\"line\">    <span class=\"comment\">// 根据 Tag</span></div><div class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">new</span> Object());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<p>之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。</p>\n<h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h1><p>之前从网络下载图片可能要这样：</p>\n<ol>\n<li>在<code>ListAdapter#getView()</code>里开始图像的读取</li>\n<li>通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源</li>\n<li>在<code>AsyncTask#onPostExecute()</code>里设置相应 ImageView 的属性</li>\n</ol>\n<p>再有，屏幕旋转的时候，有时候<em>会导致再次从网络取得数据</em>。为了防止不必要的网络访问，可能我们要自己实现 cache。</p>\n<p>还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。</p>\n<p><strong>这些问题使用 Volley 都可以很简单地解决</strong>。</p>\n<p>Volley 提供了如下的便捷功能：</p>\n<ul>\n<li>JSON，图像的异步下载</li>\n<li>网络请求序列</li>\n<li>网络请求优先级处理</li>\n<li>缓存</li>\n<li>多级别取消请求</li>\n<li>和 Activity 生命周期的联动</li>\n</ul>\n<p><strong>人生苦短，快用 Volley！</strong></p>\n<h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><h2 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h2><p>三种集成方法，其中后两种都是非官方渠道：</p>\n<ul>\n<li><p>编译源码导入项目</p>\n<ol>\n<li><p>从 Git 库 clone 最新版 </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://android.googlesource.com/platform/frameworks/volley</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译为 jar 包</p>\n</li>\n<li>导入项目</li>\n</ol>\n</li>\n<li><p>Gradle构建（非官方渠道，推荐）</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.mcxiaoke.volley:library:1.0.18'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Maven构建（非官方渠道）</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mcxiaoke.volley<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>library<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>&#123;latest-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>具体使用流程如下：</p>\n<ol>\n<li>在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象</li>\n<li>创建一个 Request 对象（子类实现）</li>\n<li>添加到序列</li>\n<li>开始序列</li>\n</ol>\n<p>在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：</p>\n<ul>\n<li>ClearCacheRequest</li>\n<li>ImageRequest</li>\n<li>JSONRequest</li>\n<li>StringRequest</li>\n</ul>\n<p>下面我们就对这几个子类进行介绍以及给出示例</p>\n<h3 id=\"ClearCacheRequest\"><a href=\"#ClearCacheRequest\" class=\"headerlink\" title=\"ClearCacheRequest\"></a>ClearCacheRequest</h3><p>虚构的请求，用于清空已有的缓存文件。</p>\n<p>ClearCacheRequest的优先级很高，为<code>Priority.IMMEDIATE</code>，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法<code>mCache.clear()</code>写在了<code>isCanceled()</code>方法体中，能最早的得到执行。</p>\n<h3 id=\"ImageRequest\"><a href=\"#ImageRequest\" class=\"headerlink\" title=\"ImageRequest\"></a>ImageRequest</h3><p>待完成</p>\n<h3 id=\"JSONRequest\"><a href=\"#JSONRequest\" class=\"headerlink\" title=\"JSONRequest\"></a>JSONRequest</h3><p>JSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。</p>\n<p>JsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。</p>\n<h3 id=\"StringRequest\"><a href=\"#StringRequest\" class=\"headerlink\" title=\"StringRequest\"></a>StringRequest</h3><p>StringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringRequestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Volley 请求队列对象</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> RequestQueue mRequestQueue;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_string_request);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 构造请求队列</span></div><div class=\"line\">        mRequestQueue = Volley.newRequestQueue(context);</div><div class=\"line\">        </div><div class=\"line\">        StringRequest request = <span class=\"keyword\">new</span> StringRequest(<span class=\"string\">\"http://www.baidu.com\"</span>,</div><div class=\"line\">            <span class=\"keyword\">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\">                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">             <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</div><div class=\"line\">                    Log.i(<span class=\"string\">\"net error\"</span>, error.getLocalizedMessage());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        mRequestQueue.add(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">        <span class=\"comment\">// 退出时取消所有网络请求</span></div><div class=\"line\">        mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"自定义Request\"><a href=\"#自定义Request\" class=\"headerlink\" title=\"自定义Request\"></a>自定义Request</h3><p>一个简单的使用 Pull 解析的 XMLRequest</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XMLRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span>&lt;<span class=\"title\">XmlPullParser</span>&gt; </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Listener&lt;XmlPullParser&gt; mListener;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XMLRequest</span><span class=\"params\">(<span class=\"keyword\">int</span> method, String url, Listener&lt;XmlPullParser&gt; listener,</div><div class=\"line\">            ErrorListener errorListener)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>(method, url, errorListener);  </div><div class=\"line\">        mListener = listener;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XMLRequest</span><span class=\"params\">(String url, Listener&lt;XmlPullParser&gt; listener, ErrorListener errorListener)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>(Method.GET, url, listener, errorListener);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Response&lt;XmlPullParser&gt; <span class=\"title\">parseNetworkResponse</span><span class=\"params\">(NetworkResponse response)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            String xmlString = <span class=\"keyword\">new</span> String(response.data,  </div><div class=\"line\">                    HttpHeaderParser.parseCharset(response.headers));  </div><div class=\"line\">            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</div><div class=\"line\">            XmlPullParser xmlPullParser = factory.newPullParser();</div><div class=\"line\">            xmlPullParser.setInput(<span class=\"keyword\">new</span> StringReader(xmlString));</div><div class=\"line\">            <span class=\"keyword\">return</span> Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(e));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(e));  </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverResponse</span><span class=\"params\">(XmlPullParser response)</span> </span>&#123;  </div><div class=\"line\">        mListener.onResponse(response);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>parseNetworkResponse()</code>方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在<code>deliverResponse()</code>方法中则是将XmlPullParser对象进行回调。</p>\n<h2 id=\"与生命周期的联动\"><a href=\"#与生命周期的联动\" class=\"headerlink\" title=\"与生命周期的联动\"></a>与生命周期的联动</h2><p>当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。</p>\n<p>所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。</p>\n<ul>\n<li><p>可以针对某些个 request 做取消操作</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request &lt;?&gt; req : mRequestQueue) &#123;</div><div class=\"line\">        req.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>取消这个队列里的所有请求</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以根据 RequestFilter 或者 Tag 来终止某些请求</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 根据 RequestFilter</span></div><div class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">new</span> RequestFilter() &#123;&#125;);</div><div class=\"line\">    <span class=\"comment\">// 根据 Tag</span></div><div class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">new</span> Object());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"打磨真正属于自己的输入法-RIME","date":"2015-09-12T04:59:57.000Z","toc":true,"description":"很久之前就发现了RIME这个输入法，但因为在windows下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了mac作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。","_content":"> 很久之前就发现了 RIME 这个输入法，但因为在 windows 下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了 mac 作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。\n\n# 简介\n\nRIME，全称是**中州韵输入法引擎**，是由**佛振**先生开发的跨平台开源输入法。\n\n它在不同平台上有不同的名字：\n\n* **Windows**：小狼毫 Weasel\n* **Mac OS X**： 鼠须管 Squirrel\n* **Linux**：ibus-rime or fcitx-rime\n\n其内置的输入方案包括\n\n* 朙月拼音\n* 朙月拼音 语句流\n* 朙月拼音 简化字模式\n* 朙月拼音 臺灣正體模式\n* 地球拼音 dì qiú pīn yīn\n* 注音\n* 注音 臺灣正體模式\n* 粵拼\n* 倉頡五代\n* 倉頡 快打模式\n* 速成\n* 五笔86\n* 五笔拼音混合輸入\n* 自然碼雙拼\n* 微軟雙拼\n* 智能ABC雙拼\n* 小鶴雙拼\n* 吳語上海話（新派）\n* 吳語上海話（老派）\n* 中古漢語三拼\n* 中古漢語全拼\n* X-SAMPA 國際音標\n* emoji表情\n\n再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案\n\n* 英文\n* 日语\n* 山人全息码\n* ……\n\n它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。\n\n![配色主题](http://7xl94a.com1.z0.glb.clouddn.com/111.jpg)\n\n# 安装\n\n前往[下载地址](http://rime.im/download/)选择对应的版本下载，Mac用户选择`鼠须管 Squirrel`即可。\n\n下载完成之后，解压zip压缩包，然后打开`Squirrel-versioncode.pkg`按步骤安装即可。\n\n# 使用\n\n1. Mac用户在输入源中添加**鼠须管**\n2. 按`⌘ + Space`切换输入法到**鼠须管**\n3. 按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入\n4. Enjoy it！\n\n# 自定义\n\n点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的**配置文件**。鼠须管的配置文件都是`yaml`格式的，我们如果想要自定义，可以新建一个`*.custom.yaml`对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。\n\n## 输入方案\n\n新建一个`default.custom.yaml`文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记**重新部署**一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。\n\n```yaml\npatch:\n  schema_list:\n    - schema: luna_pinyin          # 朙月拼音\n    - schema: luna_pinyin_fluency  # 朙月拼音 语句流\n#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式\n#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式\n    - schema: terra_pinyin         # 地球拼音 dì qiú pīn yīn\n#    - schema: bopomofo             # 注音\n#    - schema: bopomofo_tw          # 注音 臺灣正體模式\n#    - schema: jyutping             # 粵拼\n#    - schema: cangjie5             # 倉頡五代\n#    - schema: cangjie5_express     # 倉頡 快打模式\n#    - schema: quick5               # 速成\n#    - schema: wubi86               # 五笔86\n    - schema: wubi_pinyin          # 五笔拼音混合輸入\n#    - schema: double_pinyin        # 自然碼雙拼\n#    - schema: double_pinyin_mspy   # 微軟雙拼\n#    - schema: double_pinyin_abc    # 智能ABC雙拼\n#    - schema: double_pinyin_flypy  # 小鶴雙拼\n#    - schema: wugniu        # 吳語上海話（新派）\n#    - schema: wugniu_lopha  # 吳語上海話（老派）\n#    - schema: sampheng      # 中古漢語三拼\n#    - schema: zyenpheng     # 中古漢語全拼\n#    - schema: ipa_xsampa    # X-SAMPA 國際音標\n    - schema: emoji         # emoji表情\n```\n\n## 外观\n\n新建一个`squirrel.custom.yaml`文件，向其中写入如下内容，然后根据自己的需求修改。\n\n```yaml\n# 適用於【鼠鬚管】0.9.13+\n# 位置：~/Library/Rime/squirrel.custom.yaml\n# 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格\n\npatch:\n#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局\n#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）\n#  style/horizontal: true        # 候選窗横向顯示\n#  style/inline_preedit: false   # 非內嵌編碼行\n#  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱\n#  style/font_point: 21          # 字號\n#  style/corner_radius: 10       # 窗口圓角半徑\n#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果\n#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果\n#  style/color_scheme: luna      # 選擇配色方案\n\n# 註：預設的配色方案及代碼（指定爲 style/color_scheme ）\n#   碧水 - aqua\n#   青天 - azure\n#   明月 - luna\n#   墨池 - ink\n#   孤寺 - lost_temple\n#   暗堂 - dark_temple\n#   星際我爭霸 - starcraft\n#   谷歌 - google\n```\n\n## 主题\n\n如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。\n\n还是在`squirrel.custom.yaml`中，在刚刚加入的内容后面加入如下内容\n\n```yaml\n  preset_color_schemes/textflow:\n    author: \"name <name@gmail.com>\"\n    back_color: 0xFFFFFF #背景\n    border_color: 0xE0B693 #边框\n    candidate_text_color: 0x000000 #非第一候选项\n    hilited_back_color: 0xEBECED #拼音串高亮背景\n    hilited_candidate_back_color: 0xFFFFFF #第一候选项背景\n    hilited_candidate_text_color: 0xF57C75 #第一候选项\n    hilited_text_color: 0xFF6666 #拼音串高亮\n    name: Textflow\n    text_color: 0x000000 #拼音串\n```\n\n然后启用这个主题就可以了\n\n如果你想要更多的配色，可以参照[RIME吧：配色方案专帖](http://tieba.baidu.com/p/2445582839)\n\n## 生僻字乱码\n\n生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。\n\n一般的选择是「[花园明朝](http://fonts.jp/hanazono/)」，下载下来安装好之后，将 [外观](#show) 这一步中的\n\n```yaml\n  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱\n```\n\n改为\n\n```yaml\n  style/font_face: \"PingFang SC,HanaMinA\"    # 我喜歡的字體名稱\n```\n\n然后重新部署即可\n\n## 根据程序切换中英文\n\n鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。\n\n如在\n\n* 终端 **Terminal**、**iTerm2**\n* 编辑器 **sublime**、**atom**\n* 启动工具 **QuickSilver**、**Alfred**\n\n中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入\n\n如果想要设置应用中输入法的初始状态，我们首先要查看应用的`Info.plist`文件得到该应用的`Bundle Identifier`，通常是形如`com.apple.Xcode`的字符串\n\n例如，要在`Xcode`中默认英文输入，又要在`Alfred`中恢复中文输入，可如下设定：\n\n```yaml\n# example squirrel.custom.yaml\npatch:\n  app_options/com.apple.Xcode:\n    ascii_mode: true\n  app_options/com.alfredapp.Alfred: {}\n```\n\n## emoji表情以及特殊符号\n\n有时候我们会有输入`emoji`表情的需求，但仅仅只是开启了`emoji`输入方案的话，我们每次都要切换输入方案才可以输入`emoji`表情，还是很不方便的。如果可以直接在一种输入方案中加入`emoji`表情输入就更好了\n\n其实可以做到，你只需要这样\n\n```yaml\n# luna_pinyin.custom.yaml\n#\n# 在【朙月拼音】裏使用Emoji表情\n#\n# 保存到Rime用戶文件夾後，重新部署生效\n# ~/.config/ibus/rime  (linux)\n# ~/Library/Rime       (macos)\n# %APPDATA%\\Rime       (windows)\n#\n# 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分\n#\n\npatch:\n  schema/dependencies:\n    - emoji\n  reverse_lookup:\n    dictionary: emoji\n    enable_completion: false\n    prefix: \"`\"\n    tips: 〔表情〕\n```\n\n以上我们就完成了`emoji`表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧\n\n但是仅仅表情还不够，我们有时候需要输入形如`ⅺ`、`⑴`、`☁`之类的特殊符号，查看`symbols.yaml`我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？\n\n只需要在我们上面已经添加了`emoji`表情相关的配置文件末尾再加上如下配置即可\n\n```yaml\n  punctuator:\n    import_preset: symbols\n\n  recognizer:\n    import_preset: default\n    patterns:\n      reverse_lookup: \"`[a-z]*'?$\"\n      punct: \"^/([a-z]+|[0-9]0?)$\"\n```\n\n大功告成，重新部署之后使用`/lm`看看吧，更多符号输入方式请查看`symbols.yaml`\n\n## 同步\n\n做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？\n\n**当然可以！**\n\n`RIME`是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用**同步网盘**或者**U盘**来同步。\n\n推荐国内用户使用[坚果云](https://jianguoyun.com/)作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐[DropBox](https://www.dropbox.com/)\n\n### 1. 设定同步位置\n\n默认情况下，个人词库和配置都将备份到`RIME用户文件夹\\sync\\UUID`这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。\n\n直接編輯用戶文件夾下的`installation.yaml`，添加：\n\n```yaml\nsync_dir: 'D:\\Dropbox\\RimeSync'\n```\n\n又如 Mac 上添加：\n\n```yaml\nsync_dir: '/Users/fred/Dropbox/RimeSync'\n```\n\n又如使用 USB 存儲來同步：（真實案例）\n\n```yaml\nsync_dir: '/Volumes/USBDRIVE/RimeSync'\n```\n\n### 2. 同步标识\n\n默认情况下，`RIME`会为随机生成每一个`UUID`作为标识。这个`UUID`会被用来区分來自不同机器/系统的个人词库和设置。\n\n如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑`installation.yaml`中如下所示的内容即可\n\n```yaml\ninstallation_id: 'loshine-macbook'\n```\n\n**注意**：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线\n\n## 我的成品\n\n成品效果演示\n\n<video src=\"/assets/video/鼠须管演示.mov\" controls=\"controls\" width=\"600\">\nyour browser does not support the video tag\n</video>\n\n几个配置文件\n\n* squirrel.custom.yaml\n\n```yaml\n# 適用於【鼠鬚管】0.9.13+\n# 位置：~/Library/Rime/squirrel.custom.yaml\n# 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格\n\npatch:\n#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局\n  show_notifications_when: appropriate        # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）\n#  style/horizontal: true                     # 候選窗横向顯示\n#  style/inline_preedit: false                # 非內嵌編碼行\n#  style/font_face: \"PingFang SC,HanaMinA\"     # 我喜歡的字體名稱\n  style/font_point: 18                        # 字號\n  style/corner_radius: 2                      # 窗口圓角半徑\n  style/border_height: 7                      # 窗口邊界高度，大於圓角半徑才有效果\n  style/border_width: 7                       # 窗口邊界寬度，大於圓角半徑才有效果\n  style/color_scheme: luna                    # 選擇配色方案\n\n# 註：預設的配色方案及代碼（指定爲 style/color_scheme ）\n#   碧水 - aqua\n#   青天 - azure\n#   明月 - luna\n#   墨池 - ink\n#   孤寺 - lost_temple\n#   暗堂 - dark_temple\n#   星際我爭霸 - starcraft\n#   谷歌 - google\n  preset_color_schemes/textflow:\n    author: \"name <name@gmail.com>\"\n    back_color: 0xFFFFFF #背景\n    border_color: 0xE0B693 #边框\n    candidate_text_color: 0x000000 #非第一候选项\n    hilited_back_color: 0xEBECED #拼音串高亮背景\n    hilited_candidate_back_color: 0xFFFFFF #第一候选项背景\n    hilited_candidate_text_color: 0xF57C75 #第一候选项\n    hilited_text_color: 0xFF6666 #拼音串高亮\n    name: Textflow\n    text_color: 0x000000 #拼音串\n\n# Xcode\n  app_options/com.apple.Xcode:\n    ascii_mode: true\n# alfred\n  app_options/com.alfredapp.Alfred:\n    ascii_mode: true\n# Android Studio\n  app_options/com.google.android.studio:\n    ascii_mode: true\n# atom\n  app_options/com.github.atom:\n    ascii_mode: true\n```\n\n* default.custom.yaml\n\n```yaml\npatch:\n  schema_list:\n    - schema: luna_pinyin          # 朙月拼音\n    - schema: luna_pinyin_fluency  # 朙月拼音 语句流\n#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式\n#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式\n    - schema: terra_pinyin         # 地球拼音 dì qiú pīn yīn\n#    - schema: bopomofo             # 注音\n#    - schema: bopomofo_tw          # 注音 臺灣正體模式\n#    - schema: jyutping             # 粵拼\n#    - schema: cangjie5             # 倉頡五代\n#    - schema: cangjie5_express     # 倉頡 快打模式\n#    - schema: quick5               # 速成\n#    - schema: wubi86               # 五笔86\n    - schema: wubi_pinyin          # 五笔拼音混合輸入\n#    - schema: double_pinyin        # 自然碼雙拼\n#    - schema: double_pinyin_mspy   # 微軟雙拼\n#    - schema: double_pinyin_abc    # 智能ABC雙拼\n#    - schema: double_pinyin_flypy  # 小鶴雙拼\n#    - schema: wugniu        # 吳語上海話（新派）\n#    - schema: wugniu_lopha  # 吳語上海話（老派）\n#    - schema: sampheng      # 中古漢語三拼\n#    - schema: zyenpheng     # 中古漢語全拼\n#    - schema: ipa_xsampa    # X-SAMPA 國際音標\n    - schema: emoji         # emoji表情\n{% endhighlight %}\n* terra_pinyin.custom.yaml\n\n{% highlight yaml %}\n# luna_pinyin.custom.yaml\n#\n# 在【地球拼音】裏使用Emoji表情\n#\n# 保存到Rime用戶文件夾後，重新部署生效\n# ~/.config/ibus/rime  (linux)\n# ~/Library/Rime       (macos)\n# %APPDATA%\\Rime       (windows)\n#\n# 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分\n#\n\npatch:\n  schema/dependencies:\n    - emoji\n#  abc_segmentor/extra_tags:\n#    - reverse_lookup\n  reverse_lookup:\n    dictionary: emoji\n    enable_completion: false\n    prefix: \"`\"\n    tips: 〔表情〕\n\n  punctuator:\n    import_preset: symbols\n\n  recognizer:\n    import_preset: default\n    patterns:\n      reverse_lookup: \"`[a-z]*'?$\"\n      punct: \"^/([a-z]+|[0-9]0?)$\"\n```\n\n* installation.yaml\n\n```yaml\ndistribution_code_name: Squirrel\ndistribution_name: \"鼠鬚管\"\ndistribution_version: 0.9.26.1\ninstall_time: \"Mon Aug  3 15:24:12 2015\"\ninstallation_id: \"loshine-macbook\"\nrime_version: 1.2.9\nsync_dir: '/Users/Loshine/我的坚果云/RimeSync'\n```\n","source":"_posts/2015-09-12-rime.md","raw":"---\ntitle: 打磨真正属于自己的输入法-RIME\ndate: 2015-09-12 12:59:57\ncategory: [技术]\ntags: [RIME]\ntoc: true\ndescription: 很久之前就发现了RIME这个输入法，但因为在windows下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了mac作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。\n---\n> 很久之前就发现了 RIME 这个输入法，但因为在 windows 下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了 mac 作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。\n\n# 简介\n\nRIME，全称是**中州韵输入法引擎**，是由**佛振**先生开发的跨平台开源输入法。\n\n它在不同平台上有不同的名字：\n\n* **Windows**：小狼毫 Weasel\n* **Mac OS X**： 鼠须管 Squirrel\n* **Linux**：ibus-rime or fcitx-rime\n\n其内置的输入方案包括\n\n* 朙月拼音\n* 朙月拼音 语句流\n* 朙月拼音 简化字模式\n* 朙月拼音 臺灣正體模式\n* 地球拼音 dì qiú pīn yīn\n* 注音\n* 注音 臺灣正體模式\n* 粵拼\n* 倉頡五代\n* 倉頡 快打模式\n* 速成\n* 五笔86\n* 五笔拼音混合輸入\n* 自然碼雙拼\n* 微軟雙拼\n* 智能ABC雙拼\n* 小鶴雙拼\n* 吳語上海話（新派）\n* 吳語上海話（老派）\n* 中古漢語三拼\n* 中古漢語全拼\n* X-SAMPA 國際音標\n* emoji表情\n\n再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案\n\n* 英文\n* 日语\n* 山人全息码\n* ……\n\n它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。\n\n![配色主题](http://7xl94a.com1.z0.glb.clouddn.com/111.jpg)\n\n# 安装\n\n前往[下载地址](http://rime.im/download/)选择对应的版本下载，Mac用户选择`鼠须管 Squirrel`即可。\n\n下载完成之后，解压zip压缩包，然后打开`Squirrel-versioncode.pkg`按步骤安装即可。\n\n# 使用\n\n1. Mac用户在输入源中添加**鼠须管**\n2. 按`⌘ + Space`切换输入法到**鼠须管**\n3. 按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入\n4. Enjoy it！\n\n# 自定义\n\n点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的**配置文件**。鼠须管的配置文件都是`yaml`格式的，我们如果想要自定义，可以新建一个`*.custom.yaml`对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。\n\n## 输入方案\n\n新建一个`default.custom.yaml`文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记**重新部署**一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。\n\n```yaml\npatch:\n  schema_list:\n    - schema: luna_pinyin          # 朙月拼音\n    - schema: luna_pinyin_fluency  # 朙月拼音 语句流\n#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式\n#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式\n    - schema: terra_pinyin         # 地球拼音 dì qiú pīn yīn\n#    - schema: bopomofo             # 注音\n#    - schema: bopomofo_tw          # 注音 臺灣正體模式\n#    - schema: jyutping             # 粵拼\n#    - schema: cangjie5             # 倉頡五代\n#    - schema: cangjie5_express     # 倉頡 快打模式\n#    - schema: quick5               # 速成\n#    - schema: wubi86               # 五笔86\n    - schema: wubi_pinyin          # 五笔拼音混合輸入\n#    - schema: double_pinyin        # 自然碼雙拼\n#    - schema: double_pinyin_mspy   # 微軟雙拼\n#    - schema: double_pinyin_abc    # 智能ABC雙拼\n#    - schema: double_pinyin_flypy  # 小鶴雙拼\n#    - schema: wugniu        # 吳語上海話（新派）\n#    - schema: wugniu_lopha  # 吳語上海話（老派）\n#    - schema: sampheng      # 中古漢語三拼\n#    - schema: zyenpheng     # 中古漢語全拼\n#    - schema: ipa_xsampa    # X-SAMPA 國際音標\n    - schema: emoji         # emoji表情\n```\n\n## 外观\n\n新建一个`squirrel.custom.yaml`文件，向其中写入如下内容，然后根据自己的需求修改。\n\n```yaml\n# 適用於【鼠鬚管】0.9.13+\n# 位置：~/Library/Rime/squirrel.custom.yaml\n# 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格\n\npatch:\n#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局\n#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）\n#  style/horizontal: true        # 候選窗横向顯示\n#  style/inline_preedit: false   # 非內嵌編碼行\n#  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱\n#  style/font_point: 21          # 字號\n#  style/corner_radius: 10       # 窗口圓角半徑\n#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果\n#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果\n#  style/color_scheme: luna      # 選擇配色方案\n\n# 註：預設的配色方案及代碼（指定爲 style/color_scheme ）\n#   碧水 - aqua\n#   青天 - azure\n#   明月 - luna\n#   墨池 - ink\n#   孤寺 - lost_temple\n#   暗堂 - dark_temple\n#   星際我爭霸 - starcraft\n#   谷歌 - google\n```\n\n## 主题\n\n如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。\n\n还是在`squirrel.custom.yaml`中，在刚刚加入的内容后面加入如下内容\n\n```yaml\n  preset_color_schemes/textflow:\n    author: \"name <name@gmail.com>\"\n    back_color: 0xFFFFFF #背景\n    border_color: 0xE0B693 #边框\n    candidate_text_color: 0x000000 #非第一候选项\n    hilited_back_color: 0xEBECED #拼音串高亮背景\n    hilited_candidate_back_color: 0xFFFFFF #第一候选项背景\n    hilited_candidate_text_color: 0xF57C75 #第一候选项\n    hilited_text_color: 0xFF6666 #拼音串高亮\n    name: Textflow\n    text_color: 0x000000 #拼音串\n```\n\n然后启用这个主题就可以了\n\n如果你想要更多的配色，可以参照[RIME吧：配色方案专帖](http://tieba.baidu.com/p/2445582839)\n\n## 生僻字乱码\n\n生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。\n\n一般的选择是「[花园明朝](http://fonts.jp/hanazono/)」，下载下来安装好之后，将 [外观](#show) 这一步中的\n\n```yaml\n  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱\n```\n\n改为\n\n```yaml\n  style/font_face: \"PingFang SC,HanaMinA\"    # 我喜歡的字體名稱\n```\n\n然后重新部署即可\n\n## 根据程序切换中英文\n\n鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。\n\n如在\n\n* 终端 **Terminal**、**iTerm2**\n* 编辑器 **sublime**、**atom**\n* 启动工具 **QuickSilver**、**Alfred**\n\n中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入\n\n如果想要设置应用中输入法的初始状态，我们首先要查看应用的`Info.plist`文件得到该应用的`Bundle Identifier`，通常是形如`com.apple.Xcode`的字符串\n\n例如，要在`Xcode`中默认英文输入，又要在`Alfred`中恢复中文输入，可如下设定：\n\n```yaml\n# example squirrel.custom.yaml\npatch:\n  app_options/com.apple.Xcode:\n    ascii_mode: true\n  app_options/com.alfredapp.Alfred: {}\n```\n\n## emoji表情以及特殊符号\n\n有时候我们会有输入`emoji`表情的需求，但仅仅只是开启了`emoji`输入方案的话，我们每次都要切换输入方案才可以输入`emoji`表情，还是很不方便的。如果可以直接在一种输入方案中加入`emoji`表情输入就更好了\n\n其实可以做到，你只需要这样\n\n```yaml\n# luna_pinyin.custom.yaml\n#\n# 在【朙月拼音】裏使用Emoji表情\n#\n# 保存到Rime用戶文件夾後，重新部署生效\n# ~/.config/ibus/rime  (linux)\n# ~/Library/Rime       (macos)\n# %APPDATA%\\Rime       (windows)\n#\n# 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分\n#\n\npatch:\n  schema/dependencies:\n    - emoji\n  reverse_lookup:\n    dictionary: emoji\n    enable_completion: false\n    prefix: \"`\"\n    tips: 〔表情〕\n```\n\n以上我们就完成了`emoji`表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧\n\n但是仅仅表情还不够，我们有时候需要输入形如`ⅺ`、`⑴`、`☁`之类的特殊符号，查看`symbols.yaml`我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？\n\n只需要在我们上面已经添加了`emoji`表情相关的配置文件末尾再加上如下配置即可\n\n```yaml\n  punctuator:\n    import_preset: symbols\n\n  recognizer:\n    import_preset: default\n    patterns:\n      reverse_lookup: \"`[a-z]*'?$\"\n      punct: \"^/([a-z]+|[0-9]0?)$\"\n```\n\n大功告成，重新部署之后使用`/lm`看看吧，更多符号输入方式请查看`symbols.yaml`\n\n## 同步\n\n做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？\n\n**当然可以！**\n\n`RIME`是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用**同步网盘**或者**U盘**来同步。\n\n推荐国内用户使用[坚果云](https://jianguoyun.com/)作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐[DropBox](https://www.dropbox.com/)\n\n### 1. 设定同步位置\n\n默认情况下，个人词库和配置都将备份到`RIME用户文件夹\\sync\\UUID`这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。\n\n直接編輯用戶文件夾下的`installation.yaml`，添加：\n\n```yaml\nsync_dir: 'D:\\Dropbox\\RimeSync'\n```\n\n又如 Mac 上添加：\n\n```yaml\nsync_dir: '/Users/fred/Dropbox/RimeSync'\n```\n\n又如使用 USB 存儲來同步：（真實案例）\n\n```yaml\nsync_dir: '/Volumes/USBDRIVE/RimeSync'\n```\n\n### 2. 同步标识\n\n默认情况下，`RIME`会为随机生成每一个`UUID`作为标识。这个`UUID`会被用来区分來自不同机器/系统的个人词库和设置。\n\n如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑`installation.yaml`中如下所示的内容即可\n\n```yaml\ninstallation_id: 'loshine-macbook'\n```\n\n**注意**：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线\n\n## 我的成品\n\n成品效果演示\n\n<video src=\"/assets/video/鼠须管演示.mov\" controls=\"controls\" width=\"600\">\nyour browser does not support the video tag\n</video>\n\n几个配置文件\n\n* squirrel.custom.yaml\n\n```yaml\n# 適用於【鼠鬚管】0.9.13+\n# 位置：~/Library/Rime/squirrel.custom.yaml\n# 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格\n\npatch:\n#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局\n  show_notifications_when: appropriate        # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）\n#  style/horizontal: true                     # 候選窗横向顯示\n#  style/inline_preedit: false                # 非內嵌編碼行\n#  style/font_face: \"PingFang SC,HanaMinA\"     # 我喜歡的字體名稱\n  style/font_point: 18                        # 字號\n  style/corner_radius: 2                      # 窗口圓角半徑\n  style/border_height: 7                      # 窗口邊界高度，大於圓角半徑才有效果\n  style/border_width: 7                       # 窗口邊界寬度，大於圓角半徑才有效果\n  style/color_scheme: luna                    # 選擇配色方案\n\n# 註：預設的配色方案及代碼（指定爲 style/color_scheme ）\n#   碧水 - aqua\n#   青天 - azure\n#   明月 - luna\n#   墨池 - ink\n#   孤寺 - lost_temple\n#   暗堂 - dark_temple\n#   星際我爭霸 - starcraft\n#   谷歌 - google\n  preset_color_schemes/textflow:\n    author: \"name <name@gmail.com>\"\n    back_color: 0xFFFFFF #背景\n    border_color: 0xE0B693 #边框\n    candidate_text_color: 0x000000 #非第一候选项\n    hilited_back_color: 0xEBECED #拼音串高亮背景\n    hilited_candidate_back_color: 0xFFFFFF #第一候选项背景\n    hilited_candidate_text_color: 0xF57C75 #第一候选项\n    hilited_text_color: 0xFF6666 #拼音串高亮\n    name: Textflow\n    text_color: 0x000000 #拼音串\n\n# Xcode\n  app_options/com.apple.Xcode:\n    ascii_mode: true\n# alfred\n  app_options/com.alfredapp.Alfred:\n    ascii_mode: true\n# Android Studio\n  app_options/com.google.android.studio:\n    ascii_mode: true\n# atom\n  app_options/com.github.atom:\n    ascii_mode: true\n```\n\n* default.custom.yaml\n\n```yaml\npatch:\n  schema_list:\n    - schema: luna_pinyin          # 朙月拼音\n    - schema: luna_pinyin_fluency  # 朙月拼音 语句流\n#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式\n#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式\n    - schema: terra_pinyin         # 地球拼音 dì qiú pīn yīn\n#    - schema: bopomofo             # 注音\n#    - schema: bopomofo_tw          # 注音 臺灣正體模式\n#    - schema: jyutping             # 粵拼\n#    - schema: cangjie5             # 倉頡五代\n#    - schema: cangjie5_express     # 倉頡 快打模式\n#    - schema: quick5               # 速成\n#    - schema: wubi86               # 五笔86\n    - schema: wubi_pinyin          # 五笔拼音混合輸入\n#    - schema: double_pinyin        # 自然碼雙拼\n#    - schema: double_pinyin_mspy   # 微軟雙拼\n#    - schema: double_pinyin_abc    # 智能ABC雙拼\n#    - schema: double_pinyin_flypy  # 小鶴雙拼\n#    - schema: wugniu        # 吳語上海話（新派）\n#    - schema: wugniu_lopha  # 吳語上海話（老派）\n#    - schema: sampheng      # 中古漢語三拼\n#    - schema: zyenpheng     # 中古漢語全拼\n#    - schema: ipa_xsampa    # X-SAMPA 國際音標\n    - schema: emoji         # emoji表情\n{% endhighlight %}\n* terra_pinyin.custom.yaml\n\n{% highlight yaml %}\n# luna_pinyin.custom.yaml\n#\n# 在【地球拼音】裏使用Emoji表情\n#\n# 保存到Rime用戶文件夾後，重新部署生效\n# ~/.config/ibus/rime  (linux)\n# ~/Library/Rime       (macos)\n# %APPDATA%\\Rime       (windows)\n#\n# 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分\n#\n\npatch:\n  schema/dependencies:\n    - emoji\n#  abc_segmentor/extra_tags:\n#    - reverse_lookup\n  reverse_lookup:\n    dictionary: emoji\n    enable_completion: false\n    prefix: \"`\"\n    tips: 〔表情〕\n\n  punctuator:\n    import_preset: symbols\n\n  recognizer:\n    import_preset: default\n    patterns:\n      reverse_lookup: \"`[a-z]*'?$\"\n      punct: \"^/([a-z]+|[0-9]0?)$\"\n```\n\n* installation.yaml\n\n```yaml\ndistribution_code_name: Squirrel\ndistribution_name: \"鼠鬚管\"\ndistribution_version: 0.9.26.1\ninstall_time: \"Mon Aug  3 15:24:12 2015\"\ninstallation_id: \"loshine-macbook\"\nrime_version: 1.2.9\nsync_dir: '/Users/Loshine/我的坚果云/RimeSync'\n```\n","slug":"rime","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvc000cgy6ecil4oidh","content":"<blockquote>\n<p>很久之前就发现了 RIME 这个输入法，但因为在 windows 下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了 mac 作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>RIME，全称是<strong>中州韵输入法引擎</strong>，是由<strong>佛振</strong>先生开发的跨平台开源输入法。</p>\n<p>它在不同平台上有不同的名字：</p>\n<ul>\n<li><strong>Windows</strong>：小狼毫 Weasel</li>\n<li><strong>Mac OS X</strong>： 鼠须管 Squirrel</li>\n<li><strong>Linux</strong>：ibus-rime or fcitx-rime</li>\n</ul>\n<p>其内置的输入方案包括</p>\n<ul>\n<li>朙月拼音</li>\n<li>朙月拼音 语句流</li>\n<li>朙月拼音 简化字模式</li>\n<li>朙月拼音 臺灣正體模式</li>\n<li>地球拼音 dì qiú pīn yīn</li>\n<li>注音</li>\n<li>注音 臺灣正體模式</li>\n<li>粵拼</li>\n<li>倉頡五代</li>\n<li>倉頡 快打模式</li>\n<li>速成</li>\n<li>五笔86</li>\n<li>五笔拼音混合輸入</li>\n<li>自然碼雙拼</li>\n<li>微軟雙拼</li>\n<li>智能ABC雙拼</li>\n<li>小鶴雙拼</li>\n<li>吳語上海話（新派）</li>\n<li>吳語上海話（老派）</li>\n<li>中古漢語三拼</li>\n<li>中古漢語全拼</li>\n<li>X-SAMPA 國際音標</li>\n<li>emoji表情</li>\n</ul>\n<p>再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案</p>\n<ul>\n<li>英文</li>\n<li>日语</li>\n<li>山人全息码</li>\n<li>……</li>\n</ul>\n<p>它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/111.jpg\" alt=\"配色主题\"></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>前往<a href=\"http://rime.im/download/\" target=\"_blank\" rel=\"external\">下载地址</a>选择对应的版本下载，Mac用户选择<code>鼠须管 Squirrel</code>即可。</p>\n<p>下载完成之后，解压zip压缩包，然后打开<code>Squirrel-versioncode.pkg</code>按步骤安装即可。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><ol>\n<li>Mac用户在输入源中添加<strong>鼠须管</strong></li>\n<li>按<code>⌘ + Space</code>切换输入法到<strong>鼠须管</strong></li>\n<li>按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入</li>\n<li>Enjoy it！</li>\n</ol>\n<h1 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h1><p>点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的<strong>配置文件</strong>。鼠须管的配置文件都是<code>yaml</code>格式的，我们如果想要自定义，可以新建一个<code>*.custom.yaml</code>对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。</p>\n<h2 id=\"输入方案\"><a href=\"#输入方案\" class=\"headerlink\" title=\"输入方案\"></a>输入方案</h2><p>新建一个<code>default.custom.yaml</code>文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记<strong>重新部署</strong>一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\"><span class=\"attr\">  schema_list:</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin          <span class=\"comment\"># 朙月拼音</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin_fluency  <span class=\"comment\"># 朙月拼音 语句流</span></div><div class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> terra_pinyin         <span class=\"comment\"># 地球拼音 dì qiú pīn yīn</span></div><div class=\"line\"><span class=\"comment\">#    - schema: bopomofo             # 注音</span></div><div class=\"line\"><span class=\"comment\">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: jyutping             # 粵拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: cangjie5             # 倉頡五代</span></div><div class=\"line\"><span class=\"comment\">#    - schema: cangjie5_express     # 倉頡 快打模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: quick5               # 速成</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wubi86               # 五笔86</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> wubi_pinyin          <span class=\"comment\"># 五笔拼音混合輸入</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin        # 自然碼雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wugniu        # 吳語上海話（新派）</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></div><div class=\"line\"><span class=\"comment\">#    - schema: sampheng      # 中古漢語三拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: zyenpheng     # 中古漢語全拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> emoji         <span class=\"comment\"># emoji表情</span></div></pre></td></tr></table></figure>\n<h2 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h2><p>新建一个<code>squirrel.custom.yaml</code>文件，向其中写入如下内容，然后根据自己的需求修改。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 適用於【鼠鬚管】0.9.13+</span></div><div class=\"line\"><span class=\"comment\"># 位置：~/Library/Rime/squirrel.custom.yaml</span></div><div class=\"line\"><span class=\"comment\"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\"><span class=\"comment\">#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局</span></div><div class=\"line\"><span class=\"comment\">#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></div><div class=\"line\"><span class=\"comment\">#  style/horizontal: true        # 候選窗横向顯示</span></div><div class=\"line\"><span class=\"comment\">#  style/inline_preedit: false   # 非內嵌編碼行</span></div><div class=\"line\"><span class=\"comment\">#  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱</span></div><div class=\"line\"><span class=\"comment\">#  style/font_point: 21          # 字號</span></div><div class=\"line\"><span class=\"comment\">#  style/corner_radius: 10       # 窗口圓角半徑</span></div><div class=\"line\"><span class=\"comment\">#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果</span></div><div class=\"line\"><span class=\"comment\">#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果</span></div><div class=\"line\"><span class=\"comment\">#  style/color_scheme: luna      # 選擇配色方案</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></div><div class=\"line\"><span class=\"comment\">#   碧水 - aqua</span></div><div class=\"line\"><span class=\"comment\">#   青天 - azure</span></div><div class=\"line\"><span class=\"comment\">#   明月 - luna</span></div><div class=\"line\"><span class=\"comment\">#   墨池 - ink</span></div><div class=\"line\"><span class=\"comment\">#   孤寺 - lost_temple</span></div><div class=\"line\"><span class=\"comment\">#   暗堂 - dark_temple</span></div><div class=\"line\"><span class=\"comment\">#   星際我爭霸 - starcraft</span></div><div class=\"line\"><span class=\"comment\">#   谷歌 - google</span></div></pre></td></tr></table></figure>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。</p>\n<p>还是在<code>squirrel.custom.yaml</code>中，在刚刚加入的内容后面加入如下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">preset_color_schemes/textflow:</div><div class=\"line\"><span class=\"attr\">  author:</span> <span class=\"string\">\"name &lt;name@gmail.com&gt;\"</span></div><div class=\"line\"><span class=\"attr\">  back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#背景</span></div><div class=\"line\"><span class=\"attr\">  border_color:</span> <span class=\"number\">0xE0B693</span> <span class=\"comment\">#边框</span></div><div class=\"line\"><span class=\"attr\">  candidate_text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#非第一候选项</span></div><div class=\"line\"><span class=\"attr\">  hilited_back_color:</span> <span class=\"number\">0xEBECED</span> <span class=\"comment\">#拼音串高亮背景</span></div><div class=\"line\"><span class=\"attr\">  hilited_candidate_back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#第一候选项背景</span></div><div class=\"line\"><span class=\"attr\">  hilited_candidate_text_color:</span> <span class=\"number\">0xF57C75</span> <span class=\"comment\">#第一候选项</span></div><div class=\"line\"><span class=\"attr\">  hilited_text_color:</span> <span class=\"number\">0xFF6666</span> <span class=\"comment\">#拼音串高亮</span></div><div class=\"line\"><span class=\"attr\">  name:</span> Textflow</div><div class=\"line\"><span class=\"attr\">  text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#拼音串</span></div></pre></td></tr></table></figure>\n<p>然后启用这个主题就可以了</p>\n<p>如果你想要更多的配色，可以参照<a href=\"http://tieba.baidu.com/p/2445582839\" target=\"_blank\" rel=\"external\">RIME吧：配色方案专帖</a></p>\n<h2 id=\"生僻字乱码\"><a href=\"#生僻字乱码\" class=\"headerlink\" title=\"生僻字乱码\"></a>生僻字乱码</h2><p>生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。</p>\n<p>一般的选择是「<a href=\"http://fonts.jp/hanazono/\" target=\"_blank\" rel=\"external\">花园明朝</a>」，下载下来安装好之后，将 <a href=\"#show\">外观</a> 这一步中的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">style/font_face: <span class=\"string\">\"儷黑 Pro\"</span>    <span class=\"comment\"># 我喜歡的字體名稱</span></div></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">style/font_face: <span class=\"string\">\"PingFang SC,HanaMinA\"</span>    <span class=\"comment\"># 我喜歡的字體名稱</span></div></pre></td></tr></table></figure>\n<p>然后重新部署即可</p>\n<h2 id=\"根据程序切换中英文\"><a href=\"#根据程序切换中英文\" class=\"headerlink\" title=\"根据程序切换中英文\"></a>根据程序切换中英文</h2><p>鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。</p>\n<p>如在</p>\n<ul>\n<li>终端 <strong>Terminal</strong>、<strong>iTerm2</strong></li>\n<li>编辑器 <strong>sublime</strong>、<strong>atom</strong></li>\n<li>启动工具 <strong>QuickSilver</strong>、<strong>Alfred</strong></li>\n</ul>\n<p>中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入</p>\n<p>如果想要设置应用中输入法的初始状态，我们首先要查看应用的<code>Info.plist</code>文件得到该应用的<code>Bundle Identifier</code>，通常是形如<code>com.apple.Xcode</code>的字符串</p>\n<p>例如，要在<code>Xcode</code>中默认英文输入，又要在<code>Alfred</code>中恢复中文输入，可如下设定：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># example squirrel.custom.yaml</span></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\">  app_options/com.apple.Xcode:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div><div class=\"line\">  app_options/com.alfredapp.Alfred: &#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"emoji表情以及特殊符号\"><a href=\"#emoji表情以及特殊符号\" class=\"headerlink\" title=\"emoji表情以及特殊符号\"></a>emoji表情以及特殊符号</h2><p>有时候我们会有输入<code>emoji</code>表情的需求，但仅仅只是开启了<code>emoji</code>输入方案的话，我们每次都要切换输入方案才可以输入<code>emoji</code>表情，还是很不方便的。如果可以直接在一种输入方案中加入<code>emoji</code>表情输入就更好了</p>\n<p>其实可以做到，你只需要这样</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># luna_pinyin.custom.yaml</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 在【朙月拼音】裏使用Emoji表情</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 保存到Rime用戶文件夾後，重新部署生效</span></div><div class=\"line\"><span class=\"comment\"># ~/.config/ibus/rime  (linux)</span></div><div class=\"line\"><span class=\"comment\"># ~/Library/Rime       (macos)</span></div><div class=\"line\"><span class=\"comment\"># %APPDATA%\\Rime       (windows)</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\">  schema/dependencies:</div><div class=\"line\"><span class=\"bullet\">    -</span> emoji</div><div class=\"line\"><span class=\"attr\">  reverse_lookup:</span></div><div class=\"line\"><span class=\"attr\">    dictionary:</span> emoji</div><div class=\"line\"><span class=\"attr\">    enable_completion:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    prefix:</span> <span class=\"string\">\"`\"</span></div><div class=\"line\"><span class=\"attr\">    tips:</span> 〔表情〕</div></pre></td></tr></table></figure>\n<p>以上我们就完成了<code>emoji</code>表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧</p>\n<p>但是仅仅表情还不够，我们有时候需要输入形如<code>ⅺ</code>、<code>⑴</code>、<code>☁</code>之类的特殊符号，查看<code>symbols.yaml</code>我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？</p>\n<p>只需要在我们上面已经添加了<code>emoji</code>表情相关的配置文件末尾再加上如下配置即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">punctuator:</span></div><div class=\"line\"><span class=\"attr\">  import_preset:</span> symbols</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">recognizer:</span></div><div class=\"line\"><span class=\"attr\">  import_preset:</span> default</div><div class=\"line\"><span class=\"attr\">  patterns:</span></div><div class=\"line\"><span class=\"attr\">    reverse_lookup:</span> <span class=\"string\">\"`[a-z]*'?$\"</span></div><div class=\"line\"><span class=\"attr\">    punct:</span> <span class=\"string\">\"^/([a-z]+|[0-9]0?)$\"</span></div></pre></td></tr></table></figure>\n<p>大功告成，重新部署之后使用<code>/lm</code>看看吧，更多符号输入方式请查看<code>symbols.yaml</code></p>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？</p>\n<p><strong>当然可以！</strong></p>\n<p><code>RIME</code>是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用<strong>同步网盘</strong>或者<strong>U盘</strong>来同步。</p>\n<p>推荐国内用户使用<a href=\"https://jianguoyun.com/\" target=\"_blank\" rel=\"external\">坚果云</a>作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐<a href=\"https://www.dropbox.com/\" target=\"_blank\" rel=\"external\">DropBox</a></p>\n<h3 id=\"1-设定同步位置\"><a href=\"#1-设定同步位置\" class=\"headerlink\" title=\"1. 设定同步位置\"></a>1. 设定同步位置</h3><p>默认情况下，个人词库和配置都将备份到<code>RIME用户文件夹\\sync\\UUID</code>这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。</p>\n<p>直接編輯用戶文件夾下的<code>installation.yaml</code>，添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'D:\\Dropbox\\RimeSync'</span></div></pre></td></tr></table></figure>\n<p>又如 Mac 上添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Users/fred/Dropbox/RimeSync'</span></div></pre></td></tr></table></figure>\n<p>又如使用 USB 存儲來同步：（真實案例）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Volumes/USBDRIVE/RimeSync'</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-同步标识\"><a href=\"#2-同步标识\" class=\"headerlink\" title=\"2. 同步标识\"></a>2. 同步标识</h3><p>默认情况下，<code>RIME</code>会为随机生成每一个<code>UUID</code>作为标识。这个<code>UUID</code>会被用来区分來自不同机器/系统的个人词库和设置。</p>\n<p>如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑<code>installation.yaml</code>中如下所示的内容即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">installation_id:</span> <span class=\"string\">'loshine-macbook'</span></div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线</p>\n<h2 id=\"我的成品\"><a href=\"#我的成品\" class=\"headerlink\" title=\"我的成品\"></a>我的成品</h2><p>成品效果演示</p>\n<video src=\"/assets/video/鼠须管演示.mov\" controls=\"controls\" width=\"600\"><br>your browser does not support the video tag<br></video>\n\n<p>几个配置文件</p>\n<ul>\n<li>squirrel.custom.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 適用於【鼠鬚管】0.9.13+</span></div><div class=\"line\"><span class=\"comment\"># 位置：~/Library/Rime/squirrel.custom.yaml</span></div><div class=\"line\"><span class=\"comment\"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\"><span class=\"comment\">#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局</span></div><div class=\"line\"><span class=\"attr\">  show_notifications_when:</span> appropriate        <span class=\"comment\"># 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></div><div class=\"line\"><span class=\"comment\">#  style/horizontal: true                     # 候選窗横向顯示</span></div><div class=\"line\"><span class=\"comment\">#  style/inline_preedit: false                # 非內嵌編碼行</span></div><div class=\"line\"><span class=\"comment\">#  style/font_face: \"PingFang SC,HanaMinA\"     # 我喜歡的字體名稱</span></div><div class=\"line\">  style/font_point: <span class=\"number\">18</span>                        <span class=\"comment\"># 字號</span></div><div class=\"line\">  style/corner_radius: <span class=\"number\">2</span>                      <span class=\"comment\"># 窗口圓角半徑</span></div><div class=\"line\">  style/border_height: <span class=\"number\">7</span>                      <span class=\"comment\"># 窗口邊界高度，大於圓角半徑才有效果</span></div><div class=\"line\">  style/border_width: <span class=\"number\">7</span>                       <span class=\"comment\"># 窗口邊界寬度，大於圓角半徑才有效果</span></div><div class=\"line\">  style/color_scheme: luna                    <span class=\"comment\"># 選擇配色方案</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></div><div class=\"line\"><span class=\"comment\">#   碧水 - aqua</span></div><div class=\"line\"><span class=\"comment\">#   青天 - azure</span></div><div class=\"line\"><span class=\"comment\">#   明月 - luna</span></div><div class=\"line\"><span class=\"comment\">#   墨池 - ink</span></div><div class=\"line\"><span class=\"comment\">#   孤寺 - lost_temple</span></div><div class=\"line\"><span class=\"comment\">#   暗堂 - dark_temple</span></div><div class=\"line\"><span class=\"comment\">#   星際我爭霸 - starcraft</span></div><div class=\"line\"><span class=\"comment\">#   谷歌 - google</span></div><div class=\"line\">  preset_color_schemes/textflow:</div><div class=\"line\"><span class=\"attr\">    author:</span> <span class=\"string\">\"name &lt;name@gmail.com&gt;\"</span></div><div class=\"line\"><span class=\"attr\">    back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#背景</span></div><div class=\"line\"><span class=\"attr\">    border_color:</span> <span class=\"number\">0xE0B693</span> <span class=\"comment\">#边框</span></div><div class=\"line\"><span class=\"attr\">    candidate_text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#非第一候选项</span></div><div class=\"line\"><span class=\"attr\">    hilited_back_color:</span> <span class=\"number\">0xEBECED</span> <span class=\"comment\">#拼音串高亮背景</span></div><div class=\"line\"><span class=\"attr\">    hilited_candidate_back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#第一候选项背景</span></div><div class=\"line\"><span class=\"attr\">    hilited_candidate_text_color:</span> <span class=\"number\">0xF57C75</span> <span class=\"comment\">#第一候选项</span></div><div class=\"line\"><span class=\"attr\">    hilited_text_color:</span> <span class=\"number\">0xFF6666</span> <span class=\"comment\">#拼音串高亮</span></div><div class=\"line\"><span class=\"attr\">    name:</span> Textflow</div><div class=\"line\"><span class=\"attr\">    text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#拼音串</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Xcode</span></div><div class=\"line\">  app_options/com.apple.Xcode:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># alfred</span></div><div class=\"line\">  app_options/com.alfredapp.Alfred:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># Android Studio</span></div><div class=\"line\">  app_options/com.google.android.studio:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># atom</span></div><div class=\"line\">  app_options/com.github.atom:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<ul>\n<li>default.custom.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\"><span class=\"attr\">  schema_list:</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin          <span class=\"comment\"># 朙月拼音</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin_fluency  <span class=\"comment\"># 朙月拼音 语句流</span></div><div class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> terra_pinyin         <span class=\"comment\"># 地球拼音 dì qiú pīn yīn</span></div><div class=\"line\"><span class=\"comment\">#    - schema: bopomofo             # 注音</span></div><div class=\"line\"><span class=\"comment\">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: jyutping             # 粵拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: cangjie5             # 倉頡五代</span></div><div class=\"line\"><span class=\"comment\">#    - schema: cangjie5_express     # 倉頡 快打模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: quick5               # 速成</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wubi86               # 五笔86</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> wubi_pinyin          <span class=\"comment\"># 五笔拼音混合輸入</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin        # 自然碼雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wugniu        # 吳語上海話（新派）</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></div><div class=\"line\"><span class=\"comment\">#    - schema: sampheng      # 中古漢語三拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: zyenpheng     # 中古漢語全拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> emoji         <span class=\"comment\"># emoji表情</span></div><div class=\"line\">&#123;% endhighlight %&#125;</div><div class=\"line\">* terra_pinyin.custom.yaml</div><div class=\"line\"></div><div class=\"line\">&#123;% highlight yaml %&#125;</div><div class=\"line\"><span class=\"comment\"># luna_pinyin.custom.yaml</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 在【地球拼音】裏使用Emoji表情</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 保存到Rime用戶文件夾後，重新部署生效</span></div><div class=\"line\"><span class=\"comment\"># ~/.config/ibus/rime  (linux)</span></div><div class=\"line\"><span class=\"comment\"># ~/Library/Rime       (macos)</span></div><div class=\"line\"><span class=\"comment\"># %APPDATA%\\Rime       (windows)</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\">  schema/dependencies:</div><div class=\"line\"><span class=\"bullet\">    -</span> emoji</div><div class=\"line\"><span class=\"comment\">#  abc_segmentor/extra_tags:</span></div><div class=\"line\"><span class=\"comment\">#    - reverse_lookup</span></div><div class=\"line\"><span class=\"attr\">  reverse_lookup:</span></div><div class=\"line\"><span class=\"attr\">    dictionary:</span> emoji</div><div class=\"line\"><span class=\"attr\">    enable_completion:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    prefix:</span> <span class=\"string\">\"`\"</span></div><div class=\"line\"><span class=\"attr\">    tips:</span> 〔表情〕</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  punctuator:</span></div><div class=\"line\"><span class=\"attr\">    import_preset:</span> symbols</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  recognizer:</span></div><div class=\"line\"><span class=\"attr\">    import_preset:</span> default</div><div class=\"line\"><span class=\"attr\">    patterns:</span></div><div class=\"line\"><span class=\"attr\">      reverse_lookup:</span> <span class=\"string\">\"`[a-z]*'?$\"</span></div><div class=\"line\"><span class=\"attr\">      punct:</span> <span class=\"string\">\"^/([a-z]+|[0-9]0?)$\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>installation.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">distribution_code_name:</span> Squirrel</div><div class=\"line\"><span class=\"attr\">distribution_name:</span> <span class=\"string\">\"鼠鬚管\"</span></div><div class=\"line\"><span class=\"attr\">distribution_version:</span> <span class=\"number\">0.9</span><span class=\"number\">.26</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">install_time:</span> <span class=\"string\">\"Mon Aug  3 15:24:12 2015\"</span></div><div class=\"line\"><span class=\"attr\">installation_id:</span> <span class=\"string\">\"loshine-macbook\"</span></div><div class=\"line\"><span class=\"attr\">rime_version:</span> <span class=\"number\">1.2</span><span class=\"number\">.9</span></div><div class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Users/Loshine/我的坚果云/RimeSync'</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>很久之前就发现了 RIME 这个输入法，但因为在 windows 下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了 mac 作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>RIME，全称是<strong>中州韵输入法引擎</strong>，是由<strong>佛振</strong>先生开发的跨平台开源输入法。</p>\n<p>它在不同平台上有不同的名字：</p>\n<ul>\n<li><strong>Windows</strong>：小狼毫 Weasel</li>\n<li><strong>Mac OS X</strong>： 鼠须管 Squirrel</li>\n<li><strong>Linux</strong>：ibus-rime or fcitx-rime</li>\n</ul>\n<p>其内置的输入方案包括</p>\n<ul>\n<li>朙月拼音</li>\n<li>朙月拼音 语句流</li>\n<li>朙月拼音 简化字模式</li>\n<li>朙月拼音 臺灣正體模式</li>\n<li>地球拼音 dì qiú pīn yīn</li>\n<li>注音</li>\n<li>注音 臺灣正體模式</li>\n<li>粵拼</li>\n<li>倉頡五代</li>\n<li>倉頡 快打模式</li>\n<li>速成</li>\n<li>五笔86</li>\n<li>五笔拼音混合輸入</li>\n<li>自然碼雙拼</li>\n<li>微軟雙拼</li>\n<li>智能ABC雙拼</li>\n<li>小鶴雙拼</li>\n<li>吳語上海話（新派）</li>\n<li>吳語上海話（老派）</li>\n<li>中古漢語三拼</li>\n<li>中古漢語全拼</li>\n<li>X-SAMPA 國際音標</li>\n<li>emoji表情</li>\n</ul>\n<p>再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案</p>\n<ul>\n<li>英文</li>\n<li>日语</li>\n<li>山人全息码</li>\n<li>……</li>\n</ul>\n<p>它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/111.jpg\" alt=\"配色主题\"></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>前往<a href=\"http://rime.im/download/\">下载地址</a>选择对应的版本下载，Mac用户选择<code>鼠须管 Squirrel</code>即可。</p>\n<p>下载完成之后，解压zip压缩包，然后打开<code>Squirrel-versioncode.pkg</code>按步骤安装即可。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><ol>\n<li>Mac用户在输入源中添加<strong>鼠须管</strong></li>\n<li>按<code>⌘ + Space</code>切换输入法到<strong>鼠须管</strong></li>\n<li>按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入</li>\n<li>Enjoy it！</li>\n</ol>\n<h1 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h1><p>点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的<strong>配置文件</strong>。鼠须管的配置文件都是<code>yaml</code>格式的，我们如果想要自定义，可以新建一个<code>*.custom.yaml</code>对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。</p>\n<h2 id=\"输入方案\"><a href=\"#输入方案\" class=\"headerlink\" title=\"输入方案\"></a>输入方案</h2><p>新建一个<code>default.custom.yaml</code>文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记<strong>重新部署</strong>一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\"><span class=\"attr\">  schema_list:</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin          <span class=\"comment\"># 朙月拼音</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin_fluency  <span class=\"comment\"># 朙月拼音 语句流</span></div><div class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> terra_pinyin         <span class=\"comment\"># 地球拼音 dì qiú pīn yīn</span></div><div class=\"line\"><span class=\"comment\">#    - schema: bopomofo             # 注音</span></div><div class=\"line\"><span class=\"comment\">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: jyutping             # 粵拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: cangjie5             # 倉頡五代</span></div><div class=\"line\"><span class=\"comment\">#    - schema: cangjie5_express     # 倉頡 快打模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: quick5               # 速成</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wubi86               # 五笔86</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> wubi_pinyin          <span class=\"comment\"># 五笔拼音混合輸入</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin        # 自然碼雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wugniu        # 吳語上海話（新派）</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></div><div class=\"line\"><span class=\"comment\">#    - schema: sampheng      # 中古漢語三拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: zyenpheng     # 中古漢語全拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> emoji         <span class=\"comment\"># emoji表情</span></div></pre></td></tr></table></figure>\n<h2 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h2><p>新建一个<code>squirrel.custom.yaml</code>文件，向其中写入如下内容，然后根据自己的需求修改。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 適用於【鼠鬚管】0.9.13+</span></div><div class=\"line\"><span class=\"comment\"># 位置：~/Library/Rime/squirrel.custom.yaml</span></div><div class=\"line\"><span class=\"comment\"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\"><span class=\"comment\">#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局</span></div><div class=\"line\"><span class=\"comment\">#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></div><div class=\"line\"><span class=\"comment\">#  style/horizontal: true        # 候選窗横向顯示</span></div><div class=\"line\"><span class=\"comment\">#  style/inline_preedit: false   # 非內嵌編碼行</span></div><div class=\"line\"><span class=\"comment\">#  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱</span></div><div class=\"line\"><span class=\"comment\">#  style/font_point: 21          # 字號</span></div><div class=\"line\"><span class=\"comment\">#  style/corner_radius: 10       # 窗口圓角半徑</span></div><div class=\"line\"><span class=\"comment\">#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果</span></div><div class=\"line\"><span class=\"comment\">#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果</span></div><div class=\"line\"><span class=\"comment\">#  style/color_scheme: luna      # 選擇配色方案</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></div><div class=\"line\"><span class=\"comment\">#   碧水 - aqua</span></div><div class=\"line\"><span class=\"comment\">#   青天 - azure</span></div><div class=\"line\"><span class=\"comment\">#   明月 - luna</span></div><div class=\"line\"><span class=\"comment\">#   墨池 - ink</span></div><div class=\"line\"><span class=\"comment\">#   孤寺 - lost_temple</span></div><div class=\"line\"><span class=\"comment\">#   暗堂 - dark_temple</span></div><div class=\"line\"><span class=\"comment\">#   星際我爭霸 - starcraft</span></div><div class=\"line\"><span class=\"comment\">#   谷歌 - google</span></div></pre></td></tr></table></figure>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。</p>\n<p>还是在<code>squirrel.custom.yaml</code>中，在刚刚加入的内容后面加入如下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">preset_color_schemes/textflow:</div><div class=\"line\"><span class=\"attr\">  author:</span> <span class=\"string\">\"name &lt;name@gmail.com&gt;\"</span></div><div class=\"line\"><span class=\"attr\">  back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#背景</span></div><div class=\"line\"><span class=\"attr\">  border_color:</span> <span class=\"number\">0xE0B693</span> <span class=\"comment\">#边框</span></div><div class=\"line\"><span class=\"attr\">  candidate_text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#非第一候选项</span></div><div class=\"line\"><span class=\"attr\">  hilited_back_color:</span> <span class=\"number\">0xEBECED</span> <span class=\"comment\">#拼音串高亮背景</span></div><div class=\"line\"><span class=\"attr\">  hilited_candidate_back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#第一候选项背景</span></div><div class=\"line\"><span class=\"attr\">  hilited_candidate_text_color:</span> <span class=\"number\">0xF57C75</span> <span class=\"comment\">#第一候选项</span></div><div class=\"line\"><span class=\"attr\">  hilited_text_color:</span> <span class=\"number\">0xFF6666</span> <span class=\"comment\">#拼音串高亮</span></div><div class=\"line\"><span class=\"attr\">  name:</span> Textflow</div><div class=\"line\"><span class=\"attr\">  text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#拼音串</span></div></pre></td></tr></table></figure>\n<p>然后启用这个主题就可以了</p>\n<p>如果你想要更多的配色，可以参照<a href=\"http://tieba.baidu.com/p/2445582839\">RIME吧：配色方案专帖</a></p>\n<h2 id=\"生僻字乱码\"><a href=\"#生僻字乱码\" class=\"headerlink\" title=\"生僻字乱码\"></a>生僻字乱码</h2><p>生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。</p>\n<p>一般的选择是「<a href=\"http://fonts.jp/hanazono/\">花园明朝</a>」，下载下来安装好之后，将 <a href=\"#show\">外观</a> 这一步中的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">style/font_face: <span class=\"string\">\"儷黑 Pro\"</span>    <span class=\"comment\"># 我喜歡的字體名稱</span></div></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">style/font_face: <span class=\"string\">\"PingFang SC,HanaMinA\"</span>    <span class=\"comment\"># 我喜歡的字體名稱</span></div></pre></td></tr></table></figure>\n<p>然后重新部署即可</p>\n<h2 id=\"根据程序切换中英文\"><a href=\"#根据程序切换中英文\" class=\"headerlink\" title=\"根据程序切换中英文\"></a>根据程序切换中英文</h2><p>鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。</p>\n<p>如在</p>\n<ul>\n<li>终端 <strong>Terminal</strong>、<strong>iTerm2</strong></li>\n<li>编辑器 <strong>sublime</strong>、<strong>atom</strong></li>\n<li>启动工具 <strong>QuickSilver</strong>、<strong>Alfred</strong></li>\n</ul>\n<p>中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入</p>\n<p>如果想要设置应用中输入法的初始状态，我们首先要查看应用的<code>Info.plist</code>文件得到该应用的<code>Bundle Identifier</code>，通常是形如<code>com.apple.Xcode</code>的字符串</p>\n<p>例如，要在<code>Xcode</code>中默认英文输入，又要在<code>Alfred</code>中恢复中文输入，可如下设定：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># example squirrel.custom.yaml</span></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\">  app_options/com.apple.Xcode:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div><div class=\"line\">  app_options/com.alfredapp.Alfred: &#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"emoji表情以及特殊符号\"><a href=\"#emoji表情以及特殊符号\" class=\"headerlink\" title=\"emoji表情以及特殊符号\"></a>emoji表情以及特殊符号</h2><p>有时候我们会有输入<code>emoji</code>表情的需求，但仅仅只是开启了<code>emoji</code>输入方案的话，我们每次都要切换输入方案才可以输入<code>emoji</code>表情，还是很不方便的。如果可以直接在一种输入方案中加入<code>emoji</code>表情输入就更好了</p>\n<p>其实可以做到，你只需要这样</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># luna_pinyin.custom.yaml</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 在【朙月拼音】裏使用Emoji表情</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 保存到Rime用戶文件夾後，重新部署生效</span></div><div class=\"line\"><span class=\"comment\"># ~/.config/ibus/rime  (linux)</span></div><div class=\"line\"><span class=\"comment\"># ~/Library/Rime       (macos)</span></div><div class=\"line\"><span class=\"comment\"># %APPDATA%\\Rime       (windows)</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\">  schema/dependencies:</div><div class=\"line\"><span class=\"bullet\">    -</span> emoji</div><div class=\"line\"><span class=\"attr\">  reverse_lookup:</span></div><div class=\"line\"><span class=\"attr\">    dictionary:</span> emoji</div><div class=\"line\"><span class=\"attr\">    enable_completion:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    prefix:</span> <span class=\"string\">\"`\"</span></div><div class=\"line\"><span class=\"attr\">    tips:</span> 〔表情〕</div></pre></td></tr></table></figure>\n<p>以上我们就完成了<code>emoji</code>表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧</p>\n<p>但是仅仅表情还不够，我们有时候需要输入形如<code>ⅺ</code>、<code>⑴</code>、<code>☁</code>之类的特殊符号，查看<code>symbols.yaml</code>我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？</p>\n<p>只需要在我们上面已经添加了<code>emoji</code>表情相关的配置文件末尾再加上如下配置即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">punctuator:</span></div><div class=\"line\"><span class=\"attr\">  import_preset:</span> symbols</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">recognizer:</span></div><div class=\"line\"><span class=\"attr\">  import_preset:</span> default</div><div class=\"line\"><span class=\"attr\">  patterns:</span></div><div class=\"line\"><span class=\"attr\">    reverse_lookup:</span> <span class=\"string\">\"`[a-z]*'?$\"</span></div><div class=\"line\"><span class=\"attr\">    punct:</span> <span class=\"string\">\"^/([a-z]+|[0-9]0?)$\"</span></div></pre></td></tr></table></figure>\n<p>大功告成，重新部署之后使用<code>/lm</code>看看吧，更多符号输入方式请查看<code>symbols.yaml</code></p>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？</p>\n<p><strong>当然可以！</strong></p>\n<p><code>RIME</code>是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用<strong>同步网盘</strong>或者<strong>U盘</strong>来同步。</p>\n<p>推荐国内用户使用<a href=\"https://jianguoyun.com/\">坚果云</a>作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐<a href=\"https://www.dropbox.com/\">DropBox</a></p>\n<h3 id=\"1-设定同步位置\"><a href=\"#1-设定同步位置\" class=\"headerlink\" title=\"1. 设定同步位置\"></a>1. 设定同步位置</h3><p>默认情况下，个人词库和配置都将备份到<code>RIME用户文件夹\\sync\\UUID</code>这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。</p>\n<p>直接編輯用戶文件夾下的<code>installation.yaml</code>，添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'D:\\Dropbox\\RimeSync'</span></div></pre></td></tr></table></figure>\n<p>又如 Mac 上添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Users/fred/Dropbox/RimeSync'</span></div></pre></td></tr></table></figure>\n<p>又如使用 USB 存儲來同步：（真實案例）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Volumes/USBDRIVE/RimeSync'</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-同步标识\"><a href=\"#2-同步标识\" class=\"headerlink\" title=\"2. 同步标识\"></a>2. 同步标识</h3><p>默认情况下，<code>RIME</code>会为随机生成每一个<code>UUID</code>作为标识。这个<code>UUID</code>会被用来区分來自不同机器/系统的个人词库和设置。</p>\n<p>如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑<code>installation.yaml</code>中如下所示的内容即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">installation_id:</span> <span class=\"string\">'loshine-macbook'</span></div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线</p>\n<h2 id=\"我的成品\"><a href=\"#我的成品\" class=\"headerlink\" title=\"我的成品\"></a>我的成品</h2><p>成品效果演示</p>\n<video src=\"/assets/video/鼠须管演示.mov\" controls=\"controls\" width=\"600\"><br>your browser does not support the video tag<br></video>\n\n<p>几个配置文件</p>\n<ul>\n<li>squirrel.custom.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 適用於【鼠鬚管】0.9.13+</span></div><div class=\"line\"><span class=\"comment\"># 位置：~/Library/Rime/squirrel.custom.yaml</span></div><div class=\"line\"><span class=\"comment\"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\"><span class=\"comment\">#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局</span></div><div class=\"line\"><span class=\"attr\">  show_notifications_when:</span> appropriate        <span class=\"comment\"># 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></div><div class=\"line\"><span class=\"comment\">#  style/horizontal: true                     # 候選窗横向顯示</span></div><div class=\"line\"><span class=\"comment\">#  style/inline_preedit: false                # 非內嵌編碼行</span></div><div class=\"line\"><span class=\"comment\">#  style/font_face: \"PingFang SC,HanaMinA\"     # 我喜歡的字體名稱</span></div><div class=\"line\">  style/font_point: <span class=\"number\">18</span>                        <span class=\"comment\"># 字號</span></div><div class=\"line\">  style/corner_radius: <span class=\"number\">2</span>                      <span class=\"comment\"># 窗口圓角半徑</span></div><div class=\"line\">  style/border_height: <span class=\"number\">7</span>                      <span class=\"comment\"># 窗口邊界高度，大於圓角半徑才有效果</span></div><div class=\"line\">  style/border_width: <span class=\"number\">7</span>                       <span class=\"comment\"># 窗口邊界寬度，大於圓角半徑才有效果</span></div><div class=\"line\">  style/color_scheme: luna                    <span class=\"comment\"># 選擇配色方案</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></div><div class=\"line\"><span class=\"comment\">#   碧水 - aqua</span></div><div class=\"line\"><span class=\"comment\">#   青天 - azure</span></div><div class=\"line\"><span class=\"comment\">#   明月 - luna</span></div><div class=\"line\"><span class=\"comment\">#   墨池 - ink</span></div><div class=\"line\"><span class=\"comment\">#   孤寺 - lost_temple</span></div><div class=\"line\"><span class=\"comment\">#   暗堂 - dark_temple</span></div><div class=\"line\"><span class=\"comment\">#   星際我爭霸 - starcraft</span></div><div class=\"line\"><span class=\"comment\">#   谷歌 - google</span></div><div class=\"line\">  preset_color_schemes/textflow:</div><div class=\"line\"><span class=\"attr\">    author:</span> <span class=\"string\">\"name &lt;name@gmail.com&gt;\"</span></div><div class=\"line\"><span class=\"attr\">    back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#背景</span></div><div class=\"line\"><span class=\"attr\">    border_color:</span> <span class=\"number\">0xE0B693</span> <span class=\"comment\">#边框</span></div><div class=\"line\"><span class=\"attr\">    candidate_text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#非第一候选项</span></div><div class=\"line\"><span class=\"attr\">    hilited_back_color:</span> <span class=\"number\">0xEBECED</span> <span class=\"comment\">#拼音串高亮背景</span></div><div class=\"line\"><span class=\"attr\">    hilited_candidate_back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#第一候选项背景</span></div><div class=\"line\"><span class=\"attr\">    hilited_candidate_text_color:</span> <span class=\"number\">0xF57C75</span> <span class=\"comment\">#第一候选项</span></div><div class=\"line\"><span class=\"attr\">    hilited_text_color:</span> <span class=\"number\">0xFF6666</span> <span class=\"comment\">#拼音串高亮</span></div><div class=\"line\"><span class=\"attr\">    name:</span> Textflow</div><div class=\"line\"><span class=\"attr\">    text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#拼音串</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Xcode</span></div><div class=\"line\">  app_options/com.apple.Xcode:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># alfred</span></div><div class=\"line\">  app_options/com.alfredapp.Alfred:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># Android Studio</span></div><div class=\"line\">  app_options/com.google.android.studio:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># atom</span></div><div class=\"line\">  app_options/com.github.atom:</div><div class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<ul>\n<li>default.custom.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\"><span class=\"attr\">  schema_list:</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin          <span class=\"comment\"># 朙月拼音</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin_fluency  <span class=\"comment\"># 朙月拼音 语句流</span></div><div class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> terra_pinyin         <span class=\"comment\"># 地球拼音 dì qiú pīn yīn</span></div><div class=\"line\"><span class=\"comment\">#    - schema: bopomofo             # 注音</span></div><div class=\"line\"><span class=\"comment\">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: jyutping             # 粵拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: cangjie5             # 倉頡五代</span></div><div class=\"line\"><span class=\"comment\">#    - schema: cangjie5_express     # 倉頡 快打模式</span></div><div class=\"line\"><span class=\"comment\">#    - schema: quick5               # 速成</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wubi86               # 五笔86</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> wubi_pinyin          <span class=\"comment\"># 五笔拼音混合輸入</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin        # 自然碼雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wugniu        # 吳語上海話（新派）</span></div><div class=\"line\"><span class=\"comment\">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></div><div class=\"line\"><span class=\"comment\">#    - schema: sampheng      # 中古漢語三拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: zyenpheng     # 中古漢語全拼</span></div><div class=\"line\"><span class=\"comment\">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></div><div class=\"line\"><span class=\"attr\">    - schema:</span> emoji         <span class=\"comment\"># emoji表情</span></div><div class=\"line\">&#123;% endhighlight %&#125;</div><div class=\"line\">* terra_pinyin.custom.yaml</div><div class=\"line\"></div><div class=\"line\">&#123;% highlight yaml %&#125;</div><div class=\"line\"><span class=\"comment\"># luna_pinyin.custom.yaml</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 在【地球拼音】裏使用Emoji表情</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 保存到Rime用戶文件夾後，重新部署生效</span></div><div class=\"line\"><span class=\"comment\"># ~/.config/ibus/rime  (linux)</span></div><div class=\"line\"><span class=\"comment\"># ~/Library/Rime       (macos)</span></div><div class=\"line\"><span class=\"comment\"># %APPDATA%\\Rime       (windows)</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">patch:</span></div><div class=\"line\">  schema/dependencies:</div><div class=\"line\"><span class=\"bullet\">    -</span> emoji</div><div class=\"line\"><span class=\"comment\">#  abc_segmentor/extra_tags:</span></div><div class=\"line\"><span class=\"comment\">#    - reverse_lookup</span></div><div class=\"line\"><span class=\"attr\">  reverse_lookup:</span></div><div class=\"line\"><span class=\"attr\">    dictionary:</span> emoji</div><div class=\"line\"><span class=\"attr\">    enable_completion:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    prefix:</span> <span class=\"string\">\"`\"</span></div><div class=\"line\"><span class=\"attr\">    tips:</span> 〔表情〕</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  punctuator:</span></div><div class=\"line\"><span class=\"attr\">    import_preset:</span> symbols</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  recognizer:</span></div><div class=\"line\"><span class=\"attr\">    import_preset:</span> default</div><div class=\"line\"><span class=\"attr\">    patterns:</span></div><div class=\"line\"><span class=\"attr\">      reverse_lookup:</span> <span class=\"string\">\"`[a-z]*'?$\"</span></div><div class=\"line\"><span class=\"attr\">      punct:</span> <span class=\"string\">\"^/([a-z]+|[0-9]0?)$\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>installation.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">distribution_code_name:</span> Squirrel</div><div class=\"line\"><span class=\"attr\">distribution_name:</span> <span class=\"string\">\"鼠鬚管\"</span></div><div class=\"line\"><span class=\"attr\">distribution_version:</span> <span class=\"number\">0.9</span><span class=\"number\">.26</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">install_time:</span> <span class=\"string\">\"Mon Aug  3 15:24:12 2015\"</span></div><div class=\"line\"><span class=\"attr\">installation_id:</span> <span class=\"string\">\"loshine-macbook\"</span></div><div class=\"line\"><span class=\"attr\">rime_version:</span> <span class=\"number\">1.2</span><span class=\"number\">.9</span></div><div class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Users/Loshine/我的坚果云/RimeSync'</span></div></pre></td></tr></table></figure>\n"},{"title":"Kotlin与DataBinding协作","date":"2016-03-08T13:23:10.000Z","toc":true,"description":"DataBinding 是 Google 爹地为我们这群苦逼的 Android 开发者推出的 MVVM 框架。本文解决 Kotlin 和 DataBindin 共用时报错的问题。","_content":"DataBinding 是 Google 爹地为我们这群苦逼的 Android 开发者推出的 MVVM 框架。本文解决 Kotlin 和 DataBindin 共用时报错的问题。\n\n# 如下修改即可\n\napp 的 build.gradle 中添加如下部分\n\n```groovy\ndependencies {\n\t// ...\n\tkapt 'com.android.databinding:compiler:1.0-rc5'//改为对应版本\n}\nkapt {\n\tgenerateStubs = true\n}\n```","source":"_posts/2016-03-08-android-databinding-with-kotlin.md","raw":"---\ntitle: Kotlin与DataBinding协作\ndate: 2016-03-08 21:23:10\ncategory: [技术]\ntags: [Kotlin,Android]\ntoc: true\ndescription: DataBinding 是 Google 爹地为我们这群苦逼的 Android 开发者推出的 MVVM 框架。本文解决 Kotlin 和 DataBindin 共用时报错的问题。\n---\nDataBinding 是 Google 爹地为我们这群苦逼的 Android 开发者推出的 MVVM 框架。本文解决 Kotlin 和 DataBindin 共用时报错的问题。\n\n# 如下修改即可\n\napp 的 build.gradle 中添加如下部分\n\n```groovy\ndependencies {\n\t// ...\n\tkapt 'com.android.databinding:compiler:1.0-rc5'//改为对应版本\n}\nkapt {\n\tgenerateStubs = true\n}\n```","slug":"android-databinding-with-kotlin","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zve000ggy6ewal53kbr","content":"<p>DataBinding 是 Google 爹地为我们这群苦逼的 Android 开发者推出的 MVVM 框架。本文解决 Kotlin 和 DataBindin 共用时报错的问题。</p>\n<h1 id=\"如下修改即可\"><a href=\"#如下修改即可\" class=\"headerlink\" title=\"如下修改即可\"></a>如下修改即可</h1><p>app 的 build.gradle 中添加如下部分</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">\tkapt <span class=\"string\">'com.android.databinding:compiler:1.0-rc5'</span><span class=\"comment\">//改为对应版本</span></div><div class=\"line\">&#125;</div><div class=\"line\">kapt &#123;</div><div class=\"line\">\tgenerateStubs = <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>DataBinding 是 Google 爹地为我们这群苦逼的 Android 开发者推出的 MVVM 框架。本文解决 Kotlin 和 DataBindin 共用时报错的问题。</p>\n<h1 id=\"如下修改即可\"><a href=\"#如下修改即可\" class=\"headerlink\" title=\"如下修改即可\"></a>如下修改即可</h1><p>app 的 build.gradle 中添加如下部分</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\">\tkapt <span class=\"string\">'com.android.databinding:compiler:1.0-rc5'</span><span class=\"comment\">//改为对应版本</span></div><div class=\"line\">&#125;</div><div class=\"line\">kapt &#123;</div><div class=\"line\">\tgenerateStubs = <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Kotlin中实现Parcelable","date":"2015-10-17T03:03:59.000Z","toc":true,"description":"在 Android中，如果需要序列化对象可以选择实现 Serializable 或 Parceable，如果是在使用内存的情况下，Parcelable 的效率比 Serializable 高","_content":"\n> 在Android中，如果需要序列化对象可以选择实现 **Serializable** 或 **Parceable**。如果是在使用内存的情况下，**Parcelable** 的效率比 **Serializable** 高。但 **Parcelable** 不能被持久化存储，此时还是需要实现 **Serializable**。\n\n# Java实现\n\n首先我们看一个普通的 **JavaBean**\n\n```java\n/**\n * 帖子实体类\n * <p/>\n * Created by Loshine on 15/9/8.\n */\npublic class PostEntity {\n\n    /**\n     * 帖子标题\n     */\n    private String name;\n    /**\n     * 帖子类别\n     */\n    private String category;\n    /**\n     * 帖子链接\n     */\n    private String link;\n    /**\n     * 评论数\n     */\n    private String comments;\n    /**\n     * 发布者\n     */\n    private String announcer;\n    /**\n     * 最新回复时间\n     */\n    private String replyTime;\n\n    /*\n     * 省略 getter setter...\n     */\n```\n\n其中的代码都是 **JavaBean** 的属性以及 *getter*、*setter*\n\n如果其实现 **Parcelable**，则是这样的\n\n```java\n/**\n * 帖子实体类\n * <p/>\n * Created by Loshine on 15/9/8.\n */\npublic class PostEntity implements Parcelable {\n\n    /**\n     * 帖子标题\n     */\n    private String name;\n    /**\n     * 帖子类别\n     */\n    private String category;\n    /**\n     * 帖子链接\n     */\n    private String link;\n    /**\n     * 评论数\n     */\n    private String comments;\n    /**\n     * 发布者\n     */\n    private String announcer;\n    /**\n     * 最新回复时间\n     */\n    private String replyTime;\n\n    /*\n     * 省略 getter setter...\n     */\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeString(this.name);\n        dest.writeString(this.category);\n        dest.writeString(this.link);\n        dest.writeString(this.comments);\n        dest.writeString(this.announcer);\n        dest.writeString(this.replyTime);\n    }\n\n    public PostEntity() {\n    }\n\n    protected PostEntity(Parcel in) {\n        this.name = in.readString();\n        this.category = in.readString();\n        this.link = in.readString();\n        this.comments = in.readString();\n        this.announcer = in.readString();\n        this.replyTime = in.readString();\n    }\n\n    public static final Parcelable.Creator<PostEntity> CREATOR = new Parcelable.Creator<PostEntity>() {\n        public PostEntity createFromParcel(Parcel source) {\n            return new PostEntity(source);\n        }\n\n        public PostEntity[] newArray(int size) {\n            return new PostEntity[size];\n        }\n    };\n```\n\n在实现`Parcelable`的时候我们需要重写两个方法\n\n* `public void writeToParcel(Parcel dest, int flags)`\n* `public int describeContents()`\n\n其中`describeContents`只需要返回 **0** 即可\n\n`writeToParcel`方法中我们把需要序列化的属性使用`writeXXX`的方式写入 **Parcel** 。\n\n之后是 **CREATOR** 对象，这个对象负责从 **Parcel** 中读取对象，所以我们需要重写其方法来读取对象\n\n```java\nprotected PostEntity(Parcel in) {\n        this.name = in.readString();\n        this.category = in.readString();\n        this.link = in.readString();\n        this.comments = in.readString();\n        this.announcer = in.readString();\n        this.replyTime = in.readString();\n    }\n\n    public static final Parcelable.Creator<PostEntity> CREATOR = new Parcelable.Creator<PostEntity>() {\n        public PostEntity createFromParcel(Parcel source) {\n            return new PostEntity(source);\n        }\n\n        public PostEntity[] newArray(int size) {\n            return new PostEntity[size];\n        }\n    };\n```\n\n这一段就是其实现方式，可见主要是将对象从 **Parcel** 中读取出来。\n\n# Kotlin实现\n\n看过了冗长的 **Java** 实现方式，我们来看看kotlin是如何实现的吧。\n\n首先使用插件将其转换为 **Kotlin** 文件，并修改其中的错误\n\n```kotlin\nclass PostEntity : Parcelable {\n\n    /**\n     * 帖子标题\n     */\n    var name: String? = null\n    /**\n     * 帖子类别\n     */\n    var category: String? = null\n    /**\n     * 帖子链接\n     */\n    var link: String? = null\n    /**\n     * 评论数\n     */\n    var comments: String? = null\n    /**\n     * 发布者\n     */\n    var announcer: String? = null\n    /**\n     * 最新回复时间\n     */\n    var replyTime: String? = null\n\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeString(this.name)\n        dest.writeString(this.category)\n        dest.writeString(this.link)\n        dest.writeString(this.comments)\n        dest.writeString(this.announcer)\n        dest.writeString(this.replyTime)\n    }\n\n    constructor() {\n    }\n\n    protected constructor(`in`: Parcel) {\n        this.name = `in`.readString()\n        this.category = `in`.readString()\n        this.link = `in`.readString()\n        this.comments = `in`.readString()\n        this.announcer = `in`.readString()\n        this.replyTime = `in`.readString()\n    }\n\n    companion object {\n\n        val CREATOR: Parcelable.Creator<PostEntity> = object : Parcelable.Creator<PostEntity> {\n            override fun createFromParcel(source: Parcel): PostEntity {\n                return PostEntity(source)\n            }\n\n            override fun newArray(size: Int): Array<PostEntity?> {\n                return arrayOfNulls(size)\n            }\n        }\n    }\n}\n```\n\n这就是 **Kotlin** 实现 **Parcelable** 的方式了\n\n# 优化\n\n经过插件转化的 kotlin 代码其实使用的还是 java 的方式和 java 的思想，我们可以将其完全转化为 kotlin 的方式并对其优化\n\n首先把其转化为**数据类**，这样会自动为我们生成\n\n* `equals()/hashCode()`\n* `toString()`\n* `componentN()`\n* `copy()`\n\n我们只需要将其改为这样\n\n```kotlin\ndata class PostEntity(var name: String? = null, /* 帖子标题*/\n                      var category: String? = null, /* 帖子类别 */\n                      var link: String? = null, /* 帖子链接 */\n                      var comments: String? = null, /* 评论数 */\n                      var announcer: String? = null, /* 发布者 */\n                      var replyTime: String? = null /* 最新回复时间 */\n) : Parcelable {\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeString(this.name)\n        dest.writeString(this.category)\n        dest.writeString(this.link)\n        dest.writeString(this.comments)\n        dest.writeString(this.announcer)\n        dest.writeString(this.replyTime)\n    }\n\n    protected constructor(`in`: Parcel) : this() {\n        this.name = `in`.readString()\n        this.category = `in`.readString()\n        this.link = `in`.readString()\n        this.comments = `in`.readString()\n        this.announcer = `in`.readString()\n        this.replyTime = `in`.readString()\n    }\n\n    companion object {\n\n        val CREATOR: Parcelable.Creator<PostEntity> = object : Parcelable.Creator<PostEntity> {\n            override fun createFromParcel(source: Parcel): PostEntity {\n                return PostEntity(source)\n            }\n\n            override fun newArray(size: Int): Array<PostEntity?> {\n                return arrayOfNulls(size)\n            }\n        }\n    }\n}\n```\n\n再之后观察发现，所有的 **Parcelable** 都需要有一个 **CREATOR**\n\n```kotlin\n    companion object {\n\n        val CREATOR: Parcelable.Creator<PostEntity> = object : Parcelable.Creator<PostEntity> {\n            override fun createFromParcel(source: Parcel): PostEntity {\n                return PostEntity(source)\n            }\n\n            override fun newArray(size: Int): Array<PostEntity?> {\n                return arrayOfNulls(size)\n            }\n        }\n    }\n```\n\n此处使用了 **Kotlin** 的*伴生对象*，使得调用 **CREATOR** 类似于 **Java** 中的*静态属性*\n\n可以使用 Kotlin 的函数式编程特性抽取\n\n新建文件`ParcelableExt.kt`\n\n```kotlin\npublic inline fun createParcel<reified T : Parcelable>(crossinline createFromParcel: (Parcel) -> T?): Parcelable.Creator<T> =\n        object : Parcelable.Creator<T> {\n            override fun createFromParcel(source: Parcel): T? = createFromParcel(source)\n            override fun newArray(size: Int): Array<out T?> = arrayOfNulls(size)\n        }\n```\n\n此处使用了 Kotlin 的内联函数，然后我们就可以将 `PostEntity` 精简为如下\n\n```kotlin\ndata class PostEntity(var name: String? = null, /* 帖子标题*/\n                      var category: String? = null, /* 帖子类别 */\n                      var link: String? = null, /* 帖子链接 */\n                      var comments: String? = null, /* 评论数 */\n                      var announcer: String? = null, /* 发布者 */\n                      var replyTime: String? = null /* 最新回复时间 */\n) : Parcelable {\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeString(this.name)\n        dest.writeString(this.category)\n        dest.writeString(this.link)\n        dest.writeString(this.comments)\n        dest.writeString(this.announcer)\n        dest.writeString(this.replyTime)\n    }\n\n    protected constructor(`in`: Parcel) : this() {\n        this.name = `in`.readString()\n        this.category = `in`.readString()\n        this.link = `in`.readString()\n        this.comments = `in`.readString()\n        this.announcer = `in`.readString()\n        this.replyTime = `in`.readString()\n    }\n\n    companion object {\n        val CREATOR = createParcel { PostEntity(it) }\n    }\n}\n```\n\n# 总结\n\n虽然可以直接将 **Java** 文件转化为 **Kotlin** 文件，但这样毕竟没有办法学习到 **Kotlin** 的精髓\n\n使用一门语言就应该按照这门语言的编码风格以及规范去实现，这样才会让我们的学习更加有效率且养成良好的编码习惯\n\n**Kotlin** 是一门典型的函数式编程语言，学习它的风格有利于我们了解函数式编程思想\n\n在实现 **Parceable** 时我们使用了 **Kotlin** 的几个特性\n\n* 数据类\n* 二级构造函数\n* 内联函数\n\n查阅官方文档完成的同时我也学会了新的<del>姿势</del>知识，想一想也有点小激动呢\n","source":"_posts/2015-10-17-implements-parcelable-in-kotlin.md","raw":"---\ntitle:  Kotlin中实现Parcelable\ndate:   2015-10-17 11:03:59\ncategories: [技术]\ntags: [Kotlin,Android]\ntoc: true\ndescription: 在 Android中，如果需要序列化对象可以选择实现 Serializable 或 Parceable，如果是在使用内存的情况下，Parcelable 的效率比 Serializable 高\n---\n\n> 在Android中，如果需要序列化对象可以选择实现 **Serializable** 或 **Parceable**。如果是在使用内存的情况下，**Parcelable** 的效率比 **Serializable** 高。但 **Parcelable** 不能被持久化存储，此时还是需要实现 **Serializable**。\n\n# Java实现\n\n首先我们看一个普通的 **JavaBean**\n\n```java\n/**\n * 帖子实体类\n * <p/>\n * Created by Loshine on 15/9/8.\n */\npublic class PostEntity {\n\n    /**\n     * 帖子标题\n     */\n    private String name;\n    /**\n     * 帖子类别\n     */\n    private String category;\n    /**\n     * 帖子链接\n     */\n    private String link;\n    /**\n     * 评论数\n     */\n    private String comments;\n    /**\n     * 发布者\n     */\n    private String announcer;\n    /**\n     * 最新回复时间\n     */\n    private String replyTime;\n\n    /*\n     * 省略 getter setter...\n     */\n```\n\n其中的代码都是 **JavaBean** 的属性以及 *getter*、*setter*\n\n如果其实现 **Parcelable**，则是这样的\n\n```java\n/**\n * 帖子实体类\n * <p/>\n * Created by Loshine on 15/9/8.\n */\npublic class PostEntity implements Parcelable {\n\n    /**\n     * 帖子标题\n     */\n    private String name;\n    /**\n     * 帖子类别\n     */\n    private String category;\n    /**\n     * 帖子链接\n     */\n    private String link;\n    /**\n     * 评论数\n     */\n    private String comments;\n    /**\n     * 发布者\n     */\n    private String announcer;\n    /**\n     * 最新回复时间\n     */\n    private String replyTime;\n\n    /*\n     * 省略 getter setter...\n     */\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeString(this.name);\n        dest.writeString(this.category);\n        dest.writeString(this.link);\n        dest.writeString(this.comments);\n        dest.writeString(this.announcer);\n        dest.writeString(this.replyTime);\n    }\n\n    public PostEntity() {\n    }\n\n    protected PostEntity(Parcel in) {\n        this.name = in.readString();\n        this.category = in.readString();\n        this.link = in.readString();\n        this.comments = in.readString();\n        this.announcer = in.readString();\n        this.replyTime = in.readString();\n    }\n\n    public static final Parcelable.Creator<PostEntity> CREATOR = new Parcelable.Creator<PostEntity>() {\n        public PostEntity createFromParcel(Parcel source) {\n            return new PostEntity(source);\n        }\n\n        public PostEntity[] newArray(int size) {\n            return new PostEntity[size];\n        }\n    };\n```\n\n在实现`Parcelable`的时候我们需要重写两个方法\n\n* `public void writeToParcel(Parcel dest, int flags)`\n* `public int describeContents()`\n\n其中`describeContents`只需要返回 **0** 即可\n\n`writeToParcel`方法中我们把需要序列化的属性使用`writeXXX`的方式写入 **Parcel** 。\n\n之后是 **CREATOR** 对象，这个对象负责从 **Parcel** 中读取对象，所以我们需要重写其方法来读取对象\n\n```java\nprotected PostEntity(Parcel in) {\n        this.name = in.readString();\n        this.category = in.readString();\n        this.link = in.readString();\n        this.comments = in.readString();\n        this.announcer = in.readString();\n        this.replyTime = in.readString();\n    }\n\n    public static final Parcelable.Creator<PostEntity> CREATOR = new Parcelable.Creator<PostEntity>() {\n        public PostEntity createFromParcel(Parcel source) {\n            return new PostEntity(source);\n        }\n\n        public PostEntity[] newArray(int size) {\n            return new PostEntity[size];\n        }\n    };\n```\n\n这一段就是其实现方式，可见主要是将对象从 **Parcel** 中读取出来。\n\n# Kotlin实现\n\n看过了冗长的 **Java** 实现方式，我们来看看kotlin是如何实现的吧。\n\n首先使用插件将其转换为 **Kotlin** 文件，并修改其中的错误\n\n```kotlin\nclass PostEntity : Parcelable {\n\n    /**\n     * 帖子标题\n     */\n    var name: String? = null\n    /**\n     * 帖子类别\n     */\n    var category: String? = null\n    /**\n     * 帖子链接\n     */\n    var link: String? = null\n    /**\n     * 评论数\n     */\n    var comments: String? = null\n    /**\n     * 发布者\n     */\n    var announcer: String? = null\n    /**\n     * 最新回复时间\n     */\n    var replyTime: String? = null\n\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeString(this.name)\n        dest.writeString(this.category)\n        dest.writeString(this.link)\n        dest.writeString(this.comments)\n        dest.writeString(this.announcer)\n        dest.writeString(this.replyTime)\n    }\n\n    constructor() {\n    }\n\n    protected constructor(`in`: Parcel) {\n        this.name = `in`.readString()\n        this.category = `in`.readString()\n        this.link = `in`.readString()\n        this.comments = `in`.readString()\n        this.announcer = `in`.readString()\n        this.replyTime = `in`.readString()\n    }\n\n    companion object {\n\n        val CREATOR: Parcelable.Creator<PostEntity> = object : Parcelable.Creator<PostEntity> {\n            override fun createFromParcel(source: Parcel): PostEntity {\n                return PostEntity(source)\n            }\n\n            override fun newArray(size: Int): Array<PostEntity?> {\n                return arrayOfNulls(size)\n            }\n        }\n    }\n}\n```\n\n这就是 **Kotlin** 实现 **Parcelable** 的方式了\n\n# 优化\n\n经过插件转化的 kotlin 代码其实使用的还是 java 的方式和 java 的思想，我们可以将其完全转化为 kotlin 的方式并对其优化\n\n首先把其转化为**数据类**，这样会自动为我们生成\n\n* `equals()/hashCode()`\n* `toString()`\n* `componentN()`\n* `copy()`\n\n我们只需要将其改为这样\n\n```kotlin\ndata class PostEntity(var name: String? = null, /* 帖子标题*/\n                      var category: String? = null, /* 帖子类别 */\n                      var link: String? = null, /* 帖子链接 */\n                      var comments: String? = null, /* 评论数 */\n                      var announcer: String? = null, /* 发布者 */\n                      var replyTime: String? = null /* 最新回复时间 */\n) : Parcelable {\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeString(this.name)\n        dest.writeString(this.category)\n        dest.writeString(this.link)\n        dest.writeString(this.comments)\n        dest.writeString(this.announcer)\n        dest.writeString(this.replyTime)\n    }\n\n    protected constructor(`in`: Parcel) : this() {\n        this.name = `in`.readString()\n        this.category = `in`.readString()\n        this.link = `in`.readString()\n        this.comments = `in`.readString()\n        this.announcer = `in`.readString()\n        this.replyTime = `in`.readString()\n    }\n\n    companion object {\n\n        val CREATOR: Parcelable.Creator<PostEntity> = object : Parcelable.Creator<PostEntity> {\n            override fun createFromParcel(source: Parcel): PostEntity {\n                return PostEntity(source)\n            }\n\n            override fun newArray(size: Int): Array<PostEntity?> {\n                return arrayOfNulls(size)\n            }\n        }\n    }\n}\n```\n\n再之后观察发现，所有的 **Parcelable** 都需要有一个 **CREATOR**\n\n```kotlin\n    companion object {\n\n        val CREATOR: Parcelable.Creator<PostEntity> = object : Parcelable.Creator<PostEntity> {\n            override fun createFromParcel(source: Parcel): PostEntity {\n                return PostEntity(source)\n            }\n\n            override fun newArray(size: Int): Array<PostEntity?> {\n                return arrayOfNulls(size)\n            }\n        }\n    }\n```\n\n此处使用了 **Kotlin** 的*伴生对象*，使得调用 **CREATOR** 类似于 **Java** 中的*静态属性*\n\n可以使用 Kotlin 的函数式编程特性抽取\n\n新建文件`ParcelableExt.kt`\n\n```kotlin\npublic inline fun createParcel<reified T : Parcelable>(crossinline createFromParcel: (Parcel) -> T?): Parcelable.Creator<T> =\n        object : Parcelable.Creator<T> {\n            override fun createFromParcel(source: Parcel): T? = createFromParcel(source)\n            override fun newArray(size: Int): Array<out T?> = arrayOfNulls(size)\n        }\n```\n\n此处使用了 Kotlin 的内联函数，然后我们就可以将 `PostEntity` 精简为如下\n\n```kotlin\ndata class PostEntity(var name: String? = null, /* 帖子标题*/\n                      var category: String? = null, /* 帖子类别 */\n                      var link: String? = null, /* 帖子链接 */\n                      var comments: String? = null, /* 评论数 */\n                      var announcer: String? = null, /* 发布者 */\n                      var replyTime: String? = null /* 最新回复时间 */\n) : Parcelable {\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeString(this.name)\n        dest.writeString(this.category)\n        dest.writeString(this.link)\n        dest.writeString(this.comments)\n        dest.writeString(this.announcer)\n        dest.writeString(this.replyTime)\n    }\n\n    protected constructor(`in`: Parcel) : this() {\n        this.name = `in`.readString()\n        this.category = `in`.readString()\n        this.link = `in`.readString()\n        this.comments = `in`.readString()\n        this.announcer = `in`.readString()\n        this.replyTime = `in`.readString()\n    }\n\n    companion object {\n        val CREATOR = createParcel { PostEntity(it) }\n    }\n}\n```\n\n# 总结\n\n虽然可以直接将 **Java** 文件转化为 **Kotlin** 文件，但这样毕竟没有办法学习到 **Kotlin** 的精髓\n\n使用一门语言就应该按照这门语言的编码风格以及规范去实现，这样才会让我们的学习更加有效率且养成良好的编码习惯\n\n**Kotlin** 是一门典型的函数式编程语言，学习它的风格有利于我们了解函数式编程思想\n\n在实现 **Parceable** 时我们使用了 **Kotlin** 的几个特性\n\n* 数据类\n* 二级构造函数\n* 内联函数\n\n查阅官方文档完成的同时我也学会了新的<del>姿势</del>知识，想一想也有点小激动呢\n","slug":"implements-parcelable-in-kotlin","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvg000igy6et88mrqrx","content":"<blockquote>\n<p>在Android中，如果需要序列化对象可以选择实现 <strong>Serializable</strong> 或 <strong>Parceable</strong>。如果是在使用内存的情况下，<strong>Parcelable</strong> 的效率比 <strong>Serializable</strong> 高。但 <strong>Parcelable</strong> 不能被持久化存储，此时还是需要实现 <strong>Serializable</strong>。</p>\n</blockquote>\n<h1 id=\"Java实现\"><a href=\"#Java实现\" class=\"headerlink\" title=\"Java实现\"></a>Java实现</h1><p>首先我们看一个普通的 <strong>JavaBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 帖子实体类</div><div class=\"line\"> * &lt;p/&gt;</div><div class=\"line\"> * Created by Loshine on 15/9/8.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子标题</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子类别</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String category;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子链接</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String link;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 评论数</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String comments;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 发布者</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String announcer;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 最新回复时间</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String replyTime;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * 省略 getter setter...</div><div class=\"line\">     */</div></pre></td></tr></table></figure>\n<p>其中的代码都是 <strong>JavaBean</strong> 的属性以及 <em>getter</em>、<em>setter</em></p>\n<p>如果其实现 <strong>Parcelable</strong>，则是这样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 帖子实体类</div><div class=\"line\"> * &lt;p/&gt;</div><div class=\"line\"> * Created by Loshine on 15/9/8.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子标题</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子类别</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String category;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子链接</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String link;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 评论数</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String comments;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 发布者</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String announcer;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 最新回复时间</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> String replyTime;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * 省略 getter setter...</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.category);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.link);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.comments);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.announcer);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.replyTime);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PostEntity</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PostEntity</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = in.readString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;PostEntity&gt; CREATOR = <span class=\"keyword\">new</span> Parcelable.Creator&lt;PostEntity&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PostEntity <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PostEntity(source);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> PostEntity[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PostEntity[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<p>在实现<code>Parcelable</code>的时候我们需要重写两个方法</p>\n<ul>\n<li><code>public void writeToParcel(Parcel dest, int flags)</code></li>\n<li><code>public int describeContents()</code></li>\n</ul>\n<p>其中<code>describeContents</code>只需要返回 <strong>0</strong> 即可</p>\n<p><code>writeToParcel</code>方法中我们把需要序列化的属性使用<code>writeXXX</code>的方式写入 <strong>Parcel</strong> 。</p>\n<p>之后是 <strong>CREATOR</strong> 对象，这个对象负责从 <strong>Parcel</strong> 中读取对象，所以我们需要重写其方法来读取对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PostEntity</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = in.readString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;PostEntity&gt; CREATOR = <span class=\"keyword\">new</span> Parcelable.Creator&lt;PostEntity&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PostEntity <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PostEntity(source);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> PostEntity[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PostEntity[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<p>这一段就是其实现方式，可见主要是将对象从 <strong>Parcel</strong> 中读取出来。</p>\n<h1 id=\"Kotlin实现\"><a href=\"#Kotlin实现\" class=\"headerlink\" title=\"Kotlin实现\"></a>Kotlin实现</h1><p>看过了冗长的 <strong>Java</strong> 实现方式，我们来看看kotlin是如何实现的吧。</p>\n<p>首先使用插件将其转换为 <strong>Kotlin</strong> 文件，并修改其中的错误</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span> : <span class=\"type\">Parcelable &#123;</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子标题</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> name: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子类别</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> category: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 帖子链接</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> link: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 评论数</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> comments: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 发布者</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> announcer: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 最新回复时间</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> replyTime: String? = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(dest: <span class=\"type\">Parcel</span>, flags: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.category)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.link)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.comments)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.announcer)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.replyTime)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">constructor</span>(`<span class=\"keyword\">in</span>`: Parcel) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class=\"keyword\">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(source: <span class=\"type\">Parcel</span>)</span></span>: PostEntity &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> PostEntity(source)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> arrayOfNulls(size)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这就是 <strong>Kotlin</strong> 实现 <strong>Parcelable</strong> 的方式了</p>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><p>经过插件转化的 kotlin 代码其实使用的还是 java 的方式和 java 的思想，我们可以将其完全转化为 kotlin 的方式并对其优化</p>\n<p>首先把其转化为<strong>数据类</strong>，这样会自动为我们生成</p>\n<ul>\n<li><code>equals()/hashCode()</code></li>\n<li><code>toString()</code></li>\n<li><code>componentN()</code></li>\n<li><code>copy()</code></li>\n</ul>\n<p>我们只需要将其改为这样</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span></span>(<span class=\"keyword\">var</span> name: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子标题*/</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> category: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子类别 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> link: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子链接 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> comments: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 评论数 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> announcer: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 发布者 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> replyTime: String? = <span class=\"literal\">null</span> <span class=\"comment\">/* 最新回复时间 */</span></div><div class=\"line\">) : Parcelable &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(dest: <span class=\"type\">Parcel</span>, flags: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.category)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.link)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.comments)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.announcer)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.replyTime)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">constructor</span>(`<span class=\"keyword\">in</span>`: Parcel) : <span class=\"keyword\">this</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class=\"keyword\">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(source: <span class=\"type\">Parcel</span>)</span></span>: PostEntity &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> PostEntity(source)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> arrayOfNulls(size)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再之后观察发现，所有的 <strong>Parcelable</strong> 都需要有一个 <strong>CREATOR</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class=\"keyword\">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(source: <span class=\"type\">Parcel</span>)</span></span>: PostEntity &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> PostEntity(source)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> arrayOfNulls(size)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此处使用了 <strong>Kotlin</strong> 的<em>伴生对象</em>，使得调用 <strong>CREATOR</strong> 类似于 <strong>Java</strong> 中的<em>静态属性</em></p>\n<p>可以使用 Kotlin 的函数式编程特性抽取</p>\n<p>新建文件<code>ParcelableExt.kt</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> createParcel<span class=\"type\">&lt;<span class=\"keyword\">reified</span> T : Parcelable&gt;</span><span class=\"params\">(<span class=\"keyword\">crossinline</span> createFromParcel: (<span class=\"type\">Parcel</span>)</span></span> -&gt; T?): Parcelable.Creator&lt;T&gt; =</div><div class=\"line\">        <span class=\"keyword\">object</span> : Parcelable.Creator&lt;T&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(source: <span class=\"type\">Parcel</span>)</span></span>: T? = createFromParcel(source)</div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;<span class=\"keyword\">out</span> T?&gt; = arrayOfNulls(size)</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>此处使用了 Kotlin 的内联函数，然后我们就可以将 <code>PostEntity</code> 精简为如下</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span></span>(<span class=\"keyword\">var</span> name: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子标题*/</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> category: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子类别 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> link: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子链接 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> comments: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 评论数 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> announcer: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 发布者 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> replyTime: String? = <span class=\"literal\">null</span> <span class=\"comment\">/* 最新回复时间 */</span></div><div class=\"line\">) : Parcelable &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(dest: <span class=\"type\">Parcel</span>, flags: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.category)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.link)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.comments)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.announcer)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.replyTime)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">constructor</span>(`<span class=\"keyword\">in</span>`: Parcel) : <span class=\"keyword\">this</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> CREATOR = createParcel &#123; PostEntity(it) &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>虽然可以直接将 <strong>Java</strong> 文件转化为 <strong>Kotlin</strong> 文件，但这样毕竟没有办法学习到 <strong>Kotlin</strong> 的精髓</p>\n<p>使用一门语言就应该按照这门语言的编码风格以及规范去实现，这样才会让我们的学习更加有效率且养成良好的编码习惯</p>\n<p><strong>Kotlin</strong> 是一门典型的函数式编程语言，学习它的风格有利于我们了解函数式编程思想</p>\n<p>在实现 <strong>Parceable</strong> 时我们使用了 <strong>Kotlin</strong> 的几个特性</p>\n<ul>\n<li>数据类</li>\n<li>二级构造函数</li>\n<li>内联函数</li>\n</ul>\n<p>查阅官方文档完成的同时我也学会了新的<del>姿势</del>知识，想一想也有点小激动呢</p>\n","excerpt":"","more":"<blockquote>\n<p>在Android中，如果需要序列化对象可以选择实现 <strong>Serializable</strong> 或 <strong>Parceable</strong>。如果是在使用内存的情况下，<strong>Parcelable</strong> 的效率比 <strong>Serializable</strong> 高。但 <strong>Parcelable</strong> 不能被持久化存储，此时还是需要实现 <strong>Serializable</strong>。</p>\n</blockquote>\n<h1 id=\"Java实现\"><a href=\"#Java实现\" class=\"headerlink\" title=\"Java实现\"></a>Java实现</h1><p>首先我们看一个普通的 <strong>JavaBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 帖子实体类</div><div class=\"line\"> * &lt;p/&gt;</div><div class=\"line\"> * Created by Loshine on 15/9/8.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子标题</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子类别</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String category;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子链接</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String link;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 评论数</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String comments;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 发布者</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String announcer;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 最新回复时间</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String replyTime;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * 省略 getter setter...</div><div class=\"line\">     */</span></div></pre></td></tr></table></figure>\n<p>其中的代码都是 <strong>JavaBean</strong> 的属性以及 <em>getter</em>、<em>setter</em></p>\n<p>如果其实现 <strong>Parcelable</strong>，则是这样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 帖子实体类</div><div class=\"line\"> * &lt;p/&gt;</div><div class=\"line\"> * Created by Loshine on 15/9/8.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子标题</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子类别</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String category;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子链接</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String link;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 评论数</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String comments;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 发布者</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String announcer;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 最新回复时间</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String replyTime;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * 省略 getter setter...</div><div class=\"line\">     */</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.category);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.link);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.comments);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.announcer);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.replyTime);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PostEntity</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PostEntity</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = in.readString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;PostEntity&gt; CREATOR = <span class=\"keyword\">new</span> Parcelable.Creator&lt;PostEntity&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PostEntity <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PostEntity(source);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> PostEntity[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PostEntity[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<p>在实现<code>Parcelable</code>的时候我们需要重写两个方法</p>\n<ul>\n<li><code>public void writeToParcel(Parcel dest, int flags)</code></li>\n<li><code>public int describeContents()</code></li>\n</ul>\n<p>其中<code>describeContents</code>只需要返回 <strong>0</strong> 即可</p>\n<p><code>writeToParcel</code>方法中我们把需要序列化的属性使用<code>writeXXX</code>的方式写入 <strong>Parcel</strong> 。</p>\n<p>之后是 <strong>CREATOR</strong> 对象，这个对象负责从 <strong>Parcel</strong> 中读取对象，所以我们需要重写其方法来读取对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PostEntity</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = in.readString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;PostEntity&gt; CREATOR = <span class=\"keyword\">new</span> Parcelable.Creator&lt;PostEntity&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PostEntity <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PostEntity(source);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> PostEntity[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PostEntity[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<p>这一段就是其实现方式，可见主要是将对象从 <strong>Parcel</strong> 中读取出来。</p>\n<h1 id=\"Kotlin实现\"><a href=\"#Kotlin实现\" class=\"headerlink\" title=\"Kotlin实现\"></a>Kotlin实现</h1><p>看过了冗长的 <strong>Java</strong> 实现方式，我们来看看kotlin是如何实现的吧。</p>\n<p>首先使用插件将其转换为 <strong>Kotlin</strong> 文件，并修改其中的错误</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span> : <span class=\"type\">Parcelable &#123;</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子标题</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> name: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子类别</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> category: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 帖子链接</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> link: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 评论数</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> comments: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 发布者</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> announcer: String? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 最新回复时间</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> replyTime: String? = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(dest: <span class=\"type\">Parcel</span>, flags: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.category)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.link)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.comments)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.announcer)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.replyTime)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">constructor</span>(`<span class=\"keyword\">in</span>`: Parcel) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class=\"keyword\">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(source: <span class=\"type\">Parcel</span>)</span></span>: PostEntity &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> PostEntity(source)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> arrayOfNulls(size)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这就是 <strong>Kotlin</strong> 实现 <strong>Parcelable</strong> 的方式了</p>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><p>经过插件转化的 kotlin 代码其实使用的还是 java 的方式和 java 的思想，我们可以将其完全转化为 kotlin 的方式并对其优化</p>\n<p>首先把其转化为<strong>数据类</strong>，这样会自动为我们生成</p>\n<ul>\n<li><code>equals()/hashCode()</code></li>\n<li><code>toString()</code></li>\n<li><code>componentN()</code></li>\n<li><code>copy()</code></li>\n</ul>\n<p>我们只需要将其改为这样</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span></span>(<span class=\"keyword\">var</span> name: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子标题*/</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> category: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子类别 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> link: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子链接 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> comments: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 评论数 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> announcer: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 发布者 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> replyTime: String? = <span class=\"literal\">null</span> <span class=\"comment\">/* 最新回复时间 */</span></div><div class=\"line\">) : Parcelable &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(dest: <span class=\"type\">Parcel</span>, flags: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.category)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.link)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.comments)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.announcer)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.replyTime)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">constructor</span>(`<span class=\"keyword\">in</span>`: Parcel) : <span class=\"keyword\">this</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class=\"keyword\">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(source: <span class=\"type\">Parcel</span>)</span></span>: PostEntity &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> PostEntity(source)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> arrayOfNulls(size)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再之后观察发现，所有的 <strong>Parcelable</strong> 都需要有一个 <strong>CREATOR</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class=\"keyword\">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(source: <span class=\"type\">Parcel</span>)</span></span>: PostEntity &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> PostEntity(source)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> arrayOfNulls(size)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此处使用了 <strong>Kotlin</strong> 的<em>伴生对象</em>，使得调用 <strong>CREATOR</strong> 类似于 <strong>Java</strong> 中的<em>静态属性</em></p>\n<p>可以使用 Kotlin 的函数式编程特性抽取</p>\n<p>新建文件<code>ParcelableExt.kt</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> createParcel<span class=\"type\">&lt;<span class=\"keyword\">reified</span> T : Parcelable&gt;</span><span class=\"params\">(<span class=\"keyword\">crossinline</span> createFromParcel: (<span class=\"type\">Parcel</span>)</span></span> -&gt; T?): Parcelable.Creator&lt;T&gt; =</div><div class=\"line\">        <span class=\"keyword\">object</span> : Parcelable.Creator&lt;T&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(source: <span class=\"type\">Parcel</span>)</span></span>: T? = createFromParcel(source)</div><div class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;<span class=\"keyword\">out</span> T?&gt; = arrayOfNulls(size)</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>此处使用了 Kotlin 的内联函数，然后我们就可以将 <code>PostEntity</code> 精简为如下</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEntity</span></span>(<span class=\"keyword\">var</span> name: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子标题*/</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> category: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子类别 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> link: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 帖子链接 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> comments: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 评论数 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> announcer: String? = <span class=\"literal\">null</span>, <span class=\"comment\">/* 发布者 */</span></div><div class=\"line\">                      <span class=\"keyword\">var</span> replyTime: String? = <span class=\"literal\">null</span> <span class=\"comment\">/* 最新回复时间 */</span></div><div class=\"line\">) : Parcelable &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(dest: <span class=\"type\">Parcel</span>, flags: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.category)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.link)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.comments)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.announcer)</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.replyTime)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">constructor</span>(`<span class=\"keyword\">in</span>`: Parcel) : <span class=\"keyword\">this</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.category = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.link = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.comments = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.announcer = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">        <span class=\"keyword\">this</span>.replyTime = `<span class=\"keyword\">in</span>`.readString()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> CREATOR = createParcel &#123; PostEntity(it) &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>虽然可以直接将 <strong>Java</strong> 文件转化为 <strong>Kotlin</strong> 文件，但这样毕竟没有办法学习到 <strong>Kotlin</strong> 的精髓</p>\n<p>使用一门语言就应该按照这门语言的编码风格以及规范去实现，这样才会让我们的学习更加有效率且养成良好的编码习惯</p>\n<p><strong>Kotlin</strong> 是一门典型的函数式编程语言，学习它的风格有利于我们了解函数式编程思想</p>\n<p>在实现 <strong>Parceable</strong> 时我们使用了 <strong>Kotlin</strong> 的几个特性</p>\n<ul>\n<li>数据类</li>\n<li>二级构造函数</li>\n<li>内联函数</li>\n</ul>\n<p>查阅官方文档完成的同时我也学会了新的<del>姿势</del>知识，想一想也有点小激动呢</p>\n"},{"title":"Kotlin中的委托属性","date":"2016-03-01T01:29:34.000Z","toc":true,"description":"Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的委托属性这一特性。","_content":"> Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的**委托属性**这一特性。\n\n# 委托属性(Delegated Properties)\n\n我们先看看官网的定义：\n\n> 有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：\n>\n> - 延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。\n> - 可控性（observable properties）: 监听器得到关于这个特性变化的通知，\n> - 把所有特性储存在一个映射结构中，而不是分开每一条。\n>\n> 为了支持这些(或者其他)例子，Kotlin 采用 委托属性。\n\n简言之就是*简化手动实现的属性，将其抽象出一个库*。\n\n# 如何使用\n\n## 定义一个委托\n\nKotlin 中有两种属性：用`var`修饰的可变属性和由`val`修饰的只读属性。由`val`修饰的只读属性使用的委托需要实现`ReadOnlyProperty`，而`var`修饰的可变属性则需要实现`ReadWriteProperty`\n\n在调用被委托的属性的`getter`和`setter`时，对应操作会被委托给`getValue()`以及`setValue()`。\n\n如实现一个最简单的委托`Delegate`：\n\n```kotlin\nclass Delegate {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n    }\n\n    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n        println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n    }\n}\n```\n\n## 使用定义好的委托属性\n\n语法为`val/var <property name>: <Type> by <expression>`\n\n```kotlin\nclass Example {\n    var p: String by Delegate()\n}\n```\n\n`by`后面的是委托表达式，我们调用这个对象并使用属性：\n\n```kotlin\nval e = Example()\nprintln(e.p)\n\ne.p = \"NEW\"\n```\n\n打印结果为：\n\n```bash\nExample@33a17727, thank you for delegating 'p' to me!\nNEW has been assigned to 'p' in Example@33a17727.\n```\n\n如上可知，`thisRef`对应的是拥有该被委托属性的对象实例，`property`则是属性，`value`是调用`setter`时的传入值。\n\n# 实例讲解\n\n## lazy 懒加载\n\nKotlin 标准库自带的**懒加载委托**，在属性第一次被使用时才进行初始化。\n\n函数`lazy()`接受一个 lambda 然后返回一个可以作为委托`Lazy<T>` 实例来实现延迟属性: 第一个调用`getter`执行变量传递到`lazy()`并记录结果, 后来的`getter`调用只会返回记录的结果。\n\n```kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n\n其打印结果：\n\n```bash\ncomputed!   # 第一次使用时先初始化\nHello       # getter\nHello       # 后续都只会调用 getter\n```\n\n**懒加载委托**在实际编码中应用十分广泛，比如 Android 中我们可以把很多在`OnCreate`中需要进行的初始化操作使用**懒加载委托**来实现。\n\n## 使用委托操作 SharedPreferences\n\n本例出自《Kotlin for Android Developer》，使用了`when`表达式和委托属性巧妙地使得`SharedPrefences`的读写变得十分简便\n\n```kotlin\nclass Preference<T>(val context: Context, val name: String, val default: T) : ReadWriteProperty<Any?, T> {\n\n    val prefs by lazy { context.getSharedPreferences(\"default\", Context.MODE_PRIVATE) }\n\n    override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        return findPreference(name, default)\n    }\n\n    override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        putPreference(name, value)\n    }\n\n    private fun <U> findPreference(name: String, default: U): U = with(prefs) {\n        val res: Any = when (default) {\n            is Long -> getLong(name, default)\n            is String -> getString(name, default)\n            is Int -> getInt(name, default)\n            is Boolean -> getBoolean(name, default)\n            is Float -> getFloat(name, default)\n            else -> throw IllegalArgumentException(\"This type can be saved into Preferences\")\n        }\n\n        res as U\n    }\n\n    private fun <U> putPreference(name: String, value: U) = with(prefs.edit()) {\n        when (value) {\n            is Long -> putLong(name, value)\n            is String -> putString(name, value)\n            is Int -> putInt(name, value)\n            is Boolean -> putBoolean(name, value)\n            is Float -> putFloat(name, value)\n            else -> throw IllegalArgumentException(\"This type can be saved into Preferences\")\n        }.apply()\n    }\n}\n```\n\n在代码中我们可以如下使用\n\n```kotlin\nclass WhateverActivity : Activity() {\n    var aInt: Int by Preference(this, \"aInt\", 0)\n\n    fun whatever() {\n        println(aInt) // 会从 SharedPreference 取这个数据\n        aInt = 9 // 会将这个数据写入 SharedPreference\n    }\n}\n```\n\n从此操作`SharedPreferences`变得如此简单 ~\n\n## 简单实现一个 KotterKnife\n\nKotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。\n\nKotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能\n\n### 实现\n\n我们平时是这样初始化 View 的\n\n```kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    val textView = findViewById(R.id.text_view) as TextView\n}\n```\n\n考虑到通常我们在`onCreate`方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。\n\n```kotlin\nval mTextView by lazy {\n    findViewById(R.id.text_view) as TextView\n}\n```\n\n对其抽取简化\n\n```kotlin\n@Suppress(\"UNCHECKED_CAST\")\nfun <V : View> Activity.bindView(id: Int): Lazy<V> = lazy {\n    viewFinder(id) as V\n}\n\nprivate val Activity.viewFinder: Activity.(Int) -> View?\n    get() = { findViewById(it) }\n```\n\n之后我们就可以在 Activity 中这样注入 View 了\n\n```kotlin\nval mTextView by bindView<TextView>(R.id.text_view)\n```\n\n如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 [KotterKnife源码](https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt)。\n\n# 小结\n\n本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的`getter`、`setter`直接绑定所以使用起来也十分灵活方便。\n\n总而言之：**这真是极好的**。\n","source":"_posts/2016-03-01-delegated-properties-in-kotlin.md","raw":"---\ntitle: Kotlin中的委托属性\ndate: 2016-03-01 09:29:34\ncategory: [技术]\ntags: [Kotlin,Android]\ntoc: true\ndescription: Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的委托属性这一特性。\n---\n> Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的**委托属性**这一特性。\n\n# 委托属性(Delegated Properties)\n\n我们先看看官网的定义：\n\n> 有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：\n>\n> - 延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。\n> - 可控性（observable properties）: 监听器得到关于这个特性变化的通知，\n> - 把所有特性储存在一个映射结构中，而不是分开每一条。\n>\n> 为了支持这些(或者其他)例子，Kotlin 采用 委托属性。\n\n简言之就是*简化手动实现的属性，将其抽象出一个库*。\n\n# 如何使用\n\n## 定义一个委托\n\nKotlin 中有两种属性：用`var`修饰的可变属性和由`val`修饰的只读属性。由`val`修饰的只读属性使用的委托需要实现`ReadOnlyProperty`，而`var`修饰的可变属性则需要实现`ReadWriteProperty`\n\n在调用被委托的属性的`getter`和`setter`时，对应操作会被委托给`getValue()`以及`setValue()`。\n\n如实现一个最简单的委托`Delegate`：\n\n```kotlin\nclass Delegate {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n    }\n\n    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n        println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n    }\n}\n```\n\n## 使用定义好的委托属性\n\n语法为`val/var <property name>: <Type> by <expression>`\n\n```kotlin\nclass Example {\n    var p: String by Delegate()\n}\n```\n\n`by`后面的是委托表达式，我们调用这个对象并使用属性：\n\n```kotlin\nval e = Example()\nprintln(e.p)\n\ne.p = \"NEW\"\n```\n\n打印结果为：\n\n```bash\nExample@33a17727, thank you for delegating 'p' to me!\nNEW has been assigned to 'p' in Example@33a17727.\n```\n\n如上可知，`thisRef`对应的是拥有该被委托属性的对象实例，`property`则是属性，`value`是调用`setter`时的传入值。\n\n# 实例讲解\n\n## lazy 懒加载\n\nKotlin 标准库自带的**懒加载委托**，在属性第一次被使用时才进行初始化。\n\n函数`lazy()`接受一个 lambda 然后返回一个可以作为委托`Lazy<T>` 实例来实现延迟属性: 第一个调用`getter`执行变量传递到`lazy()`并记录结果, 后来的`getter`调用只会返回记录的结果。\n\n```kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n\n其打印结果：\n\n```bash\ncomputed!   # 第一次使用时先初始化\nHello       # getter\nHello       # 后续都只会调用 getter\n```\n\n**懒加载委托**在实际编码中应用十分广泛，比如 Android 中我们可以把很多在`OnCreate`中需要进行的初始化操作使用**懒加载委托**来实现。\n\n## 使用委托操作 SharedPreferences\n\n本例出自《Kotlin for Android Developer》，使用了`when`表达式和委托属性巧妙地使得`SharedPrefences`的读写变得十分简便\n\n```kotlin\nclass Preference<T>(val context: Context, val name: String, val default: T) : ReadWriteProperty<Any?, T> {\n\n    val prefs by lazy { context.getSharedPreferences(\"default\", Context.MODE_PRIVATE) }\n\n    override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        return findPreference(name, default)\n    }\n\n    override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        putPreference(name, value)\n    }\n\n    private fun <U> findPreference(name: String, default: U): U = with(prefs) {\n        val res: Any = when (default) {\n            is Long -> getLong(name, default)\n            is String -> getString(name, default)\n            is Int -> getInt(name, default)\n            is Boolean -> getBoolean(name, default)\n            is Float -> getFloat(name, default)\n            else -> throw IllegalArgumentException(\"This type can be saved into Preferences\")\n        }\n\n        res as U\n    }\n\n    private fun <U> putPreference(name: String, value: U) = with(prefs.edit()) {\n        when (value) {\n            is Long -> putLong(name, value)\n            is String -> putString(name, value)\n            is Int -> putInt(name, value)\n            is Boolean -> putBoolean(name, value)\n            is Float -> putFloat(name, value)\n            else -> throw IllegalArgumentException(\"This type can be saved into Preferences\")\n        }.apply()\n    }\n}\n```\n\n在代码中我们可以如下使用\n\n```kotlin\nclass WhateverActivity : Activity() {\n    var aInt: Int by Preference(this, \"aInt\", 0)\n\n    fun whatever() {\n        println(aInt) // 会从 SharedPreference 取这个数据\n        aInt = 9 // 会将这个数据写入 SharedPreference\n    }\n}\n```\n\n从此操作`SharedPreferences`变得如此简单 ~\n\n## 简单实现一个 KotterKnife\n\nKotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。\n\nKotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能\n\n### 实现\n\n我们平时是这样初始化 View 的\n\n```kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    val textView = findViewById(R.id.text_view) as TextView\n}\n```\n\n考虑到通常我们在`onCreate`方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。\n\n```kotlin\nval mTextView by lazy {\n    findViewById(R.id.text_view) as TextView\n}\n```\n\n对其抽取简化\n\n```kotlin\n@Suppress(\"UNCHECKED_CAST\")\nfun <V : View> Activity.bindView(id: Int): Lazy<V> = lazy {\n    viewFinder(id) as V\n}\n\nprivate val Activity.viewFinder: Activity.(Int) -> View?\n    get() = { findViewById(it) }\n```\n\n之后我们就可以在 Activity 中这样注入 View 了\n\n```kotlin\nval mTextView by bindView<TextView>(R.id.text_view)\n```\n\n如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 [KotterKnife源码](https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt)。\n\n# 小结\n\n本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的`getter`、`setter`直接绑定所以使用起来也十分灵活方便。\n\n总而言之：**这真是极好的**。\n","slug":"delegated-properties-in-kotlin","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvj000lgy6evhwdyb04","content":"<blockquote>\n<p>Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的<strong>委托属性</strong>这一特性。</p>\n</blockquote>\n<h1 id=\"委托属性-Delegated-Properties\"><a href=\"#委托属性-Delegated-Properties\" class=\"headerlink\" title=\"委托属性(Delegated Properties)\"></a>委托属性(Delegated Properties)</h1><p>我们先看看官网的定义：</p>\n<blockquote>\n<p>有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：</p>\n<ul>\n<li>延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。</li>\n<li>可控性（observable properties）: 监听器得到关于这个特性变化的通知，</li>\n<li>把所有特性储存在一个映射结构中，而不是分开每一条。</li>\n</ul>\n<p>为了支持这些(或者其他)例子，Kotlin 采用 委托属性。</p>\n</blockquote>\n<p>简言之就是<em>简化手动实现的属性，将其抽象出一个库</em>。</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><h2 id=\"定义一个委托\"><a href=\"#定义一个委托\" class=\"headerlink\" title=\"定义一个委托\"></a>定义一个委托</h2><p>Kotlin 中有两种属性：用<code>var</code>修饰的可变属性和由<code>val</code>修饰的只读属性。由<code>val</code>修饰的只读属性使用的委托需要实现<code>ReadOnlyProperty</code>，而<code>var</code>修饰的可变属性则需要实现<code>ReadWriteProperty</code></p>\n<p>在调用被委托的属性的<code>getter</code>和<code>setter</code>时，对应操作会被委托给<code>getValue()</code>以及<code>setValue()</code>。</p>\n<p>如实现一个最简单的委托<code>Delegate</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Delegate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"subst\">$thisRef</span>, thank you for delegating '<span class=\"subst\">$&#123;property.name&#125;</span>' to me!\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">        println(<span class=\"string\">\"<span class=\"subst\">$value</span> has been assigned to '<span class=\"subst\">$&#123;property.name&#125;</span> in <span class=\"subst\">$thisRef</span>.'\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用定义好的委托属性\"><a href=\"#使用定义好的委托属性\" class=\"headerlink\" title=\"使用定义好的委托属性\"></a>使用定义好的委托属性</h2><p>语法为<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p: String <span class=\"keyword\">by</span> Delegate()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>by</code>后面的是委托表达式，我们调用这个对象并使用属性：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> e = Example()</div><div class=\"line\">println(e.p)</div><div class=\"line\"></div><div class=\"line\">e.p = <span class=\"string\">\"NEW\"</span></div></pre></td></tr></table></figure>\n<p>打印结果为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Example@33a17727, thank you <span class=\"keyword\">for</span> delegating <span class=\"string\">'p'</span> to me!</div><div class=\"line\">NEW has been assigned to <span class=\"string\">'p'</span> <span class=\"keyword\">in</span> Example@33a17727.</div></pre></td></tr></table></figure>\n<p>如上可知，<code>thisRef</code>对应的是拥有该被委托属性的对象实例，<code>property</code>则是属性，<code>value</code>是调用<code>setter</code>时的传入值。</p>\n<h1 id=\"实例讲解\"><a href=\"#实例讲解\" class=\"headerlink\" title=\"实例讲解\"></a>实例讲解</h1><h2 id=\"lazy-懒加载\"><a href=\"#lazy-懒加载\" class=\"headerlink\" title=\"lazy 懒加载\"></a>lazy 懒加载</h2><p>Kotlin 标准库自带的<strong>懒加载委托</strong>，在属性第一次被使用时才进行初始化。</p>\n<p>函数<code>lazy()</code>接受一个 lambda 然后返回一个可以作为委托<code>Lazy&lt;T&gt;</code> 实例来实现延迟属性: 第一个调用<code>getter</code>执行变量传递到<code>lazy()</code>并记录结果, 后来的<code>getter</code>调用只会返回记录的结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> lazyValue: String <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">    println(<span class=\"string\">\"computed!\"</span>)</div><div class=\"line\">    <span class=\"string\">\"Hello\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    println(lazyValue)</div><div class=\"line\">    println(lazyValue)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其打印结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed!   <span class=\"comment\"># 第一次使用时先初始化</span></div><div class=\"line\">Hello       <span class=\"comment\"># getter</span></div><div class=\"line\">Hello       <span class=\"comment\"># 后续都只会调用 getter</span></div></pre></td></tr></table></figure>\n<p><strong>懒加载委托</strong>在实际编码中应用十分广泛，比如 Android 中我们可以把很多在<code>OnCreate</code>中需要进行的初始化操作使用<strong>懒加载委托</strong>来实现。</p>\n<h2 id=\"使用委托操作-SharedPreferences\"><a href=\"#使用委托操作-SharedPreferences\" class=\"headerlink\" title=\"使用委托操作 SharedPreferences\"></a>使用委托操作 SharedPreferences</h2><p>本例出自《Kotlin for Android Developer》，使用了<code>when</code>表达式和委托属性巧妙地使得<code>SharedPrefences</code>的读写变得十分简便</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preference</span>&lt;<span class=\"type\">T</span>&gt;</span>(<span class=\"keyword\">val</span> context: Context, <span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> <span class=\"keyword\">default</span>: T) : ReadWriteProperty&lt;Any?, T&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> prefs <span class=\"keyword\">by</span> lazy &#123; context.getSharedPreferences(<span class=\"string\">\"default\"</span>, Context.MODE_PRIVATE) &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> findPreference(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">T</span>)</span></span> &#123;</div><div class=\"line\">        putPreference(name, value)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;U&gt;</span> <span class=\"title\">findPreference</span><span class=\"params\">(name: <span class=\"type\">String</span>, <span class=\"keyword\">default</span>: <span class=\"type\">U</span>)</span></span>: U = with(prefs) &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> res: Any = <span class=\"keyword\">when</span> (<span class=\"keyword\">default</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span> -&gt; getLong(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">is</span> String -&gt; getString(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span> -&gt; getInt(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Boolean</span> -&gt; getBoolean(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Float</span> -&gt; getFloat(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"This type can be saved into Preferences\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res <span class=\"keyword\">as</span> U</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;U&gt;</span> <span class=\"title\">putPreference</span><span class=\"params\">(name: <span class=\"type\">String</span>, value: <span class=\"type\">U</span>)</span></span> = with(prefs.edit()) &#123;</div><div class=\"line\">        <span class=\"keyword\">when</span> (value) &#123;</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span> -&gt; putLong(name, value)</div><div class=\"line\">            <span class=\"keyword\">is</span> String -&gt; putString(name, value)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span> -&gt; putInt(name, value)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Boolean</span> -&gt; putBoolean(name, value)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Float</span> -&gt; putFloat(name, value)</div><div class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"This type can be saved into Preferences\"</span>)</div><div class=\"line\">        &#125;.apply()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在代码中我们可以如下使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhateverActivity</span> : <span class=\"type\">Activity</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> aInt: <span class=\"built_in\">Int</span> <span class=\"keyword\">by</span> Preference(<span class=\"keyword\">this</span>, <span class=\"string\">\"aInt\"</span>, <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whatever</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        println(aInt) <span class=\"comment\">// 会从 SharedPreference 取这个数据</span></div><div class=\"line\">        aInt = <span class=\"number\">9</span> <span class=\"comment\">// 会将这个数据写入 SharedPreference</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从此操作<code>SharedPreferences</code>变得如此简单 ~</p>\n<h2 id=\"简单实现一个-KotterKnife\"><a href=\"#简单实现一个-KotterKnife\" class=\"headerlink\" title=\"简单实现一个 KotterKnife\"></a>简单实现一个 KotterKnife</h2><p>KotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。</p>\n<p>KotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>我们平时是这样初始化 View 的</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</div><div class=\"line\">    setContentView(R.layout.activity_main)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> textView = findViewById(R.id.text_view) <span class=\"keyword\">as</span> TextView</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>考虑到通常我们在<code>onCreate</code>方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> mTextView <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">    findViewById(R.id.text_view) <span class=\"keyword\">as</span> TextView</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对其抽取简化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Suppress(<span class=\"meta-string\">\"UNCHECKED_CAST\"</span>)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;V : View&gt;</span> Activity.<span class=\"title\">bindView</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span></span>: Lazy&lt;V&gt; = lazy &#123;</div><div class=\"line\">    viewFinder(id) <span class=\"keyword\">as</span> V</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> Activity.viewFinder: Activity.(<span class=\"built_in\">Int</span>) -&gt; View?</div><div class=\"line\">    <span class=\"keyword\">get</span>() = &#123; findViewById(it) &#125;</div></pre></td></tr></table></figure>\n<p>之后我们就可以在 Activity 中这样注入 View 了</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> mTextView <span class=\"keyword\">by</span> bindView&lt;TextView&gt;(R.id.text_view)</div></pre></td></tr></table></figure>\n<p>如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 <a href=\"https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt\" target=\"_blank\" rel=\"external\">KotterKnife源码</a>。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的<code>getter</code>、<code>setter</code>直接绑定所以使用起来也十分灵活方便。</p>\n<p>总而言之：<strong>这真是极好的</strong>。</p>\n","excerpt":"","more":"<blockquote>\n<p>Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的<strong>委托属性</strong>这一特性。</p>\n</blockquote>\n<h1 id=\"委托属性-Delegated-Properties\"><a href=\"#委托属性-Delegated-Properties\" class=\"headerlink\" title=\"委托属性(Delegated Properties)\"></a>委托属性(Delegated Properties)</h1><p>我们先看看官网的定义：</p>\n<blockquote>\n<p>有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：</p>\n<ul>\n<li>延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。</li>\n<li>可控性（observable properties）: 监听器得到关于这个特性变化的通知，</li>\n<li>把所有特性储存在一个映射结构中，而不是分开每一条。</li>\n</ul>\n<p>为了支持这些(或者其他)例子，Kotlin 采用 委托属性。</p>\n</blockquote>\n<p>简言之就是<em>简化手动实现的属性，将其抽象出一个库</em>。</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><h2 id=\"定义一个委托\"><a href=\"#定义一个委托\" class=\"headerlink\" title=\"定义一个委托\"></a>定义一个委托</h2><p>Kotlin 中有两种属性：用<code>var</code>修饰的可变属性和由<code>val</code>修饰的只读属性。由<code>val</code>修饰的只读属性使用的委托需要实现<code>ReadOnlyProperty</code>，而<code>var</code>修饰的可变属性则需要实现<code>ReadWriteProperty</code></p>\n<p>在调用被委托的属性的<code>getter</code>和<code>setter</code>时，对应操作会被委托给<code>getValue()</code>以及<code>setValue()</code>。</p>\n<p>如实现一个最简单的委托<code>Delegate</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Delegate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"subst\">$thisRef</span>, thank you for delegating '<span class=\"subst\">$&#123;property.name&#125;</span>' to me!\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">        println(<span class=\"string\">\"<span class=\"subst\">$value</span> has been assigned to '<span class=\"subst\">$&#123;property.name&#125;</span> in <span class=\"subst\">$thisRef</span>.'\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用定义好的委托属性\"><a href=\"#使用定义好的委托属性\" class=\"headerlink\" title=\"使用定义好的委托属性\"></a>使用定义好的委托属性</h2><p>语法为<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p: String <span class=\"keyword\">by</span> Delegate()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>by</code>后面的是委托表达式，我们调用这个对象并使用属性：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> e = Example()</div><div class=\"line\">println(e.p)</div><div class=\"line\"></div><div class=\"line\">e.p = <span class=\"string\">\"NEW\"</span></div></pre></td></tr></table></figure>\n<p>打印结果为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Example@33a17727, thank you <span class=\"keyword\">for</span> delegating <span class=\"string\">'p'</span> to me!</div><div class=\"line\">NEW has been assigned to <span class=\"string\">'p'</span> <span class=\"keyword\">in</span> Example@33a17727.</div></pre></td></tr></table></figure>\n<p>如上可知，<code>thisRef</code>对应的是拥有该被委托属性的对象实例，<code>property</code>则是属性，<code>value</code>是调用<code>setter</code>时的传入值。</p>\n<h1 id=\"实例讲解\"><a href=\"#实例讲解\" class=\"headerlink\" title=\"实例讲解\"></a>实例讲解</h1><h2 id=\"lazy-懒加载\"><a href=\"#lazy-懒加载\" class=\"headerlink\" title=\"lazy 懒加载\"></a>lazy 懒加载</h2><p>Kotlin 标准库自带的<strong>懒加载委托</strong>，在属性第一次被使用时才进行初始化。</p>\n<p>函数<code>lazy()</code>接受一个 lambda 然后返回一个可以作为委托<code>Lazy&lt;T&gt;</code> 实例来实现延迟属性: 第一个调用<code>getter</code>执行变量传递到<code>lazy()</code>并记录结果, 后来的<code>getter</code>调用只会返回记录的结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> lazyValue: String <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">    println(<span class=\"string\">\"computed!\"</span>)</div><div class=\"line\">    <span class=\"string\">\"Hello\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    println(lazyValue)</div><div class=\"line\">    println(lazyValue)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其打印结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed!   <span class=\"comment\"># 第一次使用时先初始化</span></div><div class=\"line\">Hello       <span class=\"comment\"># getter</span></div><div class=\"line\">Hello       <span class=\"comment\"># 后续都只会调用 getter</span></div></pre></td></tr></table></figure>\n<p><strong>懒加载委托</strong>在实际编码中应用十分广泛，比如 Android 中我们可以把很多在<code>OnCreate</code>中需要进行的初始化操作使用<strong>懒加载委托</strong>来实现。</p>\n<h2 id=\"使用委托操作-SharedPreferences\"><a href=\"#使用委托操作-SharedPreferences\" class=\"headerlink\" title=\"使用委托操作 SharedPreferences\"></a>使用委托操作 SharedPreferences</h2><p>本例出自《Kotlin for Android Developer》，使用了<code>when</code>表达式和委托属性巧妙地使得<code>SharedPrefences</code>的读写变得十分简便</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preference</span>&lt;<span class=\"type\">T</span>&gt;</span>(<span class=\"keyword\">val</span> context: Context, <span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> <span class=\"keyword\">default</span>: T) : ReadWriteProperty&lt;Any?, T&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> prefs <span class=\"keyword\">by</span> lazy &#123; context.getSharedPreferences(<span class=\"string\">\"default\"</span>, Context.MODE_PRIVATE) &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: T &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> findPreference(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any</span>?, property: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">T</span>)</span></span> &#123;</div><div class=\"line\">        putPreference(name, value)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;U&gt;</span> <span class=\"title\">findPreference</span><span class=\"params\">(name: <span class=\"type\">String</span>, <span class=\"keyword\">default</span>: <span class=\"type\">U</span>)</span></span>: U = with(prefs) &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> res: Any = <span class=\"keyword\">when</span> (<span class=\"keyword\">default</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span> -&gt; getLong(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">is</span> String -&gt; getString(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span> -&gt; getInt(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Boolean</span> -&gt; getBoolean(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Float</span> -&gt; getFloat(name, <span class=\"keyword\">default</span>)</div><div class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"This type can be saved into Preferences\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res <span class=\"keyword\">as</span> U</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;U&gt;</span> <span class=\"title\">putPreference</span><span class=\"params\">(name: <span class=\"type\">String</span>, value: <span class=\"type\">U</span>)</span></span> = with(prefs.edit()) &#123;</div><div class=\"line\">        <span class=\"keyword\">when</span> (value) &#123;</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span> -&gt; putLong(name, value)</div><div class=\"line\">            <span class=\"keyword\">is</span> String -&gt; putString(name, value)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span> -&gt; putInt(name, value)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Boolean</span> -&gt; putBoolean(name, value)</div><div class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Float</span> -&gt; putFloat(name, value)</div><div class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"This type can be saved into Preferences\"</span>)</div><div class=\"line\">        &#125;.apply()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在代码中我们可以如下使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhateverActivity</span> : <span class=\"type\">Activity</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> aInt: <span class=\"built_in\">Int</span> <span class=\"keyword\">by</span> Preference(<span class=\"keyword\">this</span>, <span class=\"string\">\"aInt\"</span>, <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whatever</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        println(aInt) <span class=\"comment\">// 会从 SharedPreference 取这个数据</span></div><div class=\"line\">        aInt = <span class=\"number\">9</span> <span class=\"comment\">// 会将这个数据写入 SharedPreference</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从此操作<code>SharedPreferences</code>变得如此简单 ~</p>\n<h2 id=\"简单实现一个-KotterKnife\"><a href=\"#简单实现一个-KotterKnife\" class=\"headerlink\" title=\"简单实现一个 KotterKnife\"></a>简单实现一个 KotterKnife</h2><p>KotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。</p>\n<p>KotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>我们平时是这样初始化 View 的</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</div><div class=\"line\">    setContentView(R.layout.activity_main)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> textView = findViewById(R.id.text_view) <span class=\"keyword\">as</span> TextView</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>考虑到通常我们在<code>onCreate</code>方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> mTextView <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">    findViewById(R.id.text_view) <span class=\"keyword\">as</span> TextView</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对其抽取简化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Suppress(<span class=\"meta-string\">\"UNCHECKED_CAST\"</span>)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;V : View&gt;</span> Activity.<span class=\"title\">bindView</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span></span>: Lazy&lt;V&gt; = lazy &#123;</div><div class=\"line\">    viewFinder(id) <span class=\"keyword\">as</span> V</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> Activity.viewFinder: Activity.(<span class=\"built_in\">Int</span>) -&gt; View?</div><div class=\"line\">    <span class=\"keyword\">get</span>() = &#123; findViewById(it) &#125;</div></pre></td></tr></table></figure>\n<p>之后我们就可以在 Activity 中这样注入 View 了</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> mTextView <span class=\"keyword\">by</span> bindView&lt;TextView&gt;(R.id.text_view)</div></pre></td></tr></table></figure>\n<p>如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 <a href=\"https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt\">KotterKnife源码</a>。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的<code>getter</code>、<code>setter</code>直接绑定所以使用起来也十分灵活方便。</p>\n<p>总而言之：<strong>这真是极好的</strong>。</p>\n"},{"title":"博客迁移到 Hexo","date":"2016-03-22T09:09:00.000Z","toc":true,"description":"Github Pages 服务的 Jekyll 升级了，干脆我就趁着这次机会把博客迁移到 Hexo 好了。","_content":"> Github Pages 服务的 Jekyll 升级了，干脆我就趁着这次机会把博客迁移到 Hexo 好了。\n>\n> Hexo 是 Node.js 的一个静态博客系统，相比起 Ruby 实现的 Jekyll，它生成的速度更快而且更加现代化。当然最重要的就是对前端工程师更友好啦，毕竟是用 javascript 写的嘛\n> \n> 使用 Hexo 和 Jekyll 的不同点在于 Hexo 是生成静态文件后上传到 Github Pages 服务上，而 Jekyll 是上传源码然后在服务器上生成静态文件。\n\n\n# 如何使用Hexo\n\n## 安装Hexo\n\n1. 安装 Node.js\n2. 安装 Hexo\n\t```bash\n\tnpm install hexo-cli -g\n\t```\n\n## 生成静态博客项目\n\n只需要输入以下命令就会生成一个静态博客项目\n\n```bash\nhexo init blog\ncd blog\nnpm install\n```\n\n然后等待 npm 安装完成\n\n## 运行博客\n\n输入以下命令，然后就可以在浏览器地址栏中输入`http://localhost:4000/`打开博客\n\n```bash\nhexo server\n```\n\n## 编写文章\n\n在`source/_posts`文件夹下放入对应格式的 markdown 文件，hexo 就会根据模板将其渲染为对应格式的 html 静态文件。\n\n# 从Jekyll迁移\n\n## 迁移文章\n\n把`_posts`文件夹内的所有文件复制到`source/_posts`文件夹，并在`_config.yml`中修改`new_post_name`参数。\n\n```yaml\nnew_post_name: :year-:month-:day-:title.md\n```\n\n## 文章格式修改\n\nJekyll 特定的`Front-matter`需要删掉并且替换为对应的 Hexo 的`Front-matter`，并且文章的 markdown 格式可能需要修改\n\n# 部署到 Github Pages\n\n和 Jekyll 类似，我们还是需要一个`username.github.io`的项目。但和 Jekyll 不同的是我们需要把生成的静态文件部署上去而不是将 markdown 文件部署上去。\n\n在本地输入\n\n```bash\nhexo g\n# 或者\nhexo generate\n```\n\n即可在本地生成静态页面，然后打开`config.yml`，修改为自己的项目信息就可以了\n\n```yaml\ndeploy:\n  type: git\n  repo: git@github.com:loshine/loshine.github.io.git\n  branch: master\n```\n\n# 高级\n\n## 设置\n\n`config.yml`文件有许多的可配置选项，可以参照[这里](https://hexo.io/zh-cn/docs/configuration.html)设置\n\n## 主题\n\n默认情况下使用的是 landscape 主题，我们也可以在[这里](https://hexo.io/themes/)挑选主题\n\n# 总结\n\n其实博客迁移完毕已经挺久了，我终于在今天（2016-03-22）想起来把这个过程记录下来了，也可以给其他需要迁移的人一个参考吧。","source":"_posts/2016-03-22-migrate-blog-to-hexo.md","raw":"---\ntitle: 博客迁移到 Hexo\ndate: 2016-03-22 17:09:00\ncategory: [技术]\ntags: [Hexo,github,github-pages]\ntoc: true\ndescription: Github Pages 服务的 Jekyll 升级了，干脆我就趁着这次机会把博客迁移到 Hexo 好了。\n---\n> Github Pages 服务的 Jekyll 升级了，干脆我就趁着这次机会把博客迁移到 Hexo 好了。\n>\n> Hexo 是 Node.js 的一个静态博客系统，相比起 Ruby 实现的 Jekyll，它生成的速度更快而且更加现代化。当然最重要的就是对前端工程师更友好啦，毕竟是用 javascript 写的嘛\n> \n> 使用 Hexo 和 Jekyll 的不同点在于 Hexo 是生成静态文件后上传到 Github Pages 服务上，而 Jekyll 是上传源码然后在服务器上生成静态文件。\n\n\n# 如何使用Hexo\n\n## 安装Hexo\n\n1. 安装 Node.js\n2. 安装 Hexo\n\t```bash\n\tnpm install hexo-cli -g\n\t```\n\n## 生成静态博客项目\n\n只需要输入以下命令就会生成一个静态博客项目\n\n```bash\nhexo init blog\ncd blog\nnpm install\n```\n\n然后等待 npm 安装完成\n\n## 运行博客\n\n输入以下命令，然后就可以在浏览器地址栏中输入`http://localhost:4000/`打开博客\n\n```bash\nhexo server\n```\n\n## 编写文章\n\n在`source/_posts`文件夹下放入对应格式的 markdown 文件，hexo 就会根据模板将其渲染为对应格式的 html 静态文件。\n\n# 从Jekyll迁移\n\n## 迁移文章\n\n把`_posts`文件夹内的所有文件复制到`source/_posts`文件夹，并在`_config.yml`中修改`new_post_name`参数。\n\n```yaml\nnew_post_name: :year-:month-:day-:title.md\n```\n\n## 文章格式修改\n\nJekyll 特定的`Front-matter`需要删掉并且替换为对应的 Hexo 的`Front-matter`，并且文章的 markdown 格式可能需要修改\n\n# 部署到 Github Pages\n\n和 Jekyll 类似，我们还是需要一个`username.github.io`的项目。但和 Jekyll 不同的是我们需要把生成的静态文件部署上去而不是将 markdown 文件部署上去。\n\n在本地输入\n\n```bash\nhexo g\n# 或者\nhexo generate\n```\n\n即可在本地生成静态页面，然后打开`config.yml`，修改为自己的项目信息就可以了\n\n```yaml\ndeploy:\n  type: git\n  repo: git@github.com:loshine/loshine.github.io.git\n  branch: master\n```\n\n# 高级\n\n## 设置\n\n`config.yml`文件有许多的可配置选项，可以参照[这里](https://hexo.io/zh-cn/docs/configuration.html)设置\n\n## 主题\n\n默认情况下使用的是 landscape 主题，我们也可以在[这里](https://hexo.io/themes/)挑选主题\n\n# 总结\n\n其实博客迁移完毕已经挺久了，我终于在今天（2016-03-22）想起来把这个过程记录下来了，也可以给其他需要迁移的人一个参考吧。","slug":"migrate-blog-to-hexo","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvm000ogy6eqj01l2y3","content":"<blockquote>\n<p>Github Pages 服务的 Jekyll 升级了，干脆我就趁着这次机会把博客迁移到 Hexo 好了。</p>\n<p>Hexo 是 Node.js 的一个静态博客系统，相比起 Ruby 实现的 Jekyll，它生成的速度更快而且更加现代化。当然最重要的就是对前端工程师更友好啦，毕竟是用 javascript 写的嘛</p>\n<p>使用 Hexo 和 Jekyll 的不同点在于 Hexo 是生成静态文件后上传到 Github Pages 服务上，而 Jekyll 是上传源码然后在服务器上生成静态文件。</p>\n</blockquote>\n<h1 id=\"如何使用Hexo\"><a href=\"#如何使用Hexo\" class=\"headerlink\" title=\"如何使用Hexo\"></a>如何使用Hexo</h1><h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><ol>\n<li>安装 Node.js</li>\n<li>安装 Hexo <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"生成静态博客项目\"><a href=\"#生成静态博客项目\" class=\"headerlink\" title=\"生成静态博客项目\"></a>生成静态博客项目</h2><p>只需要输入以下命令就会生成一个静态博客项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init blog</div><div class=\"line\"><span class=\"built_in\">cd</span> blog</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>然后等待 npm 安装完成</p>\n<h2 id=\"运行博客\"><a href=\"#运行博客\" class=\"headerlink\" title=\"运行博客\"></a>运行博客</h2><p>输入以下命令，然后就可以在浏览器地址栏中输入<code>http://localhost:4000/</code>打开博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h2 id=\"编写文章\"><a href=\"#编写文章\" class=\"headerlink\" title=\"编写文章\"></a>编写文章</h2><p>在<code>source/_posts</code>文件夹下放入对应格式的 markdown 文件，hexo 就会根据模板将其渲染为对应格式的 html 静态文件。</p>\n<h1 id=\"从Jekyll迁移\"><a href=\"#从Jekyll迁移\" class=\"headerlink\" title=\"从Jekyll迁移\"></a>从Jekyll迁移</h1><h2 id=\"迁移文章\"><a href=\"#迁移文章\" class=\"headerlink\" title=\"迁移文章\"></a>迁移文章</h2><p>把<code>_posts</code>文件夹内的所有文件复制到<code>source/_posts</code>文件夹，并在<code>_config.yml</code>中修改<code>new_post_name</code>参数。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">new_post_name:</span> :year-:month-:day-:title.md</div></pre></td></tr></table></figure>\n<h2 id=\"文章格式修改\"><a href=\"#文章格式修改\" class=\"headerlink\" title=\"文章格式修改\"></a>文章格式修改</h2><p>Jekyll 特定的<code>Front-matter</code>需要删掉并且替换为对应的 Hexo 的<code>Front-matter</code>，并且文章的 markdown 格式可能需要修改</p>\n<h1 id=\"部署到-Github-Pages\"><a href=\"#部署到-Github-Pages\" class=\"headerlink\" title=\"部署到 Github Pages\"></a>部署到 Github Pages</h1><p>和 Jekyll 类似，我们还是需要一个<code>username.github.io</code>的项目。但和 Jekyll 不同的是我们需要把生成的静态文件部署上去而不是将 markdown 文件部署上去。</p>\n<p>在本地输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>即可在本地生成静态页面，然后打开<code>config.yml</code>，修改为自己的项目信息就可以了</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> git</div><div class=\"line\"><span class=\"attr\">  repo:</span> git@github.com:loshine/loshine.github.io.git</div><div class=\"line\"><span class=\"attr\">  branch:</span> master</div></pre></td></tr></table></figure>\n<h1 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h1><h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p><code>config.yml</code>文件有许多的可配置选项，可以参照<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">这里</a>设置</p>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>默认情况下使用的是 landscape 主题，我们也可以在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">这里</a>挑选主题</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实博客迁移完毕已经挺久了，我终于在今天（2016-03-22）想起来把这个过程记录下来了，也可以给其他需要迁移的人一个参考吧。</p>\n","excerpt":"","more":"<blockquote>\n<p>Github Pages 服务的 Jekyll 升级了，干脆我就趁着这次机会把博客迁移到 Hexo 好了。</p>\n<p>Hexo 是 Node.js 的一个静态博客系统，相比起 Ruby 实现的 Jekyll，它生成的速度更快而且更加现代化。当然最重要的就是对前端工程师更友好啦，毕竟是用 javascript 写的嘛</p>\n<p>使用 Hexo 和 Jekyll 的不同点在于 Hexo 是生成静态文件后上传到 Github Pages 服务上，而 Jekyll 是上传源码然后在服务器上生成静态文件。</p>\n</blockquote>\n<h1 id=\"如何使用Hexo\"><a href=\"#如何使用Hexo\" class=\"headerlink\" title=\"如何使用Hexo\"></a>如何使用Hexo</h1><h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><ol>\n<li>安装 Node.js</li>\n<li>安装 Hexo <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"生成静态博客项目\"><a href=\"#生成静态博客项目\" class=\"headerlink\" title=\"生成静态博客项目\"></a>生成静态博客项目</h2><p>只需要输入以下命令就会生成一个静态博客项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init blog</div><div class=\"line\"><span class=\"built_in\">cd</span> blog</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>然后等待 npm 安装完成</p>\n<h2 id=\"运行博客\"><a href=\"#运行博客\" class=\"headerlink\" title=\"运行博客\"></a>运行博客</h2><p>输入以下命令，然后就可以在浏览器地址栏中输入<code>http://localhost:4000/</code>打开博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h2 id=\"编写文章\"><a href=\"#编写文章\" class=\"headerlink\" title=\"编写文章\"></a>编写文章</h2><p>在<code>source/_posts</code>文件夹下放入对应格式的 markdown 文件，hexo 就会根据模板将其渲染为对应格式的 html 静态文件。</p>\n<h1 id=\"从Jekyll迁移\"><a href=\"#从Jekyll迁移\" class=\"headerlink\" title=\"从Jekyll迁移\"></a>从Jekyll迁移</h1><h2 id=\"迁移文章\"><a href=\"#迁移文章\" class=\"headerlink\" title=\"迁移文章\"></a>迁移文章</h2><p>把<code>_posts</code>文件夹内的所有文件复制到<code>source/_posts</code>文件夹，并在<code>_config.yml</code>中修改<code>new_post_name</code>参数。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">new_post_name:</span> :year-:month-:day-:title.md</div></pre></td></tr></table></figure>\n<h2 id=\"文章格式修改\"><a href=\"#文章格式修改\" class=\"headerlink\" title=\"文章格式修改\"></a>文章格式修改</h2><p>Jekyll 特定的<code>Front-matter</code>需要删掉并且替换为对应的 Hexo 的<code>Front-matter</code>，并且文章的 markdown 格式可能需要修改</p>\n<h1 id=\"部署到-Github-Pages\"><a href=\"#部署到-Github-Pages\" class=\"headerlink\" title=\"部署到 Github Pages\"></a>部署到 Github Pages</h1><p>和 Jekyll 类似，我们还是需要一个<code>username.github.io</code>的项目。但和 Jekyll 不同的是我们需要把生成的静态文件部署上去而不是将 markdown 文件部署上去。</p>\n<p>在本地输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>即可在本地生成静态页面，然后打开<code>config.yml</code>，修改为自己的项目信息就可以了</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> git</div><div class=\"line\"><span class=\"attr\">  repo:</span> git@github.com:loshine/loshine.github.io.git</div><div class=\"line\"><span class=\"attr\">  branch:</span> master</div></pre></td></tr></table></figure>\n<h1 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h1><h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p><code>config.yml</code>文件有许多的可配置选项，可以参照<a href=\"https://hexo.io/zh-cn/docs/configuration.html\">这里</a>设置</p>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>默认情况下使用的是 landscape 主题，我们也可以在<a href=\"https://hexo.io/themes/\">这里</a>挑选主题</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实博客迁移完毕已经挺久了，我终于在今天（2016-03-22）想起来把这个过程记录下来了，也可以给其他需要迁移的人一个参考吧。</p>\n"},{"title":"Anroid中的自定义View绘制","date":"2016-03-25T16:09:00.000Z","toc":true,"description":"在 Android 中，自定义 View 几乎是每一个开发者都需要去实现的，本文就简单讲解一下我在学习自定义 View 的一些心得和体会。","_content":"\n> 虽然我们在开发中基本可以用 Android 自带的各种控件实现绝大多数的功能，但难以避免还是有一些需求是自带的控件无法实现的。这个时候我们通常会想到去 Github 上寻找开源控件，但有的东西是有成熟的实现如：ViewPager 的 Indicator。而有的就没那么容易找到了。\n> \n> 还有就是虽然我们平时的一些需求可以使用图片资源代替，但过多的图片资源不仅会使得应用体积增大，还会使得加载的过程中消耗不少的系统资源（内存以及 CPU）—— 我曾经就这么干过，至少这种方法做东西很快（但也很坑）。\n> \n> 这个时候我们就应该想到自定义 View 了，下面就讲讲我在学习自定义 View 的一些心得体会吧。\n\n# View绘制流程\n\nView 的绘制是从 ViewRoot 的`performTraversals()`方法开始的，其执行过程可简单概括为根据之前所有设置好的状态，判断是否需要计算视图大小（measure）、是否需要重新安置视图的位置（layout），以及是否需要重绘（draw）视图，其流程图如下所示：\n\n![流程图](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-flow.png)\n\n而我们今天讲的自定义 View 的绘制，主要就是在是否需要重新 draw 这一步来实现。\n\n# 三个绘图工具类简介\n\n要在自定义 View 中进行重新绘制，我们首先需要了解一下 Android 中的三个重要的绘图工具类，它们就是`Paint`(画笔)、`Canvas`(画布)以及`Path`(路径)。当然其实不仅仅只有这三个可以作用于画图和图像处理，但它们是最基础的。\n\n## Paint\n\nPaint 就是画笔，在 Android 图形绘制的时候，我们就好像真的有一个人拿着画笔把图像画出来一样，所以画笔这个类也给了我们和现实世界作画的时候一样的一些设定。\n\n我们可以通过 Paint 来设定线宽(就像现实中画笔的粗细)、颜色(颜料)、透明度以及填充风格等。\n\n我们可以通过它的构造函数来新建一个画笔\n\n```java\nPaint paint = new Paint();\n```\n\n然后对它进行一些设定\n\n```java\npaint.setARGB(255, 255, 0, 0); // 设置 ARGB 颜色 int\npaint.setAlpha(0); // 设置透明度 int\npaint.setColor(getResources().getColor(android.R.color.black)); // 设置颜色\npaint.setAntiAlias(true); // 开启抗锯齿\npaint.setDither(true); // 开启抖动处理，使得绘制的图形更清晰\npaint.setFilterBitmap(true); // 滤掉对Bitmap图像的优化操作,加快显示速度\npaint.setMaskFilter(maskFilter); // 添加滤镜\npaint.setColorFilter(colorFilter); // 设置颜色过滤器\npaint.setPathEffect(pathEffect); // 设置路径效果(如虚线等)\npaint.setShader(shader); // 设置渐变效果\npaint.setShadowLayer(2, 2, 2, Color.GRAY); // 半径2,x,y 距离为2，颜色灰色的阴影\npaint.setStyle(Paint.Style.FILL_AND_STROKE); // 画笔样式(内部、边框还是both，画封闭图形的时候比较重要)\npaint.setStrokeCap(Paint.Cap.SQUARE); // 方形笔刷\npaint.setStrokeJoin(Paint.Join.MITER); // 各图形的结合方式\npaint.setStrokeWidth(2); // 画笔粗细\npaint.setXfermode(xfermode); // 图形重叠时的处理方式\npaint.setFakeBoldText(true); // 模拟粗体\npaint.setSubpixelText(true); // 提升文字在 LCD 的显示效果\npaint.setTextAlign(Paint.Align.CENTER); // 文字对齐方向\npaint.setTextScaleX(0.5); // 文字 X 轴缩放\npaint.setTextSize(40); // 文字大小\npaint.setTextSkewX(30); // 文字倾斜度\npaint.setTypeface(Typeface.SANS_SERIF); // 字体风格\npaint.setUnderlineText(true); // 下划线\npaint.setStrikeThruText(true); // 删除线\npaint.setStrokeJoin(Paint.Join.ROUND); // 结合处风格\npaint.setStrokeMiter(30); // 画笔倾斜度\npaint.setStrokeCap(Paint.Cap.ROUND); // 拐角处风格\npaint.ascent(); // baseline之上至字符最高处的距离\npaint.descent(); // baseline之下至字符最低处的距离\npaint.clearShadowLayer(); // 清除阴影\n// 等等\n```\n\n但我们光有画笔还是不够的，我们至少还需要画布(Canvas)才可以真正开始作画呢。\n\n## Canvas\n\nCanvas 就是画布，我们有了画笔和画布就可以开始作画(图形绘制)了。\n\n我们有两种创建 Canvas 的方法：\n\n```java\nCanvas canvas = new Canvas();\nCanvas canvasByBitmap = new Canvas(bitmap);\n```\n\n其中传入 Bitmap 的方法会将 Bitmap 作为画布的背景。\n\n下面是常用的`drawXXX()`方法，它们被用于绘制不同的图形\n\n```java\ncanvas.drawRect(new RectF(0, 0, 100, 100), mPaint); // 绘制一个方形\ncanvas.drawRect(0, 0, 100, 100, mPaint); // 绘制一个方形\ncanvas.drawPath(path, paint); // 绘制一个路径\ncanvas.drawBitmap(bitmap, src, dst, mPaint); // 第二和第三个参数是 Rect\ncanvas.drawLine(0, 0, 100, 100, mPaint); // 画线\ncanvas.drawPoint(100, 20, mPaint); // 画点\ncanvas.drawText(\"这是一段文字\", 0, 0, mPaint); // 画文字\ncanvas.drawOval(new RectF(0, 0, 100, 200), mPaint); // 画方形的内切椭圆\ncanvas.drawCircle(300, 300, 100, mPaint); // 画圆\ncanvas.drawArc(new RectF(0, 0, 100, 100), 0, 30, true, mPaint); // 一个矩形内的扇形\n```\n\n还有`clipXXX()`方法，它们是裁剪一块新的区域用于绘图，这里就不详细说明了。\n\n`save()`和`restore()`方法用来保存和恢复 Canvas 的状态，简单而言就是一个存档，一个恢复存档。\n\n还有就是三个变换方法：`translate`(平移)、`scale`(缩放)以及`rotate`(旋转)了，它们可以控制画布的一些动作，就好像我们真实世界中作画的时候对画布的一些动作一样(除了缩放，2333)。\n\n## Path\n\n其实在有了上面两个类之后我们就已经可以开始绘制了，但还是先把 Path 也介绍完毕之后再开始真实案例吧。\n\nPath 就是路径，有点像我们在初中数学中学习函数的时候，可以根据几个点确认画出一个函数的图形。\n\n下面是一些常用的方法：\n\n```java\npath.addArc(new RectF(0, 0, 100, 100), 0, 30); // 添加一段圆弧\npath.addCircle(300, 300, 100, Path.Direction.CW); // 顺时针圆\npath.addOval(rectF, Path.Direction.CCW); // 逆时针椭圆\npath.addRect(rectF, Path.Direction.CW); // 添加矩形\npath.addRoundRect(rectF, {5, 5, 5, 5}, path.Direction.CW); // 添加圆角矩形\npath.isEmpty(); // 是否无路径\npath.transform(matrix); // 矩阵变换\npath.moveTo(100, 100); // 移动画笔而不绘制\npath.lineTo(300, 300); // 默认从(0，0)开始绘制,可以用 moveTo 移动起始点,调用 canvas.drawPath(path, paint) 绘制\npath.quadTo(x1, y1, x2, y2); // 绘制贝塞尔曲线,三点(起始点默认(0, 0))确认\npath.rCubicTo(x1, y1, x2, y2, x3, y3); // 多一个控制点的贝塞尔曲线\npath.arcTo(rectF, 0, 50); // 圆弧\n```\n\n# 开始绘制\n\n介绍完了三个绘制 UI 的基础类，那么我们现在来动手试试吧。难度从低到高，循序渐进完成自定义 View 中复杂图形的绘制。\n\n我们自定义一个 View 并且要重新绘制的话，我们只需要新建一个类**继承** View 并且实现`onDraw(Canvas canvas)`即可，View 会调用子类实现的`onDraw`完成绘制。\n\n那么我们接下来的示例就只列出`onDraw`方法和对应的效果图了。\n\n## 简单图形\n\n### 矩形\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        // 在构造函数中初始化画笔并设置为黑色\n        canvas.drawRect(0, 0, 100, 200, mPaint);\n    }\n```\n\n![黑色矩形](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-1.png)\n\n### 线段\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        canvas.drawLine(0, 0, 100, 200, mPaint);\n    }\n```\n\n![线段](http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-2.png)\n\n### 圆形\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        canvas.drawCircle(100, 100, 100, mPaint);\n    }\n```\n\n![圆形](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-3.png)\n\n### 画布底色\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        canvas.drawColor(getResources().getColor(android.R.color.darker_gray));\n    }\n```\n\n![画布底色](http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-4.png)\n\n## 复杂图形\n\n### 刻度尺\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        // 防止数字0出界\n        canvas.translate(0, 50);\n\n        for (int i = 0; i <= 100; i++) {\n            if (i % 10 == 0) {\n                // 带有数字的长刻度\n                canvas.drawLine(0, 0, 70, 0, mPaint);\n                // 画文字\n                canvas.drawText(String.format(Locale.CHINESE, \"%d\", i / 10), 100, 10, mPaint);\n            } else if (i % 5 == 0) {\n                // 每隔5的中等长度的刻度\n                canvas.drawLine(0, 0, 40, 0, mPaint);\n            } else {\n                // 其它小刻度\n                canvas.drawLine(0, 0, 30, 0, mPaint);\n            }\n            // 每个刻度画完之后位移\n            canvas.translate(0, 15);\n        }\n    }\n```\n\n![刻度尺](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-5.png)\n\n### 手表表盘\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        // 绘制外圈圆\n        canvas.drawCircle(400, 400, 400, mPaint);\n\n        // 绘制分针和时针\n        canvas.drawLine(400, 400, 400, 200, mPaint);\n        canvas.drawLine(400, 400, 550, 400, mPaint);\n\n        // 绘制刻度和文字\n        for (int i = 0; i < 12; i++) {\n            canvas.drawLine(400, 0, 400, 10, mPaint);\n            canvas.drawText(String.format(Locale.CHINESE, \"%d\", i == 0 ? 12 : i),\n                    400, 100, mTextPaint);\n            // 旋转画布\n            canvas.rotate(30, 400, 400);\n        }\n    }\n```\n\n![表盘](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-6.png)\n\n# 总结\n\n其实 Android 中的图形绘制基本就是靠这三个类扩展变化而来，掌握了它们的使用方式我们也就可以定义各种各样的好看的自定义控件了。\n\n那么我们掌握了绘制之后，我们还要考虑的就是自定义 View 的测量了，我会在之后再写一篇博文来总结我学习自定义 View 的测量的一些经验，感谢观看（虽然并不会有多少人看……）。","source":"_posts/2016-03-26-custom-view-in-android.md","raw":"---\ntitle: Anroid中的自定义View绘制\ndate: 2016-03-26 00:09:00\ncategory: [技术]\ntags: [Android]\ntoc: true\ndescription: 在 Android 中，自定义 View 几乎是每一个开发者都需要去实现的，本文就简单讲解一下我在学习自定义 View 的一些心得和体会。\n---\n\n> 虽然我们在开发中基本可以用 Android 自带的各种控件实现绝大多数的功能，但难以避免还是有一些需求是自带的控件无法实现的。这个时候我们通常会想到去 Github 上寻找开源控件，但有的东西是有成熟的实现如：ViewPager 的 Indicator。而有的就没那么容易找到了。\n> \n> 还有就是虽然我们平时的一些需求可以使用图片资源代替，但过多的图片资源不仅会使得应用体积增大，还会使得加载的过程中消耗不少的系统资源（内存以及 CPU）—— 我曾经就这么干过，至少这种方法做东西很快（但也很坑）。\n> \n> 这个时候我们就应该想到自定义 View 了，下面就讲讲我在学习自定义 View 的一些心得体会吧。\n\n# View绘制流程\n\nView 的绘制是从 ViewRoot 的`performTraversals()`方法开始的，其执行过程可简单概括为根据之前所有设置好的状态，判断是否需要计算视图大小（measure）、是否需要重新安置视图的位置（layout），以及是否需要重绘（draw）视图，其流程图如下所示：\n\n![流程图](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-flow.png)\n\n而我们今天讲的自定义 View 的绘制，主要就是在是否需要重新 draw 这一步来实现。\n\n# 三个绘图工具类简介\n\n要在自定义 View 中进行重新绘制，我们首先需要了解一下 Android 中的三个重要的绘图工具类，它们就是`Paint`(画笔)、`Canvas`(画布)以及`Path`(路径)。当然其实不仅仅只有这三个可以作用于画图和图像处理，但它们是最基础的。\n\n## Paint\n\nPaint 就是画笔，在 Android 图形绘制的时候，我们就好像真的有一个人拿着画笔把图像画出来一样，所以画笔这个类也给了我们和现实世界作画的时候一样的一些设定。\n\n我们可以通过 Paint 来设定线宽(就像现实中画笔的粗细)、颜色(颜料)、透明度以及填充风格等。\n\n我们可以通过它的构造函数来新建一个画笔\n\n```java\nPaint paint = new Paint();\n```\n\n然后对它进行一些设定\n\n```java\npaint.setARGB(255, 255, 0, 0); // 设置 ARGB 颜色 int\npaint.setAlpha(0); // 设置透明度 int\npaint.setColor(getResources().getColor(android.R.color.black)); // 设置颜色\npaint.setAntiAlias(true); // 开启抗锯齿\npaint.setDither(true); // 开启抖动处理，使得绘制的图形更清晰\npaint.setFilterBitmap(true); // 滤掉对Bitmap图像的优化操作,加快显示速度\npaint.setMaskFilter(maskFilter); // 添加滤镜\npaint.setColorFilter(colorFilter); // 设置颜色过滤器\npaint.setPathEffect(pathEffect); // 设置路径效果(如虚线等)\npaint.setShader(shader); // 设置渐变效果\npaint.setShadowLayer(2, 2, 2, Color.GRAY); // 半径2,x,y 距离为2，颜色灰色的阴影\npaint.setStyle(Paint.Style.FILL_AND_STROKE); // 画笔样式(内部、边框还是both，画封闭图形的时候比较重要)\npaint.setStrokeCap(Paint.Cap.SQUARE); // 方形笔刷\npaint.setStrokeJoin(Paint.Join.MITER); // 各图形的结合方式\npaint.setStrokeWidth(2); // 画笔粗细\npaint.setXfermode(xfermode); // 图形重叠时的处理方式\npaint.setFakeBoldText(true); // 模拟粗体\npaint.setSubpixelText(true); // 提升文字在 LCD 的显示效果\npaint.setTextAlign(Paint.Align.CENTER); // 文字对齐方向\npaint.setTextScaleX(0.5); // 文字 X 轴缩放\npaint.setTextSize(40); // 文字大小\npaint.setTextSkewX(30); // 文字倾斜度\npaint.setTypeface(Typeface.SANS_SERIF); // 字体风格\npaint.setUnderlineText(true); // 下划线\npaint.setStrikeThruText(true); // 删除线\npaint.setStrokeJoin(Paint.Join.ROUND); // 结合处风格\npaint.setStrokeMiter(30); // 画笔倾斜度\npaint.setStrokeCap(Paint.Cap.ROUND); // 拐角处风格\npaint.ascent(); // baseline之上至字符最高处的距离\npaint.descent(); // baseline之下至字符最低处的距离\npaint.clearShadowLayer(); // 清除阴影\n// 等等\n```\n\n但我们光有画笔还是不够的，我们至少还需要画布(Canvas)才可以真正开始作画呢。\n\n## Canvas\n\nCanvas 就是画布，我们有了画笔和画布就可以开始作画(图形绘制)了。\n\n我们有两种创建 Canvas 的方法：\n\n```java\nCanvas canvas = new Canvas();\nCanvas canvasByBitmap = new Canvas(bitmap);\n```\n\n其中传入 Bitmap 的方法会将 Bitmap 作为画布的背景。\n\n下面是常用的`drawXXX()`方法，它们被用于绘制不同的图形\n\n```java\ncanvas.drawRect(new RectF(0, 0, 100, 100), mPaint); // 绘制一个方形\ncanvas.drawRect(0, 0, 100, 100, mPaint); // 绘制一个方形\ncanvas.drawPath(path, paint); // 绘制一个路径\ncanvas.drawBitmap(bitmap, src, dst, mPaint); // 第二和第三个参数是 Rect\ncanvas.drawLine(0, 0, 100, 100, mPaint); // 画线\ncanvas.drawPoint(100, 20, mPaint); // 画点\ncanvas.drawText(\"这是一段文字\", 0, 0, mPaint); // 画文字\ncanvas.drawOval(new RectF(0, 0, 100, 200), mPaint); // 画方形的内切椭圆\ncanvas.drawCircle(300, 300, 100, mPaint); // 画圆\ncanvas.drawArc(new RectF(0, 0, 100, 100), 0, 30, true, mPaint); // 一个矩形内的扇形\n```\n\n还有`clipXXX()`方法，它们是裁剪一块新的区域用于绘图，这里就不详细说明了。\n\n`save()`和`restore()`方法用来保存和恢复 Canvas 的状态，简单而言就是一个存档，一个恢复存档。\n\n还有就是三个变换方法：`translate`(平移)、`scale`(缩放)以及`rotate`(旋转)了，它们可以控制画布的一些动作，就好像我们真实世界中作画的时候对画布的一些动作一样(除了缩放，2333)。\n\n## Path\n\n其实在有了上面两个类之后我们就已经可以开始绘制了，但还是先把 Path 也介绍完毕之后再开始真实案例吧。\n\nPath 就是路径，有点像我们在初中数学中学习函数的时候，可以根据几个点确认画出一个函数的图形。\n\n下面是一些常用的方法：\n\n```java\npath.addArc(new RectF(0, 0, 100, 100), 0, 30); // 添加一段圆弧\npath.addCircle(300, 300, 100, Path.Direction.CW); // 顺时针圆\npath.addOval(rectF, Path.Direction.CCW); // 逆时针椭圆\npath.addRect(rectF, Path.Direction.CW); // 添加矩形\npath.addRoundRect(rectF, {5, 5, 5, 5}, path.Direction.CW); // 添加圆角矩形\npath.isEmpty(); // 是否无路径\npath.transform(matrix); // 矩阵变换\npath.moveTo(100, 100); // 移动画笔而不绘制\npath.lineTo(300, 300); // 默认从(0，0)开始绘制,可以用 moveTo 移动起始点,调用 canvas.drawPath(path, paint) 绘制\npath.quadTo(x1, y1, x2, y2); // 绘制贝塞尔曲线,三点(起始点默认(0, 0))确认\npath.rCubicTo(x1, y1, x2, y2, x3, y3); // 多一个控制点的贝塞尔曲线\npath.arcTo(rectF, 0, 50); // 圆弧\n```\n\n# 开始绘制\n\n介绍完了三个绘制 UI 的基础类，那么我们现在来动手试试吧。难度从低到高，循序渐进完成自定义 View 中复杂图形的绘制。\n\n我们自定义一个 View 并且要重新绘制的话，我们只需要新建一个类**继承** View 并且实现`onDraw(Canvas canvas)`即可，View 会调用子类实现的`onDraw`完成绘制。\n\n那么我们接下来的示例就只列出`onDraw`方法和对应的效果图了。\n\n## 简单图形\n\n### 矩形\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        // 在构造函数中初始化画笔并设置为黑色\n        canvas.drawRect(0, 0, 100, 200, mPaint);\n    }\n```\n\n![黑色矩形](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-1.png)\n\n### 线段\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        canvas.drawLine(0, 0, 100, 200, mPaint);\n    }\n```\n\n![线段](http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-2.png)\n\n### 圆形\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        canvas.drawCircle(100, 100, 100, mPaint);\n    }\n```\n\n![圆形](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-3.png)\n\n### 画布底色\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        canvas.drawColor(getResources().getColor(android.R.color.darker_gray));\n    }\n```\n\n![画布底色](http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-4.png)\n\n## 复杂图形\n\n### 刻度尺\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        // 防止数字0出界\n        canvas.translate(0, 50);\n\n        for (int i = 0; i <= 100; i++) {\n            if (i % 10 == 0) {\n                // 带有数字的长刻度\n                canvas.drawLine(0, 0, 70, 0, mPaint);\n                // 画文字\n                canvas.drawText(String.format(Locale.CHINESE, \"%d\", i / 10), 100, 10, mPaint);\n            } else if (i % 5 == 0) {\n                // 每隔5的中等长度的刻度\n                canvas.drawLine(0, 0, 40, 0, mPaint);\n            } else {\n                // 其它小刻度\n                canvas.drawLine(0, 0, 30, 0, mPaint);\n            }\n            // 每个刻度画完之后位移\n            canvas.translate(0, 15);\n        }\n    }\n```\n\n![刻度尺](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-5.png)\n\n### 手表表盘\n\n```java\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        // 绘制外圈圆\n        canvas.drawCircle(400, 400, 400, mPaint);\n\n        // 绘制分针和时针\n        canvas.drawLine(400, 400, 400, 200, mPaint);\n        canvas.drawLine(400, 400, 550, 400, mPaint);\n\n        // 绘制刻度和文字\n        for (int i = 0; i < 12; i++) {\n            canvas.drawLine(400, 0, 400, 10, mPaint);\n            canvas.drawText(String.format(Locale.CHINESE, \"%d\", i == 0 ? 12 : i),\n                    400, 100, mTextPaint);\n            // 旋转画布\n            canvas.rotate(30, 400, 400);\n        }\n    }\n```\n\n![表盘](http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-6.png)\n\n# 总结\n\n其实 Android 中的图形绘制基本就是靠这三个类扩展变化而来，掌握了它们的使用方式我们也就可以定义各种各样的好看的自定义控件了。\n\n那么我们掌握了绘制之后，我们还要考虑的就是自定义 View 的测量了，我会在之后再写一篇博文来总结我学习自定义 View 的测量的一些经验，感谢观看（虽然并不会有多少人看……）。","slug":"custom-view-in-android","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvp000sgy6ew4hn7k7x","content":"<blockquote>\n<p>虽然我们在开发中基本可以用 Android 自带的各种控件实现绝大多数的功能，但难以避免还是有一些需求是自带的控件无法实现的。这个时候我们通常会想到去 Github 上寻找开源控件，但有的东西是有成熟的实现如：ViewPager 的 Indicator。而有的就没那么容易找到了。</p>\n<p>还有就是虽然我们平时的一些需求可以使用图片资源代替，但过多的图片资源不仅会使得应用体积增大，还会使得加载的过程中消耗不少的系统资源（内存以及 CPU）—— 我曾经就这么干过，至少这种方法做东西很快（但也很坑）。</p>\n<p>这个时候我们就应该想到自定义 View 了，下面就讲讲我在学习自定义 View 的一些心得体会吧。</p>\n</blockquote>\n<h1 id=\"View绘制流程\"><a href=\"#View绘制流程\" class=\"headerlink\" title=\"View绘制流程\"></a>View绘制流程</h1><p>View 的绘制是从 ViewRoot 的<code>performTraversals()</code>方法开始的，其执行过程可简单概括为根据之前所有设置好的状态，判断是否需要计算视图大小（measure）、是否需要重新安置视图的位置（layout），以及是否需要重绘（draw）视图，其流程图如下所示：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-flow.png\" alt=\"流程图\"></p>\n<p>而我们今天讲的自定义 View 的绘制，主要就是在是否需要重新 draw 这一步来实现。</p>\n<h1 id=\"三个绘图工具类简介\"><a href=\"#三个绘图工具类简介\" class=\"headerlink\" title=\"三个绘图工具类简介\"></a>三个绘图工具类简介</h1><p>要在自定义 View 中进行重新绘制，我们首先需要了解一下 Android 中的三个重要的绘图工具类，它们就是<code>Paint</code>(画笔)、<code>Canvas</code>(画布)以及<code>Path</code>(路径)。当然其实不仅仅只有这三个可以作用于画图和图像处理，但它们是最基础的。</p>\n<h2 id=\"Paint\"><a href=\"#Paint\" class=\"headerlink\" title=\"Paint\"></a>Paint</h2><p>Paint 就是画笔，在 Android 图形绘制的时候，我们就好像真的有一个人拿着画笔把图像画出来一样，所以画笔这个类也给了我们和现实世界作画的时候一样的一些设定。</p>\n<p>我们可以通过 Paint 来设定线宽(就像现实中画笔的粗细)、颜色(颜料)、透明度以及填充风格等。</p>\n<p>我们可以通过它的构造函数来新建一个画笔</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Paint paint = <span class=\"keyword\">new</span> Paint();</div></pre></td></tr></table></figure>\n<p>然后对它进行一些设定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">paint.setARGB(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 设置 ARGB 颜色 int</span></div><div class=\"line\">paint.setAlpha(<span class=\"number\">0</span>); <span class=\"comment\">// 设置透明度 int</span></div><div class=\"line\">paint.setColor(getResources().getColor(android.R.color.black)); <span class=\"comment\">// 设置颜色</span></div><div class=\"line\">paint.setAntiAlias(<span class=\"keyword\">true</span>); <span class=\"comment\">// 开启抗锯齿</span></div><div class=\"line\">paint.setDither(<span class=\"keyword\">true</span>); <span class=\"comment\">// 开启抖动处理，使得绘制的图形更清晰</span></div><div class=\"line\">paint.setFilterBitmap(<span class=\"keyword\">true</span>); <span class=\"comment\">// 滤掉对Bitmap图像的优化操作,加快显示速度</span></div><div class=\"line\">paint.setMaskFilter(maskFilter); <span class=\"comment\">// 添加滤镜</span></div><div class=\"line\">paint.setColorFilter(colorFilter); <span class=\"comment\">// 设置颜色过滤器</span></div><div class=\"line\">paint.setPathEffect(pathEffect); <span class=\"comment\">// 设置路径效果(如虚线等)</span></div><div class=\"line\">paint.setShader(shader); <span class=\"comment\">// 设置渐变效果</span></div><div class=\"line\">paint.setShadowLayer(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, Color.GRAY); <span class=\"comment\">// 半径2,x,y 距离为2，颜色灰色的阴影</span></div><div class=\"line\">paint.setStyle(Paint.Style.FILL_AND_STROKE); <span class=\"comment\">// 画笔样式(内部、边框还是both，画封闭图形的时候比较重要)</span></div><div class=\"line\">paint.setStrokeCap(Paint.Cap.SQUARE); <span class=\"comment\">// 方形笔刷</span></div><div class=\"line\">paint.setStrokeJoin(Paint.Join.MITER); <span class=\"comment\">// 各图形的结合方式</span></div><div class=\"line\">paint.setStrokeWidth(<span class=\"number\">2</span>); <span class=\"comment\">// 画笔粗细</span></div><div class=\"line\">paint.setXfermode(xfermode); <span class=\"comment\">// 图形重叠时的处理方式</span></div><div class=\"line\">paint.setFakeBoldText(<span class=\"keyword\">true</span>); <span class=\"comment\">// 模拟粗体</span></div><div class=\"line\">paint.setSubpixelText(<span class=\"keyword\">true</span>); <span class=\"comment\">// 提升文字在 LCD 的显示效果</span></div><div class=\"line\">paint.setTextAlign(Paint.Align.CENTER); <span class=\"comment\">// 文字对齐方向</span></div><div class=\"line\">paint.setTextScaleX(<span class=\"number\">0.5</span>); <span class=\"comment\">// 文字 X 轴缩放</span></div><div class=\"line\">paint.setTextSize(<span class=\"number\">40</span>); <span class=\"comment\">// 文字大小</span></div><div class=\"line\">paint.setTextSkewX(<span class=\"number\">30</span>); <span class=\"comment\">// 文字倾斜度</span></div><div class=\"line\">paint.setTypeface(Typeface.SANS_SERIF); <span class=\"comment\">// 字体风格</span></div><div class=\"line\">paint.setUnderlineText(<span class=\"keyword\">true</span>); <span class=\"comment\">// 下划线</span></div><div class=\"line\">paint.setStrikeThruText(<span class=\"keyword\">true</span>); <span class=\"comment\">// 删除线</span></div><div class=\"line\">paint.setStrokeJoin(Paint.Join.ROUND); <span class=\"comment\">// 结合处风格</span></div><div class=\"line\">paint.setStrokeMiter(<span class=\"number\">30</span>); <span class=\"comment\">// 画笔倾斜度</span></div><div class=\"line\">paint.setStrokeCap(Paint.Cap.ROUND); <span class=\"comment\">// 拐角处风格</span></div><div class=\"line\">paint.ascent(); <span class=\"comment\">// baseline之上至字符最高处的距离</span></div><div class=\"line\">paint.descent(); <span class=\"comment\">// baseline之下至字符最低处的距离</span></div><div class=\"line\">paint.clearShadowLayer(); <span class=\"comment\">// 清除阴影</span></div><div class=\"line\"><span class=\"comment\">// 等等</span></div></pre></td></tr></table></figure>\n<p>但我们光有画笔还是不够的，我们至少还需要画布(Canvas)才可以真正开始作画呢。</p>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><p>Canvas 就是画布，我们有了画笔和画布就可以开始作画(图形绘制)了。</p>\n<p>我们有两种创建 Canvas 的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Canvas canvas = <span class=\"keyword\">new</span> Canvas();</div><div class=\"line\">Canvas canvasByBitmap = <span class=\"keyword\">new</span> Canvas(bitmap);</div></pre></td></tr></table></figure>\n<p>其中传入 Bitmap 的方法会将 Bitmap 作为画布的背景。</p>\n<p>下面是常用的<code>drawXXX()</code>方法，它们被用于绘制不同的图形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">canvas.drawRect(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), mPaint); <span class=\"comment\">// 绘制一个方形</span></div><div class=\"line\">canvas.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint); <span class=\"comment\">// 绘制一个方形</span></div><div class=\"line\">canvas.drawPath(path, paint); <span class=\"comment\">// 绘制一个路径</span></div><div class=\"line\">canvas.drawBitmap(bitmap, src, dst, mPaint); <span class=\"comment\">// 第二和第三个参数是 Rect</span></div><div class=\"line\">canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint); <span class=\"comment\">// 画线</span></div><div class=\"line\">canvas.drawPoint(<span class=\"number\">100</span>, <span class=\"number\">20</span>, mPaint); <span class=\"comment\">// 画点</span></div><div class=\"line\">canvas.drawText(<span class=\"string\">\"这是一段文字\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, mPaint); <span class=\"comment\">// 画文字</span></div><div class=\"line\">canvas.drawOval(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>), mPaint); <span class=\"comment\">// 画方形的内切椭圆</span></div><div class=\"line\">canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>, mPaint); <span class=\"comment\">// 画圆</span></div><div class=\"line\">canvas.drawArc(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), <span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"keyword\">true</span>, mPaint); <span class=\"comment\">// 一个矩形内的扇形</span></div></pre></td></tr></table></figure>\n<p>还有<code>clipXXX()</code>方法，它们是裁剪一块新的区域用于绘图，这里就不详细说明了。</p>\n<p><code>save()</code>和<code>restore()</code>方法用来保存和恢复 Canvas 的状态，简单而言就是一个存档，一个恢复存档。</p>\n<p>还有就是三个变换方法：<code>translate</code>(平移)、<code>scale</code>(缩放)以及<code>rotate</code>(旋转)了，它们可以控制画布的一些动作，就好像我们真实世界中作画的时候对画布的一些动作一样(除了缩放，2333)。</p>\n<h2 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"Path\"></a>Path</h2><p>其实在有了上面两个类之后我们就已经可以开始绘制了，但还是先把 Path 也介绍完毕之后再开始真实案例吧。</p>\n<p>Path 就是路径，有点像我们在初中数学中学习函数的时候，可以根据几个点确认画出一个函数的图形。</p>\n<p>下面是一些常用的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">path.addArc(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), <span class=\"number\">0</span>, <span class=\"number\">30</span>); <span class=\"comment\">// 添加一段圆弧</span></div><div class=\"line\">path.addCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>, Path.Direction.CW); <span class=\"comment\">// 顺时针圆</span></div><div class=\"line\">path.addOval(rectF, Path.Direction.CCW); <span class=\"comment\">// 逆时针椭圆</span></div><div class=\"line\">path.addRect(rectF, Path.Direction.CW); <span class=\"comment\">// 添加矩形</span></div><div class=\"line\">path.addRoundRect(rectF, &#123;<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>&#125;, path.Direction.CW); <span class=\"comment\">// 添加圆角矩形</span></div><div class=\"line\">path.isEmpty(); <span class=\"comment\">// 是否无路径</span></div><div class=\"line\">path.transform(matrix); <span class=\"comment\">// 矩阵变换</span></div><div class=\"line\">path.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>); <span class=\"comment\">// 移动画笔而不绘制</span></div><div class=\"line\">path.lineTo(<span class=\"number\">300</span>, <span class=\"number\">300</span>); <span class=\"comment\">// 默认从(0，0)开始绘制,可以用 moveTo 移动起始点,调用 canvas.drawPath(path, paint) 绘制</span></div><div class=\"line\">path.quadTo(x1, y1, x2, y2); <span class=\"comment\">// 绘制贝塞尔曲线,三点(起始点默认(0, 0))确认</span></div><div class=\"line\">path.rCubicTo(x1, y1, x2, y2, x3, y3); <span class=\"comment\">// 多一个控制点的贝塞尔曲线</span></div><div class=\"line\">path.arcTo(rectF, <span class=\"number\">0</span>, <span class=\"number\">50</span>); <span class=\"comment\">// 圆弧</span></div></pre></td></tr></table></figure>\n<h1 id=\"开始绘制\"><a href=\"#开始绘制\" class=\"headerlink\" title=\"开始绘制\"></a>开始绘制</h1><p>介绍完了三个绘制 UI 的基础类，那么我们现在来动手试试吧。难度从低到高，循序渐进完成自定义 View 中复杂图形的绘制。</p>\n<p>我们自定义一个 View 并且要重新绘制的话，我们只需要新建一个类<strong>继承</strong> View 并且实现<code>onDraw(Canvas canvas)</code>即可，View 会调用子类实现的<code>onDraw</code>完成绘制。</p>\n<p>那么我们接下来的示例就只列出<code>onDraw</code>方法和对应的效果图了。</p>\n<h2 id=\"简单图形\"><a href=\"#简单图形\" class=\"headerlink\" title=\"简单图形\"></a>简单图形</h2><h3 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    <span class=\"comment\">// 在构造函数中初始化画笔并设置为黑色</span></div><div class=\"line\">    canvas.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, mPaint);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-1.png\" alt=\"黑色矩形\"></p>\n<h3 id=\"线段\"><a href=\"#线段\" class=\"headerlink\" title=\"线段\"></a>线段</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, mPaint);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-2.png\" alt=\"线段\"></p>\n<h3 id=\"圆形\"><a href=\"#圆形\" class=\"headerlink\" title=\"圆形\"></a>圆形</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-3.png\" alt=\"圆形\"></p>\n<h3 id=\"画布底色\"><a href=\"#画布底色\" class=\"headerlink\" title=\"画布底色\"></a>画布底色</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    canvas.drawColor(getResources().getColor(android.R.color.darker_gray));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-4.png\" alt=\"画布底色\"></p>\n<h2 id=\"复杂图形\"><a href=\"#复杂图形\" class=\"headerlink\" title=\"复杂图形\"></a>复杂图形</h2><h3 id=\"刻度尺\"><a href=\"#刻度尺\" class=\"headerlink\" title=\"刻度尺\"></a>刻度尺</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    <span class=\"comment\">// 防止数字0出界</span></div><div class=\"line\">    canvas.translate(<span class=\"number\">0</span>, <span class=\"number\">50</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">10</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 带有数字的长刻度</span></div><div class=\"line\">            canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">70</span>, <span class=\"number\">0</span>, mPaint);</div><div class=\"line\">            <span class=\"comment\">// 画文字</span></div><div class=\"line\">            canvas.drawText(String.format(Locale.CHINESE, <span class=\"string\">\"%d\"</span>, i / <span class=\"number\">10</span>), <span class=\"number\">100</span>, <span class=\"number\">10</span>, mPaint);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 每隔5的中等长度的刻度</span></div><div class=\"line\">            canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">0</span>, mPaint);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 其它小刻度</span></div><div class=\"line\">            canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, mPaint);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 每个刻度画完之后位移</span></div><div class=\"line\">        canvas.translate(<span class=\"number\">0</span>, <span class=\"number\">15</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-5.png\" alt=\"刻度尺\"></p>\n<h3 id=\"手表表盘\"><a href=\"#手表表盘\" class=\"headerlink\" title=\"手表表盘\"></a>手表表盘</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    <span class=\"comment\">// 绘制外圈圆</span></div><div class=\"line\">    canvas.drawCircle(<span class=\"number\">400</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>, mPaint);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 绘制分针和时针</span></div><div class=\"line\">    canvas.drawLine(<span class=\"number\">400</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>, <span class=\"number\">200</span>, mPaint);</div><div class=\"line\">    canvas.drawLine(<span class=\"number\">400</span>, <span class=\"number\">400</span>, <span class=\"number\">550</span>, <span class=\"number\">400</span>, mPaint);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 绘制刻度和文字</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">12</span>; i++) &#123;</div><div class=\"line\">        canvas.drawLine(<span class=\"number\">400</span>, <span class=\"number\">0</span>, <span class=\"number\">400</span>, <span class=\"number\">10</span>, mPaint);</div><div class=\"line\">        canvas.drawText(String.format(Locale.CHINESE, <span class=\"string\">\"%d\"</span>, i == <span class=\"number\">0</span> ? <span class=\"number\">12</span> : i),</div><div class=\"line\">                <span class=\"number\">400</span>, <span class=\"number\">100</span>, mTextPaint);</div><div class=\"line\">        <span class=\"comment\">// 旋转画布</span></div><div class=\"line\">        canvas.rotate(<span class=\"number\">30</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-6.png\" alt=\"表盘\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实 Android 中的图形绘制基本就是靠这三个类扩展变化而来，掌握了它们的使用方式我们也就可以定义各种各样的好看的自定义控件了。</p>\n<p>那么我们掌握了绘制之后，我们还要考虑的就是自定义 View 的测量了，我会在之后再写一篇博文来总结我学习自定义 View 的测量的一些经验，感谢观看（虽然并不会有多少人看……）。</p>\n","excerpt":"","more":"<blockquote>\n<p>虽然我们在开发中基本可以用 Android 自带的各种控件实现绝大多数的功能，但难以避免还是有一些需求是自带的控件无法实现的。这个时候我们通常会想到去 Github 上寻找开源控件，但有的东西是有成熟的实现如：ViewPager 的 Indicator。而有的就没那么容易找到了。</p>\n<p>还有就是虽然我们平时的一些需求可以使用图片资源代替，但过多的图片资源不仅会使得应用体积增大，还会使得加载的过程中消耗不少的系统资源（内存以及 CPU）—— 我曾经就这么干过，至少这种方法做东西很快（但也很坑）。</p>\n<p>这个时候我们就应该想到自定义 View 了，下面就讲讲我在学习自定义 View 的一些心得体会吧。</p>\n</blockquote>\n<h1 id=\"View绘制流程\"><a href=\"#View绘制流程\" class=\"headerlink\" title=\"View绘制流程\"></a>View绘制流程</h1><p>View 的绘制是从 ViewRoot 的<code>performTraversals()</code>方法开始的，其执行过程可简单概括为根据之前所有设置好的状态，判断是否需要计算视图大小（measure）、是否需要重新安置视图的位置（layout），以及是否需要重绘（draw）视图，其流程图如下所示：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-flow.png\" alt=\"流程图\"></p>\n<p>而我们今天讲的自定义 View 的绘制，主要就是在是否需要重新 draw 这一步来实现。</p>\n<h1 id=\"三个绘图工具类简介\"><a href=\"#三个绘图工具类简介\" class=\"headerlink\" title=\"三个绘图工具类简介\"></a>三个绘图工具类简介</h1><p>要在自定义 View 中进行重新绘制，我们首先需要了解一下 Android 中的三个重要的绘图工具类，它们就是<code>Paint</code>(画笔)、<code>Canvas</code>(画布)以及<code>Path</code>(路径)。当然其实不仅仅只有这三个可以作用于画图和图像处理，但它们是最基础的。</p>\n<h2 id=\"Paint\"><a href=\"#Paint\" class=\"headerlink\" title=\"Paint\"></a>Paint</h2><p>Paint 就是画笔，在 Android 图形绘制的时候，我们就好像真的有一个人拿着画笔把图像画出来一样，所以画笔这个类也给了我们和现实世界作画的时候一样的一些设定。</p>\n<p>我们可以通过 Paint 来设定线宽(就像现实中画笔的粗细)、颜色(颜料)、透明度以及填充风格等。</p>\n<p>我们可以通过它的构造函数来新建一个画笔</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Paint paint = <span class=\"keyword\">new</span> Paint();</div></pre></td></tr></table></figure>\n<p>然后对它进行一些设定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">paint.setARGB(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 设置 ARGB 颜色 int</span></div><div class=\"line\">paint.setAlpha(<span class=\"number\">0</span>); <span class=\"comment\">// 设置透明度 int</span></div><div class=\"line\">paint.setColor(getResources().getColor(android.R.color.black)); <span class=\"comment\">// 设置颜色</span></div><div class=\"line\">paint.setAntiAlias(<span class=\"keyword\">true</span>); <span class=\"comment\">// 开启抗锯齿</span></div><div class=\"line\">paint.setDither(<span class=\"keyword\">true</span>); <span class=\"comment\">// 开启抖动处理，使得绘制的图形更清晰</span></div><div class=\"line\">paint.setFilterBitmap(<span class=\"keyword\">true</span>); <span class=\"comment\">// 滤掉对Bitmap图像的优化操作,加快显示速度</span></div><div class=\"line\">paint.setMaskFilter(maskFilter); <span class=\"comment\">// 添加滤镜</span></div><div class=\"line\">paint.setColorFilter(colorFilter); <span class=\"comment\">// 设置颜色过滤器</span></div><div class=\"line\">paint.setPathEffect(pathEffect); <span class=\"comment\">// 设置路径效果(如虚线等)</span></div><div class=\"line\">paint.setShader(shader); <span class=\"comment\">// 设置渐变效果</span></div><div class=\"line\">paint.setShadowLayer(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, Color.GRAY); <span class=\"comment\">// 半径2,x,y 距离为2，颜色灰色的阴影</span></div><div class=\"line\">paint.setStyle(Paint.Style.FILL_AND_STROKE); <span class=\"comment\">// 画笔样式(内部、边框还是both，画封闭图形的时候比较重要)</span></div><div class=\"line\">paint.setStrokeCap(Paint.Cap.SQUARE); <span class=\"comment\">// 方形笔刷</span></div><div class=\"line\">paint.setStrokeJoin(Paint.Join.MITER); <span class=\"comment\">// 各图形的结合方式</span></div><div class=\"line\">paint.setStrokeWidth(<span class=\"number\">2</span>); <span class=\"comment\">// 画笔粗细</span></div><div class=\"line\">paint.setXfermode(xfermode); <span class=\"comment\">// 图形重叠时的处理方式</span></div><div class=\"line\">paint.setFakeBoldText(<span class=\"keyword\">true</span>); <span class=\"comment\">// 模拟粗体</span></div><div class=\"line\">paint.setSubpixelText(<span class=\"keyword\">true</span>); <span class=\"comment\">// 提升文字在 LCD 的显示效果</span></div><div class=\"line\">paint.setTextAlign(Paint.Align.CENTER); <span class=\"comment\">// 文字对齐方向</span></div><div class=\"line\">paint.setTextScaleX(<span class=\"number\">0.5</span>); <span class=\"comment\">// 文字 X 轴缩放</span></div><div class=\"line\">paint.setTextSize(<span class=\"number\">40</span>); <span class=\"comment\">// 文字大小</span></div><div class=\"line\">paint.setTextSkewX(<span class=\"number\">30</span>); <span class=\"comment\">// 文字倾斜度</span></div><div class=\"line\">paint.setTypeface(Typeface.SANS_SERIF); <span class=\"comment\">// 字体风格</span></div><div class=\"line\">paint.setUnderlineText(<span class=\"keyword\">true</span>); <span class=\"comment\">// 下划线</span></div><div class=\"line\">paint.setStrikeThruText(<span class=\"keyword\">true</span>); <span class=\"comment\">// 删除线</span></div><div class=\"line\">paint.setStrokeJoin(Paint.Join.ROUND); <span class=\"comment\">// 结合处风格</span></div><div class=\"line\">paint.setStrokeMiter(<span class=\"number\">30</span>); <span class=\"comment\">// 画笔倾斜度</span></div><div class=\"line\">paint.setStrokeCap(Paint.Cap.ROUND); <span class=\"comment\">// 拐角处风格</span></div><div class=\"line\">paint.ascent(); <span class=\"comment\">// baseline之上至字符最高处的距离</span></div><div class=\"line\">paint.descent(); <span class=\"comment\">// baseline之下至字符最低处的距离</span></div><div class=\"line\">paint.clearShadowLayer(); <span class=\"comment\">// 清除阴影</span></div><div class=\"line\"><span class=\"comment\">// 等等</span></div></pre></td></tr></table></figure>\n<p>但我们光有画笔还是不够的，我们至少还需要画布(Canvas)才可以真正开始作画呢。</p>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><p>Canvas 就是画布，我们有了画笔和画布就可以开始作画(图形绘制)了。</p>\n<p>我们有两种创建 Canvas 的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Canvas canvas = <span class=\"keyword\">new</span> Canvas();</div><div class=\"line\">Canvas canvasByBitmap = <span class=\"keyword\">new</span> Canvas(bitmap);</div></pre></td></tr></table></figure>\n<p>其中传入 Bitmap 的方法会将 Bitmap 作为画布的背景。</p>\n<p>下面是常用的<code>drawXXX()</code>方法，它们被用于绘制不同的图形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">canvas.drawRect(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), mPaint); <span class=\"comment\">// 绘制一个方形</span></div><div class=\"line\">canvas.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint); <span class=\"comment\">// 绘制一个方形</span></div><div class=\"line\">canvas.drawPath(path, paint); <span class=\"comment\">// 绘制一个路径</span></div><div class=\"line\">canvas.drawBitmap(bitmap, src, dst, mPaint); <span class=\"comment\">// 第二和第三个参数是 Rect</span></div><div class=\"line\">canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint); <span class=\"comment\">// 画线</span></div><div class=\"line\">canvas.drawPoint(<span class=\"number\">100</span>, <span class=\"number\">20</span>, mPaint); <span class=\"comment\">// 画点</span></div><div class=\"line\">canvas.drawText(<span class=\"string\">\"这是一段文字\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, mPaint); <span class=\"comment\">// 画文字</span></div><div class=\"line\">canvas.drawOval(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>), mPaint); <span class=\"comment\">// 画方形的内切椭圆</span></div><div class=\"line\">canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>, mPaint); <span class=\"comment\">// 画圆</span></div><div class=\"line\">canvas.drawArc(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), <span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"keyword\">true</span>, mPaint); <span class=\"comment\">// 一个矩形内的扇形</span></div></pre></td></tr></table></figure>\n<p>还有<code>clipXXX()</code>方法，它们是裁剪一块新的区域用于绘图，这里就不详细说明了。</p>\n<p><code>save()</code>和<code>restore()</code>方法用来保存和恢复 Canvas 的状态，简单而言就是一个存档，一个恢复存档。</p>\n<p>还有就是三个变换方法：<code>translate</code>(平移)、<code>scale</code>(缩放)以及<code>rotate</code>(旋转)了，它们可以控制画布的一些动作，就好像我们真实世界中作画的时候对画布的一些动作一样(除了缩放，2333)。</p>\n<h2 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"Path\"></a>Path</h2><p>其实在有了上面两个类之后我们就已经可以开始绘制了，但还是先把 Path 也介绍完毕之后再开始真实案例吧。</p>\n<p>Path 就是路径，有点像我们在初中数学中学习函数的时候，可以根据几个点确认画出一个函数的图形。</p>\n<p>下面是一些常用的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">path.addArc(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), <span class=\"number\">0</span>, <span class=\"number\">30</span>); <span class=\"comment\">// 添加一段圆弧</span></div><div class=\"line\">path.addCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>, Path.Direction.CW); <span class=\"comment\">// 顺时针圆</span></div><div class=\"line\">path.addOval(rectF, Path.Direction.CCW); <span class=\"comment\">// 逆时针椭圆</span></div><div class=\"line\">path.addRect(rectF, Path.Direction.CW); <span class=\"comment\">// 添加矩形</span></div><div class=\"line\">path.addRoundRect(rectF, &#123;<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>&#125;, path.Direction.CW); <span class=\"comment\">// 添加圆角矩形</span></div><div class=\"line\">path.isEmpty(); <span class=\"comment\">// 是否无路径</span></div><div class=\"line\">path.transform(matrix); <span class=\"comment\">// 矩阵变换</span></div><div class=\"line\">path.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>); <span class=\"comment\">// 移动画笔而不绘制</span></div><div class=\"line\">path.lineTo(<span class=\"number\">300</span>, <span class=\"number\">300</span>); <span class=\"comment\">// 默认从(0，0)开始绘制,可以用 moveTo 移动起始点,调用 canvas.drawPath(path, paint) 绘制</span></div><div class=\"line\">path.quadTo(x1, y1, x2, y2); <span class=\"comment\">// 绘制贝塞尔曲线,三点(起始点默认(0, 0))确认</span></div><div class=\"line\">path.rCubicTo(x1, y1, x2, y2, x3, y3); <span class=\"comment\">// 多一个控制点的贝塞尔曲线</span></div><div class=\"line\">path.arcTo(rectF, <span class=\"number\">0</span>, <span class=\"number\">50</span>); <span class=\"comment\">// 圆弧</span></div></pre></td></tr></table></figure>\n<h1 id=\"开始绘制\"><a href=\"#开始绘制\" class=\"headerlink\" title=\"开始绘制\"></a>开始绘制</h1><p>介绍完了三个绘制 UI 的基础类，那么我们现在来动手试试吧。难度从低到高，循序渐进完成自定义 View 中复杂图形的绘制。</p>\n<p>我们自定义一个 View 并且要重新绘制的话，我们只需要新建一个类<strong>继承</strong> View 并且实现<code>onDraw(Canvas canvas)</code>即可，View 会调用子类实现的<code>onDraw</code>完成绘制。</p>\n<p>那么我们接下来的示例就只列出<code>onDraw</code>方法和对应的效果图了。</p>\n<h2 id=\"简单图形\"><a href=\"#简单图形\" class=\"headerlink\" title=\"简单图形\"></a>简单图形</h2><h3 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    <span class=\"comment\">// 在构造函数中初始化画笔并设置为黑色</span></div><div class=\"line\">    canvas.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, mPaint);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-1.png\" alt=\"黑色矩形\"></p>\n<h3 id=\"线段\"><a href=\"#线段\" class=\"headerlink\" title=\"线段\"></a>线段</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, mPaint);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-2.png\" alt=\"线段\"></p>\n<h3 id=\"圆形\"><a href=\"#圆形\" class=\"headerlink\" title=\"圆形\"></a>圆形</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-3.png\" alt=\"圆形\"></p>\n<h3 id=\"画布底色\"><a href=\"#画布底色\" class=\"headerlink\" title=\"画布底色\"></a>画布底色</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    canvas.drawColor(getResources().getColor(android.R.color.darker_gray));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-4.png\" alt=\"画布底色\"></p>\n<h2 id=\"复杂图形\"><a href=\"#复杂图形\" class=\"headerlink\" title=\"复杂图形\"></a>复杂图形</h2><h3 id=\"刻度尺\"><a href=\"#刻度尺\" class=\"headerlink\" title=\"刻度尺\"></a>刻度尺</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    <span class=\"comment\">// 防止数字0出界</span></div><div class=\"line\">    canvas.translate(<span class=\"number\">0</span>, <span class=\"number\">50</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">10</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 带有数字的长刻度</span></div><div class=\"line\">            canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">70</span>, <span class=\"number\">0</span>, mPaint);</div><div class=\"line\">            <span class=\"comment\">// 画文字</span></div><div class=\"line\">            canvas.drawText(String.format(Locale.CHINESE, <span class=\"string\">\"%d\"</span>, i / <span class=\"number\">10</span>), <span class=\"number\">100</span>, <span class=\"number\">10</span>, mPaint);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 每隔5的中等长度的刻度</span></div><div class=\"line\">            canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">0</span>, mPaint);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 其它小刻度</span></div><div class=\"line\">            canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, mPaint);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 每个刻度画完之后位移</span></div><div class=\"line\">        canvas.translate(<span class=\"number\">0</span>, <span class=\"number\">15</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-5.png\" alt=\"刻度尺\"></p>\n<h3 id=\"手表表盘\"><a href=\"#手表表盘\" class=\"headerlink\" title=\"手表表盘\"></a>手表表盘</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    <span class=\"comment\">// 绘制外圈圆</span></div><div class=\"line\">    canvas.drawCircle(<span class=\"number\">400</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>, mPaint);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 绘制分针和时针</span></div><div class=\"line\">    canvas.drawLine(<span class=\"number\">400</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>, <span class=\"number\">200</span>, mPaint);</div><div class=\"line\">    canvas.drawLine(<span class=\"number\">400</span>, <span class=\"number\">400</span>, <span class=\"number\">550</span>, <span class=\"number\">400</span>, mPaint);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 绘制刻度和文字</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">12</span>; i++) &#123;</div><div class=\"line\">        canvas.drawLine(<span class=\"number\">400</span>, <span class=\"number\">0</span>, <span class=\"number\">400</span>, <span class=\"number\">10</span>, mPaint);</div><div class=\"line\">        canvas.drawText(String.format(Locale.CHINESE, <span class=\"string\">\"%d\"</span>, i == <span class=\"number\">0</span> ? <span class=\"number\">12</span> : i),</div><div class=\"line\">                <span class=\"number\">400</span>, <span class=\"number\">100</span>, mTextPaint);</div><div class=\"line\">        <span class=\"comment\">// 旋转画布</span></div><div class=\"line\">        canvas.rotate(<span class=\"number\">30</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-6.png\" alt=\"表盘\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实 Android 中的图形绘制基本就是靠这三个类扩展变化而来，掌握了它们的使用方式我们也就可以定义各种各样的好看的自定义控件了。</p>\n<p>那么我们掌握了绘制之后，我们还要考虑的就是自定义 View 的测量了，我会在之后再写一篇博文来总结我学习自定义 View 的测量的一些经验，感谢观看（虽然并不会有多少人看……）。</p>\n"},{"title":"背景色渐变的引导页","date":"2016-03-31T18:03:33.000Z","toc":true,"description":"Google 的不少 App 都已经使用了背景色渐变的引导页，我也跟风实现一个","_content":"\n# 使用什么实现\n\n还用问么，ViewPager 以及 Fragment 呀，非常简单。\n\n# 关键 API\n\n下面的 API 可以根据初始颜色和结束颜色计算中间值。\n\n```java\nObject ArgbEvaluator.evaluate(float fraction, Object startValue, Object endValue);\n```\n\n# 具体实现\n\n## 布局\n\n* activity_main.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"me.loshine.guidedemo.MainActivity\">\n\n    <android.support.v4.view.ViewPager\n        android:id=\"@+id/view_pager\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n\n</RelativeLayout>\n```\n\n## 处理滑动背景色\n\n* MainActivity.xml\n\n```java\npublic class MainActivity extends AppCompatActivity implements ViewPager.OnPageChangeListener {\n\n    ViewPager mViewPager;\n\n    private int[] colors;\n    private int state = ViewPager.SCROLL_STATE_IDLE; // 初始位于停止滑动状态\n\n    private ArgbEvaluator mArgbEvaluator;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        initColors();\n        initViewPager();\n    }\n\n    /**\n     * 初始化 ViewPager\n     */\n    private void initViewPager() {\n        mViewPager = (ViewPager) findViewById(R.id.view_pager);\n        if (mViewPager != null) {\n            // 初始颜色\n            mViewPager.setBackgroundColor(colors[0]);\n            mViewPager.setAdapter(new FragmentStatePagerAdapter(getSupportFragmentManager()) {\n                @Override\n                public Fragment getItem(int position) {\n                    return GuideBaseFragment.newInstance(position);\n                }\n\n                @Override\n                public int getCount() {\n                    return 4;\n                }\n            });\n\n            mViewPager.addOnPageChangeListener(this);\n        }\n    }\n\n    /**\n     * 初始化颜色\n     */\n    private void initColors() {\n        colors = new int[4];\n        colors[0] = getResources().getColor(R.color.guideBackgroundColor1);\n        colors[1] = getResources().getColor(R.color.guideBackgroundColor2);\n        colors[2] = getResources().getColor(R.color.guideBackgroundColor3);\n        colors[3] = getResources().getColor(R.color.guideBackgroundColor4);\n\n        mArgbEvaluator = new ArgbEvaluator();\n    }\n\n    @Override\n    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n        // 只要不是滑动停止状态就计算颜色\n        if (state != ViewPager.SCROLL_STATE_IDLE) {\n            if (positionOffset > 0 && position < 4) {\n                int evaluatePreColor = (int) mArgbEvaluator\n                        .evaluate(positionOffset, colors[position], colors[position + 1]);\n                mViewPager.setBackgroundColor(evaluatePreColor);\n            } else if (positionOffset < 0 && position > 0) {\n                int evaluateNextColor = (int) mArgbEvaluator\n                        .evaluate(-positionOffset, colors[position], colors[position - 1]);\n                mViewPager.setBackgroundColor(evaluateNextColor);\n            }\n        }\n    }\n\n    @Override\n    public void onPageSelected(int position) {\n    }\n\n    @Override\n    public void onPageScrollStateChanged(int state) {\n        this.state = state;\n    }\n}\n```\n\n# 总结\n\n其实实现方式并不复杂，监听 ViewPager 的滚动然后计算中间值即可，重要的是又学习到酷炫的新东西了。","source":"_posts/2016-04-20-guide-with-gradual-background.md","raw":"---\ntitle: 背景色渐变的引导页\ndate: 2016-04-01 02:03:33\ncategory: [技术]\ntags: [Android,Java]\ntoc: true\ndescription: Google 的不少 App 都已经使用了背景色渐变的引导页，我也跟风实现一个\n---\n\n# 使用什么实现\n\n还用问么，ViewPager 以及 Fragment 呀，非常简单。\n\n# 关键 API\n\n下面的 API 可以根据初始颜色和结束颜色计算中间值。\n\n```java\nObject ArgbEvaluator.evaluate(float fraction, Object startValue, Object endValue);\n```\n\n# 具体实现\n\n## 布局\n\n* activity_main.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"me.loshine.guidedemo.MainActivity\">\n\n    <android.support.v4.view.ViewPager\n        android:id=\"@+id/view_pager\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n\n</RelativeLayout>\n```\n\n## 处理滑动背景色\n\n* MainActivity.xml\n\n```java\npublic class MainActivity extends AppCompatActivity implements ViewPager.OnPageChangeListener {\n\n    ViewPager mViewPager;\n\n    private int[] colors;\n    private int state = ViewPager.SCROLL_STATE_IDLE; // 初始位于停止滑动状态\n\n    private ArgbEvaluator mArgbEvaluator;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        initColors();\n        initViewPager();\n    }\n\n    /**\n     * 初始化 ViewPager\n     */\n    private void initViewPager() {\n        mViewPager = (ViewPager) findViewById(R.id.view_pager);\n        if (mViewPager != null) {\n            // 初始颜色\n            mViewPager.setBackgroundColor(colors[0]);\n            mViewPager.setAdapter(new FragmentStatePagerAdapter(getSupportFragmentManager()) {\n                @Override\n                public Fragment getItem(int position) {\n                    return GuideBaseFragment.newInstance(position);\n                }\n\n                @Override\n                public int getCount() {\n                    return 4;\n                }\n            });\n\n            mViewPager.addOnPageChangeListener(this);\n        }\n    }\n\n    /**\n     * 初始化颜色\n     */\n    private void initColors() {\n        colors = new int[4];\n        colors[0] = getResources().getColor(R.color.guideBackgroundColor1);\n        colors[1] = getResources().getColor(R.color.guideBackgroundColor2);\n        colors[2] = getResources().getColor(R.color.guideBackgroundColor3);\n        colors[3] = getResources().getColor(R.color.guideBackgroundColor4);\n\n        mArgbEvaluator = new ArgbEvaluator();\n    }\n\n    @Override\n    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n        // 只要不是滑动停止状态就计算颜色\n        if (state != ViewPager.SCROLL_STATE_IDLE) {\n            if (positionOffset > 0 && position < 4) {\n                int evaluatePreColor = (int) mArgbEvaluator\n                        .evaluate(positionOffset, colors[position], colors[position + 1]);\n                mViewPager.setBackgroundColor(evaluatePreColor);\n            } else if (positionOffset < 0 && position > 0) {\n                int evaluateNextColor = (int) mArgbEvaluator\n                        .evaluate(-positionOffset, colors[position], colors[position - 1]);\n                mViewPager.setBackgroundColor(evaluateNextColor);\n            }\n        }\n    }\n\n    @Override\n    public void onPageSelected(int position) {\n    }\n\n    @Override\n    public void onPageScrollStateChanged(int state) {\n        this.state = state;\n    }\n}\n```\n\n# 总结\n\n其实实现方式并不复杂，监听 ViewPager 的滚动然后计算中间值即可，重要的是又学习到酷炫的新东西了。","slug":"guide-with-gradual-background","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvr000vgy6emrju6til","content":"<h1 id=\"使用什么实现\"><a href=\"#使用什么实现\" class=\"headerlink\" title=\"使用什么实现\"></a>使用什么实现</h1><p>还用问么，ViewPager 以及 Fragment 呀，非常简单。</p>\n<h1 id=\"关键-API\"><a href=\"#关键-API\" class=\"headerlink\" title=\"关键 API\"></a>关键 API</h1><p>下面的 API 可以根据初始颜色和结束颜色计算中间值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object ArgbEvaluator.evaluate(<span class=\"keyword\">float</span> fraction, Object startValue, Object endValue);</div></pre></td></tr></table></figure>\n<h1 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h1><h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><ul>\n<li>activity_main.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"me.loshine.guidedemo.MainActivity\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_pager\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"处理滑动背景色\"><a href=\"#处理滑动背景色\" class=\"headerlink\" title=\"处理滑动背景色\"></a>处理滑动背景色</h2><ul>\n<li>MainActivity.xml</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">OnPageChangeListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ViewPager mViewPager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] colors;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> state = ViewPager.SCROLL_STATE_IDLE; <span class=\"comment\">// 初始位于停止滑动状态</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ArgbEvaluator mArgbEvaluator;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        initColors();</div><div class=\"line\">        initViewPager();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化 ViewPager</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initViewPager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mViewPager = (ViewPager) findViewById(R.id.view_pager);</div><div class=\"line\">        <span class=\"keyword\">if</span> (mViewPager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 初始颜色</span></div><div class=\"line\">            mViewPager.setBackgroundColor(colors[<span class=\"number\">0</span>]);</div><div class=\"line\">            mViewPager.setAdapter(<span class=\"keyword\">new</span> FragmentStatePagerAdapter(getSupportFragmentManager()) &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> GuideBaseFragment.newInstance(position);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            mViewPager.addOnPageChangeListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化颜色</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initColors</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        colors = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>];</div><div class=\"line\">        colors[<span class=\"number\">0</span>] = getResources().getColor(R.color.guideBackgroundColor1);</div><div class=\"line\">        colors[<span class=\"number\">1</span>] = getResources().getColor(R.color.guideBackgroundColor2);</div><div class=\"line\">        colors[<span class=\"number\">2</span>] = getResources().getColor(R.color.guideBackgroundColor3);</div><div class=\"line\">        colors[<span class=\"number\">3</span>] = getResources().getColor(R.color.guideBackgroundColor4);</div><div class=\"line\"></div><div class=\"line\">        mArgbEvaluator = <span class=\"keyword\">new</span> ArgbEvaluator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">float</span> positionOffset, <span class=\"keyword\">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 只要不是滑动停止状态就计算颜色</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (state != ViewPager.SCROLL_STATE_IDLE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (positionOffset &gt; <span class=\"number\">0</span> &amp;&amp; position &lt; <span class=\"number\">4</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> evaluatePreColor = (<span class=\"keyword\">int</span>) mArgbEvaluator</div><div class=\"line\">                        .evaluate(positionOffset, colors[position], colors[position + <span class=\"number\">1</span>]);</div><div class=\"line\">                mViewPager.setBackgroundColor(evaluatePreColor);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (positionOffset &lt; <span class=\"number\">0</span> &amp;&amp; position &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> evaluateNextColor = (<span class=\"keyword\">int</span>) mArgbEvaluator</div><div class=\"line\">                        .evaluate(-positionOffset, colors[position], colors[position - <span class=\"number\">1</span>]);</div><div class=\"line\">                mViewPager.setBackgroundColor(evaluateNextColor);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrollStateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实实现方式并不复杂，监听 ViewPager 的滚动然后计算中间值即可，重要的是又学习到酷炫的新东西了。</p>\n","excerpt":"","more":"<h1 id=\"使用什么实现\"><a href=\"#使用什么实现\" class=\"headerlink\" title=\"使用什么实现\"></a>使用什么实现</h1><p>还用问么，ViewPager 以及 Fragment 呀，非常简单。</p>\n<h1 id=\"关键-API\"><a href=\"#关键-API\" class=\"headerlink\" title=\"关键 API\"></a>关键 API</h1><p>下面的 API 可以根据初始颜色和结束颜色计算中间值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object ArgbEvaluator.evaluate(<span class=\"keyword\">float</span> fraction, Object startValue, Object endValue);</div></pre></td></tr></table></figure>\n<h1 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h1><h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><ul>\n<li>activity_main.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"me.loshine.guidedemo.MainActivity\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_pager\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"处理滑动背景色\"><a href=\"#处理滑动背景色\" class=\"headerlink\" title=\"处理滑动背景色\"></a>处理滑动背景色</h2><ul>\n<li>MainActivity.xml</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">OnPageChangeListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ViewPager mViewPager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] colors;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> state = ViewPager.SCROLL_STATE_IDLE; <span class=\"comment\">// 初始位于停止滑动状态</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ArgbEvaluator mArgbEvaluator;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        initColors();</div><div class=\"line\">        initViewPager();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 初始化 ViewPager</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initViewPager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mViewPager = (ViewPager) findViewById(R.id.view_pager);</div><div class=\"line\">        <span class=\"keyword\">if</span> (mViewPager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 初始颜色</span></div><div class=\"line\">            mViewPager.setBackgroundColor(colors[<span class=\"number\">0</span>]);</div><div class=\"line\">            mViewPager.setAdapter(<span class=\"keyword\">new</span> FragmentStatePagerAdapter(getSupportFragmentManager()) &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> GuideBaseFragment.newInstance(position);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            mViewPager.addOnPageChangeListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 初始化颜色</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initColors</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        colors = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>];</div><div class=\"line\">        colors[<span class=\"number\">0</span>] = getResources().getColor(R.color.guideBackgroundColor1);</div><div class=\"line\">        colors[<span class=\"number\">1</span>] = getResources().getColor(R.color.guideBackgroundColor2);</div><div class=\"line\">        colors[<span class=\"number\">2</span>] = getResources().getColor(R.color.guideBackgroundColor3);</div><div class=\"line\">        colors[<span class=\"number\">3</span>] = getResources().getColor(R.color.guideBackgroundColor4);</div><div class=\"line\"></div><div class=\"line\">        mArgbEvaluator = <span class=\"keyword\">new</span> ArgbEvaluator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">float</span> positionOffset, <span class=\"keyword\">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 只要不是滑动停止状态就计算颜色</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (state != ViewPager.SCROLL_STATE_IDLE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (positionOffset &gt; <span class=\"number\">0</span> &amp;&amp; position &lt; <span class=\"number\">4</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> evaluatePreColor = (<span class=\"keyword\">int</span>) mArgbEvaluator</div><div class=\"line\">                        .evaluate(positionOffset, colors[position], colors[position + <span class=\"number\">1</span>]);</div><div class=\"line\">                mViewPager.setBackgroundColor(evaluatePreColor);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (positionOffset &lt; <span class=\"number\">0</span> &amp;&amp; position &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> evaluateNextColor = (<span class=\"keyword\">int</span>) mArgbEvaluator</div><div class=\"line\">                        .evaluate(-positionOffset, colors[position], colors[position - <span class=\"number\">1</span>]);</div><div class=\"line\">                mViewPager.setBackgroundColor(evaluateNextColor);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrollStateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实实现方式并不复杂，监听 ViewPager 的滚动然后计算中间值即可，重要的是又学习到酷炫的新东西了。</p>\n"},{"title":"在Android开发中使用Lambda表达式","date":"2016-03-30T15:33:11.000Z","toc":true,"description":"由于三体人对我们的科技封锁，我们无法在 Android 开发中启用 Java 1.8 的重要特性——Lambda 表达式。但现在我们可以通过一些工具启用它，然后使用 Lambda 表达式替换没有什么实际意义的单方法匿名内部类。","_content":"\n> 由于三体人对我们的科技封锁，我们无法在 Android 开发中启用 Java 1.8 的重要特性——Lambda 表达式。但现在我们可以通过一些工具启用它，然后使用 Lambda 表达式替换没有什么实际意义的单方法匿名内部类。\n\n# Lambda表达式\n\n可能有些人还不太清楚到底什么是 Lambda 表达式，这里先对 Lambda 表达式进行一个简单的介绍。\n\nLambda 表达式是**函数式编程语言**的特性，它简单的说就是一个**匿名函数**。\n\n我们先看一个 Groovy 的例子：\n\n```groovy\n[1, 2, 3, 4, 5].asList().forEach { x -> println x }\n```\n\n在这个例子中，我们使用`foreach`来遍历一个`List`并打印每一个值。我们传入了一个 Lambda 表达式：`{ x -> println x }`，这个表达式就是我们对每一个值进行的操作，在本例中就是打印它们。\n\n在这里 Lambda 表达式是一个映射函数，`foreach`接受了它作为参数，然后对`List`中的每一个值进行遍历。\n\n在函数式编程语言中，函数是**一等公民**（first class）。它们也可以作为变量或者参数被传递而且它们也是一个类。\n\n但在 Java 中函数并不是一等公民，如果我们需要传递一个方法，必须要有一个对象包含这个方法，然后把这个对象传递过去。\n\n所以我们经常会见到类似这样的代码：\n\n```java\ntextView.setOnClickListener(new View.OnClickListener() {\n\t@Override\n\tpublic void onClick(View view) {\n\t\t// do what you want...\n\t}\n});\n```\n\n但是实际上，我们需要的只是`onClick`这个方法里面的内容，其它的部分（new OnClickListener）实在是没有什么实际的意义，只是一个必须的语法而已。\n\n所以 Java 1.8 也引入了部分函数式编程的特性——Lambda 表达式。\n\n如果使用 Lambda 表达式，上面那个例子可以被简化为这样\n\n```java\ntextView.setOnClickListener(v -> {\n\t// do what you want...\n});\n```\n\n如果只有一行代码我们还可以省略大括号\n\n```java\ntextView.setOnClickListener(v -> doSomething());\n```\n\n当啷啷~ 是不是省略了很多代码，有没有很爽的感觉。\n\n有了 Lambda 表达式，从此我们的代码可以清爽简洁，而且看起来也很好理解：箭头的左边是形参，右边是函数体，整个 Lambda 表达式就是一个函数（就是数学中的函数）。\n\n更多 Lambda 表达式的信息可以查看[《Java 8新特性：lambda表达式》——廖雪峰](http://www.liaoxuefeng.com/article/001411306573093ce6ebcdd67624db98acedb2a905c8ea4000)。\n\n# 如何使用\n\n安利了这么多 Lambda 表达式的优点，但由于众所周知的某些原因，Android 中的 Java 版本被限定在了 1.6 以下，所以也就没办法使用那么好的 Lambda 表达式了。\n\n但 Lambda 表达式这么好，你不让我用我就不用了么？我偏要用！\n\n好的，有以下两种方式都可以为我们开启 Lambda 表达式，我们只需要任选其一就可以了。\n\n## RetroLambda\n\nRetroLambda 的 Gradle 插件让我们可以在 Android 中使用 Lambda 表达式，那么我们看看如何使用它吧。\n\n### Project\n\n我们需要在项目目录下的`build.gradle`中加入它的`classpath`\n\n```gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.1.0-alpha4'\n     classpath 'me.tatarka:gradle-retrolambda:3.2.5'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n```\n\n在`dependencies`中加入`classpath 'me.tatarka:gradle-retrolambda:3.2.5'`\n\n### app module\n\n编辑`build.gradle`启用插件，并把 Java 语法调整到 1.8\n\n1. 在顶部启用插件\n```gradle\napply plugin: 'me.tatarka.retrolambda'\n```\n2. 在`android`中加入以下代码段启用 1.8 的语法\n```gradle\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n```\n\nEnjoy it !~\n\n## jack\n\njack 是 Java Android Compile Kit 的缩写，它是 Google 为 Android 推出的一个**编译工具包**，它的原理在这里就不详述了。它有一个特点就是可以使用 Lambda 表达式，而且配置十分简单。\n\n### 准备\n\n使用 jack 我们必须要把`buildTools`升级到**24以上**，我已经升级到了`24 RC`。\n\n### 使用\n\n编辑 app 模块中的`build.gradle`，在`defaultConfig`中加一行`        useJack true`，然后在`android`中添加如下一段代码\n\n```gradle\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n```\n\n然后就好了，是不是非常简单呢~\n\n# 总结\n\n在 Java 1.8 中的 Lambda 表达式实际上只是一个语法糖，它可以帮助我们简化代码，并且表述地更佳清晰。但 Java 目前来说并不是一门有函数式特性的编程语言，而且短期内不会加入函数式特性。如果你想使用一门拥有函数式特性的语言来写 Android Application 的话，可以考虑一下 Kotlin。","source":"_posts/2016-03-30-use-lambda-in-android.md","raw":"---\ntitle: 在Android开发中使用Lambda表达式\ndate: 2016-03-30 23:33:11\ncategory: [技术]\ntags: [Android,Java]\ntoc: true\ndescription: 由于三体人对我们的科技封锁，我们无法在 Android 开发中启用 Java 1.8 的重要特性——Lambda 表达式。但现在我们可以通过一些工具启用它，然后使用 Lambda 表达式替换没有什么实际意义的单方法匿名内部类。\n---\n\n> 由于三体人对我们的科技封锁，我们无法在 Android 开发中启用 Java 1.8 的重要特性——Lambda 表达式。但现在我们可以通过一些工具启用它，然后使用 Lambda 表达式替换没有什么实际意义的单方法匿名内部类。\n\n# Lambda表达式\n\n可能有些人还不太清楚到底什么是 Lambda 表达式，这里先对 Lambda 表达式进行一个简单的介绍。\n\nLambda 表达式是**函数式编程语言**的特性，它简单的说就是一个**匿名函数**。\n\n我们先看一个 Groovy 的例子：\n\n```groovy\n[1, 2, 3, 4, 5].asList().forEach { x -> println x }\n```\n\n在这个例子中，我们使用`foreach`来遍历一个`List`并打印每一个值。我们传入了一个 Lambda 表达式：`{ x -> println x }`，这个表达式就是我们对每一个值进行的操作，在本例中就是打印它们。\n\n在这里 Lambda 表达式是一个映射函数，`foreach`接受了它作为参数，然后对`List`中的每一个值进行遍历。\n\n在函数式编程语言中，函数是**一等公民**（first class）。它们也可以作为变量或者参数被传递而且它们也是一个类。\n\n但在 Java 中函数并不是一等公民，如果我们需要传递一个方法，必须要有一个对象包含这个方法，然后把这个对象传递过去。\n\n所以我们经常会见到类似这样的代码：\n\n```java\ntextView.setOnClickListener(new View.OnClickListener() {\n\t@Override\n\tpublic void onClick(View view) {\n\t\t// do what you want...\n\t}\n});\n```\n\n但是实际上，我们需要的只是`onClick`这个方法里面的内容，其它的部分（new OnClickListener）实在是没有什么实际的意义，只是一个必须的语法而已。\n\n所以 Java 1.8 也引入了部分函数式编程的特性——Lambda 表达式。\n\n如果使用 Lambda 表达式，上面那个例子可以被简化为这样\n\n```java\ntextView.setOnClickListener(v -> {\n\t// do what you want...\n});\n```\n\n如果只有一行代码我们还可以省略大括号\n\n```java\ntextView.setOnClickListener(v -> doSomething());\n```\n\n当啷啷~ 是不是省略了很多代码，有没有很爽的感觉。\n\n有了 Lambda 表达式，从此我们的代码可以清爽简洁，而且看起来也很好理解：箭头的左边是形参，右边是函数体，整个 Lambda 表达式就是一个函数（就是数学中的函数）。\n\n更多 Lambda 表达式的信息可以查看[《Java 8新特性：lambda表达式》——廖雪峰](http://www.liaoxuefeng.com/article/001411306573093ce6ebcdd67624db98acedb2a905c8ea4000)。\n\n# 如何使用\n\n安利了这么多 Lambda 表达式的优点，但由于众所周知的某些原因，Android 中的 Java 版本被限定在了 1.6 以下，所以也就没办法使用那么好的 Lambda 表达式了。\n\n但 Lambda 表达式这么好，你不让我用我就不用了么？我偏要用！\n\n好的，有以下两种方式都可以为我们开启 Lambda 表达式，我们只需要任选其一就可以了。\n\n## RetroLambda\n\nRetroLambda 的 Gradle 插件让我们可以在 Android 中使用 Lambda 表达式，那么我们看看如何使用它吧。\n\n### Project\n\n我们需要在项目目录下的`build.gradle`中加入它的`classpath`\n\n```gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.1.0-alpha4'\n     classpath 'me.tatarka:gradle-retrolambda:3.2.5'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n```\n\n在`dependencies`中加入`classpath 'me.tatarka:gradle-retrolambda:3.2.5'`\n\n### app module\n\n编辑`build.gradle`启用插件，并把 Java 语法调整到 1.8\n\n1. 在顶部启用插件\n```gradle\napply plugin: 'me.tatarka.retrolambda'\n```\n2. 在`android`中加入以下代码段启用 1.8 的语法\n```gradle\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n```\n\nEnjoy it !~\n\n## jack\n\njack 是 Java Android Compile Kit 的缩写，它是 Google 为 Android 推出的一个**编译工具包**，它的原理在这里就不详述了。它有一个特点就是可以使用 Lambda 表达式，而且配置十分简单。\n\n### 准备\n\n使用 jack 我们必须要把`buildTools`升级到**24以上**，我已经升级到了`24 RC`。\n\n### 使用\n\n编辑 app 模块中的`build.gradle`，在`defaultConfig`中加一行`        useJack true`，然后在`android`中添加如下一段代码\n\n```gradle\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n```\n\n然后就好了，是不是非常简单呢~\n\n# 总结\n\n在 Java 1.8 中的 Lambda 表达式实际上只是一个语法糖，它可以帮助我们简化代码，并且表述地更佳清晰。但 Java 目前来说并不是一门有函数式特性的编程语言，而且短期内不会加入函数式特性。如果你想使用一门拥有函数式特性的语言来写 Android Application 的话，可以考虑一下 Kotlin。","slug":"use-lambda-in-android","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvt000ygy6ettdytpu9","content":"<blockquote>\n<p>由于三体人对我们的科技封锁，我们无法在 Android 开发中启用 Java 1.8 的重要特性——Lambda 表达式。但现在我们可以通过一些工具启用它，然后使用 Lambda 表达式替换没有什么实际意义的单方法匿名内部类。</p>\n</blockquote>\n<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>可能有些人还不太清楚到底什么是 Lambda 表达式，这里先对 Lambda 表达式进行一个简单的介绍。</p>\n<p>Lambda 表达式是<strong>函数式编程语言</strong>的特性，它简单的说就是一个<strong>匿名函数</strong>。</p>\n<p>我们先看一个 Groovy 的例子：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].asList().forEach &#123; x -&gt; println x &#125;</div></pre></td></tr></table></figure>\n<p>在这个例子中，我们使用<code>foreach</code>来遍历一个<code>List</code>并打印每一个值。我们传入了一个 Lambda 表达式：<code>{ x -&gt; println x }</code>，这个表达式就是我们对每一个值进行的操作，在本例中就是打印它们。</p>\n<p>在这里 Lambda 表达式是一个映射函数，<code>foreach</code>接受了它作为参数，然后对<code>List</code>中的每一个值进行遍历。</p>\n<p>在函数式编程语言中，函数是<strong>一等公民</strong>（first class）。它们也可以作为变量或者参数被传递而且它们也是一个类。</p>\n<p>但在 Java 中函数并不是一等公民，如果我们需要传递一个方法，必须要有一个对象包含这个方法，然后把这个对象传递过去。</p>\n<p>所以我们经常会见到类似这样的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">textView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// do what you want...</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>但是实际上，我们需要的只是<code>onClick</code>这个方法里面的内容，其它的部分（new OnClickListener）实在是没有什么实际的意义，只是一个必须的语法而已。</p>\n<p>所以 Java 1.8 也引入了部分函数式编程的特性——Lambda 表达式。</p>\n<p>如果使用 Lambda 表达式，上面那个例子可以被简化为这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">textView.setOnClickListener(v -&gt; &#123;</div><div class=\"line\">\t<span class=\"comment\">// do what you want...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果只有一行代码我们还可以省略大括号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">textView.setOnClickListener(v -&gt; doSomething());</div></pre></td></tr></table></figure>\n<p>当啷啷~ 是不是省略了很多代码，有没有很爽的感觉。</p>\n<p>有了 Lambda 表达式，从此我们的代码可以清爽简洁，而且看起来也很好理解：箭头的左边是形参，右边是函数体，整个 Lambda 表达式就是一个函数（就是数学中的函数）。</p>\n<p>更多 Lambda 表达式的信息可以查看<a href=\"http://www.liaoxuefeng.com/article/001411306573093ce6ebcdd67624db98acedb2a905c8ea4000\" target=\"_blank\" rel=\"external\">《Java 8新特性：lambda表达式》——廖雪峰</a>。</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><p>安利了这么多 Lambda 表达式的优点，但由于众所周知的某些原因，Android 中的 Java 版本被限定在了 1.6 以下，所以也就没办法使用那么好的 Lambda 表达式了。</p>\n<p>但 Lambda 表达式这么好，你不让我用我就不用了么？我偏要用！</p>\n<p>好的，有以下两种方式都可以为我们开启 Lambda 表达式，我们只需要任选其一就可以了。</p>\n<h2 id=\"RetroLambda\"><a href=\"#RetroLambda\" class=\"headerlink\" title=\"RetroLambda\"></a>RetroLambda</h2><p>RetroLambda 的 Gradle 插件让我们可以在 Android 中使用 Lambda 表达式，那么我们看看如何使用它吧。</p>\n<h3 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h3><p>我们需要在项目目录下的<code>build.gradle</code>中加入它的<code>classpath</code></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:2.1.0-alpha4'</span></div><div class=\"line\">     <span class=\"keyword\">classpath</span> <span class=\"string\">'me.tatarka:gradle-retrolambda:3.2.5'</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class=\"line\">        <span class=\"comment\">// in the individual module build.gradle files</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>dependencies</code>中加入<code>classpath &#39;me.tatarka:gradle-retrolambda:3.2.5&#39;</code></p>\n<h3 id=\"app-module\"><a href=\"#app-module\" class=\"headerlink\" title=\"app module\"></a>app module</h3><p>编辑<code>build.gradle</code>启用插件，并把 Java 语法调整到 1.8</p>\n<ol>\n<li><p>在顶部启用插件</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'me.tatarka.retrolambda'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>android</code>中加入以下代码段启用 1.8 的语法</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">compileOptions &#123;</div><div class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class=\"line\">    <span class=\"keyword\">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Enjoy it !~</p>\n<h2 id=\"jack\"><a href=\"#jack\" class=\"headerlink\" title=\"jack\"></a>jack</h2><p>jack 是 Java Android Compile Kit 的缩写，它是 Google 为 Android 推出的一个<strong>编译工具包</strong>，它的原理在这里就不详述了。它有一个特点就是可以使用 Lambda 表达式，而且配置十分简单。</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>使用 jack 我们必须要把<code>buildTools</code>升级到<strong>24以上</strong>，我已经升级到了<code>24 RC</code>。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>编辑 app 模块中的<code>build.gradle</code>，在<code>defaultConfig</code>中加一行<code>useJack true</code>，然后在<code>android</code>中添加如下一段代码</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">compileOptions &#123;</div><div class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class=\"line\">    <span class=\"keyword\">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后就好了，是不是非常简单呢~</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在 Java 1.8 中的 Lambda 表达式实际上只是一个语法糖，它可以帮助我们简化代码，并且表述地更佳清晰。但 Java 目前来说并不是一门有函数式特性的编程语言，而且短期内不会加入函数式特性。如果你想使用一门拥有函数式特性的语言来写 Android Application 的话，可以考虑一下 Kotlin。</p>\n","excerpt":"","more":"<blockquote>\n<p>由于三体人对我们的科技封锁，我们无法在 Android 开发中启用 Java 1.8 的重要特性——Lambda 表达式。但现在我们可以通过一些工具启用它，然后使用 Lambda 表达式替换没有什么实际意义的单方法匿名内部类。</p>\n</blockquote>\n<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>可能有些人还不太清楚到底什么是 Lambda 表达式，这里先对 Lambda 表达式进行一个简单的介绍。</p>\n<p>Lambda 表达式是<strong>函数式编程语言</strong>的特性，它简单的说就是一个<strong>匿名函数</strong>。</p>\n<p>我们先看一个 Groovy 的例子：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].asList().forEach &#123; x -&gt; println x &#125;</div></pre></td></tr></table></figure>\n<p>在这个例子中，我们使用<code>foreach</code>来遍历一个<code>List</code>并打印每一个值。我们传入了一个 Lambda 表达式：<code>{ x -&gt; println x }</code>，这个表达式就是我们对每一个值进行的操作，在本例中就是打印它们。</p>\n<p>在这里 Lambda 表达式是一个映射函数，<code>foreach</code>接受了它作为参数，然后对<code>List</code>中的每一个值进行遍历。</p>\n<p>在函数式编程语言中，函数是<strong>一等公民</strong>（first class）。它们也可以作为变量或者参数被传递而且它们也是一个类。</p>\n<p>但在 Java 中函数并不是一等公民，如果我们需要传递一个方法，必须要有一个对象包含这个方法，然后把这个对象传递过去。</p>\n<p>所以我们经常会见到类似这样的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">textView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// do what you want...</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>但是实际上，我们需要的只是<code>onClick</code>这个方法里面的内容，其它的部分（new OnClickListener）实在是没有什么实际的意义，只是一个必须的语法而已。</p>\n<p>所以 Java 1.8 也引入了部分函数式编程的特性——Lambda 表达式。</p>\n<p>如果使用 Lambda 表达式，上面那个例子可以被简化为这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">textView.setOnClickListener(v -&gt; &#123;</div><div class=\"line\">\t<span class=\"comment\">// do what you want...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果只有一行代码我们还可以省略大括号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">textView.setOnClickListener(v -&gt; doSomething());</div></pre></td></tr></table></figure>\n<p>当啷啷~ 是不是省略了很多代码，有没有很爽的感觉。</p>\n<p>有了 Lambda 表达式，从此我们的代码可以清爽简洁，而且看起来也很好理解：箭头的左边是形参，右边是函数体，整个 Lambda 表达式就是一个函数（就是数学中的函数）。</p>\n<p>更多 Lambda 表达式的信息可以查看<a href=\"http://www.liaoxuefeng.com/article/001411306573093ce6ebcdd67624db98acedb2a905c8ea4000\">《Java 8新特性：lambda表达式》——廖雪峰</a>。</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><p>安利了这么多 Lambda 表达式的优点，但由于众所周知的某些原因，Android 中的 Java 版本被限定在了 1.6 以下，所以也就没办法使用那么好的 Lambda 表达式了。</p>\n<p>但 Lambda 表达式这么好，你不让我用我就不用了么？我偏要用！</p>\n<p>好的，有以下两种方式都可以为我们开启 Lambda 表达式，我们只需要任选其一就可以了。</p>\n<h2 id=\"RetroLambda\"><a href=\"#RetroLambda\" class=\"headerlink\" title=\"RetroLambda\"></a>RetroLambda</h2><p>RetroLambda 的 Gradle 插件让我们可以在 Android 中使用 Lambda 表达式，那么我们看看如何使用它吧。</p>\n<h3 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h3><p>我们需要在项目目录下的<code>build.gradle</code>中加入它的<code>classpath</code></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:2.1.0-alpha4'</span></div><div class=\"line\">     <span class=\"keyword\">classpath</span> <span class=\"string\">'me.tatarka:gradle-retrolambda:3.2.5'</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class=\"line\">        <span class=\"comment\">// in the individual module build.gradle files</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>dependencies</code>中加入<code>classpath &#39;me.tatarka:gradle-retrolambda:3.2.5&#39;</code></p>\n<h3 id=\"app-module\"><a href=\"#app-module\" class=\"headerlink\" title=\"app module\"></a>app module</h3><p>编辑<code>build.gradle</code>启用插件，并把 Java 语法调整到 1.8</p>\n<ol>\n<li><p>在顶部启用插件</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'me.tatarka.retrolambda'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>android</code>中加入以下代码段启用 1.8 的语法</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">compileOptions &#123;</div><div class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class=\"line\">    <span class=\"keyword\">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Enjoy it !~</p>\n<h2 id=\"jack\"><a href=\"#jack\" class=\"headerlink\" title=\"jack\"></a>jack</h2><p>jack 是 Java Android Compile Kit 的缩写，它是 Google 为 Android 推出的一个<strong>编译工具包</strong>，它的原理在这里就不详述了。它有一个特点就是可以使用 Lambda 表达式，而且配置十分简单。</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>使用 jack 我们必须要把<code>buildTools</code>升级到<strong>24以上</strong>，我已经升级到了<code>24 RC</code>。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>编辑 app 模块中的<code>build.gradle</code>，在<code>defaultConfig</code>中加一行<code>useJack true</code>，然后在<code>android</code>中添加如下一段代码</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">compileOptions &#123;</div><div class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class=\"line\">    <span class=\"keyword\">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后就好了，是不是非常简单呢~</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在 Java 1.8 中的 Lambda 表达式实际上只是一个语法糖，它可以帮助我们简化代码，并且表述地更佳清晰。但 Java 目前来说并不是一门有函数式特性的编程语言，而且短期内不会加入函数式特性。如果你想使用一门拥有函数式特性的语言来写 Android Application 的话，可以考虑一下 Kotlin。</p>\n"},{"title":"Anroid中的自定义View测量","date":"2016-04-21T16:51:22.000Z","toc":true,"description":"在《Android中的自定义View绘制》中，我们了解了如何使用 Paint、Cavans 等类来绘制 View，但当时的例子中，所有的自定义 View 如果不指定为特定的大小，都是直接占满父容器的。那么我们这篇文章就主要讲解如何测量自定义 View 的大小并对 wrap_content 进行处理。","_content":"\n> 之前已经讲过了 Android 中 View 的绘制流程，上次主要讲的是`onDraw`方法，这次主要讲的就是在`onMeasure`方法中对 View 的大小进行测量。\n\n# 理解 MeasureSpec\n\n要了解如何在`onMeasure`方法中对 View 进行测量，我们首先需要了解的就是`onMeasure`方法传入的两个 int 值：**widthMeasureSpec** 和 **heightMeasureSpec**。\n\n它们都是32位的 int 值，高2位代表 SpecMode(测量模式)，低30位代表 SpecSize(对应模式下的测量大小)。通过以下的代码我们可以了解到 MeasureSpec 的原理：\n\n```java\nprivate static final int MODE_SHIFT = 30; // Mode 的移位(高2位也就是左移30位)\n// 以下四个都是 Mode 常量\nprivate static final int MODE_MASK = 0x3 << MODE_SHIFT;\nprivate static final int UNSPECIFIED = 0 << MODE_SHIFT;\nprivate static final int EXACTLY = 1 << MODE_SHIFT;\nprivate static final int AT_MOST = 2 << MODE_SHIFT;\n\n// 该方法用于组装 MeasureSpec，其中 sUseBrokenMakeMeasureSpec 是一个兼容参数，如果为 true 时可能会出错(sdk19之后默认走底下的逻辑)\npublic static int makeMeasureSpec(int size, int mode) {\n\tif (sUseBrokenMakeMeasureSpec) {\n\t\treturn size + mode;\n\t} else {\n\t\treturn (size & ~MODE_MASK) | (mode & MODE_MASK);\n\t}\n}\n\n// 获取 Mode\npublic static int getMode(int measureSpec) {\n\treturn (measureSpec & MODE_MASK);\n}\n\n// 获取 Size\npublic static int getSize(int measureSpec) {\n\treturn (size & ~MODE_MASK);\n}\n```\n\n> 因为 Android 中会有大量的 View 存在，所以必然会有很多 MeasureSpec，如果将 MeasureSpec 封装成一个对象必然会造成大量的对象内存分配，这也不难理解为什么要将其包装成一个 int 了。\n\n## SpecMode\n\nSpecMode 有三类，我们在前面的代码定义中看到了有五个常量，其中两个是作为工具存在的（MODE_SHIFT 和 MODE_MASK），另外三个就是 SpecMode 了。\n\n### UNSPECIFIED\n\n该模式下父容器不对 View 的大小有任何限制，一般不做处理。\n\n### EXACTLY\n\n父容器已经检测出 View 所需要的精确大小，此时 View 的最终大小就是 SpecSize 指定的大小。\n\n对应 LayoutParams 中`match_parent`以及具体数值。\n\n### AT_MOST\n\n父容器指定了一个 SpecSize，View 不能大于这个值。\n\n它对应于 LayoutParams 中的`wrap_content`。\n\n# 与 Layout_Params 的关系\n\n在 View 测量的时候，会将 Layout_Params 在父容器的约束下转换成对应的 MeasureSpec，然后根据这个 MeasureSpec 确认 View 测量后的宽高。一旦 MeasureSpec 确认了，在`onMesure`中就可以确认 View 的测量宽高了。\n\n* match_parent: 对应 EXACTLY\n* 精确值: 对应 EXACTLY\n* wrap_content: 对应 AT_MOST\n\n# measure 过程\n\nmeasure 过程要分为 View 和 ViewGroup，它们的测量是不同的\n\n## View\n\n由其`measure`方法完成，该方法是`final`关键字修饰的，无法重写。但`measure`会调用`onMeasure`，所以只需要看`onMeasure`如何实现即可。\n\n```java\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\tsetMeasureDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), getDefaultSize(getSuggestedMinimumHeight(), HeightMeasureSpec));\n}\n\npublic static int getDefaultSize(int size, int measureSpec) {\n\tint result = size;\n\tint specMode = MeasureSpec.getMode(measureSpec);\n\tint specSize = MeasureSpec.getSize(measureSpec);\n\t\n\tswitch (specMode) {\n\t\tcase MeasureSpec.UNSPECIFIED:\n\t\t\tresult = size;\n\t\t\tbreak;\n\t\tcase MeasureSpec.ATMOST:\n\t\tcase MeasureSpec.EXACTLY:\n\t\t\tresult = specSize;\n\t\t\tbreak;\n\t}\n\t\n\treturn result;\n}\n\nprotected int getSuggestedMinimumWidth() {\n\treturn (mBackground ==  null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n}\n\nprotected int getSuggestedMinimumHeight() {\n\treturn (mBackground ==  null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\n}\n```\n\n其逻辑很简单，`getDefaultSize`方法中可以看出，View 的宽高由 SpecSize 决定。于是我们知道：直接继承 View 的自定义控件需要重写`onMeasure`方法并设置`wrap_content`时的自身大小，否则使用`wrap_content`属性是无效的(等同于`match_parent`)。\n\n所以我们可以这样实现来使得`wrap_content`生效：\n\n```java\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\n    int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n    int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n\n    int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n    int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n\n    int realWidth = widthSpecMode == MeasureSpec.AT_MOST ? mWidth : widthSpecSize;\n    int realHeight = heightSpecMode == MeasureSpec.AT_MOST ? mHeight : heightSpecSize;\n\n    setMeasuredDimension(realWidth, realHeight);\n}\n```\n\n在如上代码中我们只需要指定默认最小时的`mWidth`,`mHeight`即可(`wrap_content`的默认宽高)，其它模式下交给系统测量即可。\n\n> 需要注意的是`onMeasure`方法中获取到的测量宽高并不一定就是控件的最终宽高，比如 RelativeLayout 中的控件会有多次测量，LinearLayout 中的子控件如果设置了`weight`也会有多次测量，那么第一次`onMeasure`的就不会准了。\n\n## ViewGroup\n\n其实就是在测量自己的宽高之后还会调用`measureChildren`来遍历子控件并且测量子控件的大小。\n\n```java\nprotected void measureChildren(int widthMeasureSpec, int heightMeasureSpec) {\n\tfinal int size = mChildrenCount;\n\tfinal View[] children = mChildren;\n\tfor (int i = 0; i < size; ++i) {\n\t\tfinal View child = children[i];\n\t\tif ((child.mViewFlags & VISIBILITY_MASK) != GONE) {\n\t\t\tmeasureChild(child, widthMeasureSpec, heightMeasureSpec);\n\t\t}\n\t}\n}\n\nprotected void measureChild(View child, int parentWidthMeasureSpec,  \n         int parentHeightMeasureSpec) {  \n\tfinal LayoutParams lp = child.getLayoutParams();\n\t\n\tfinal int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, \n\t\t\tmPaddingLeft + mPaddingRight, lp.width);  \n\tfinal int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, \n\t\t\tmPaddingTop + mPaddingBottom, lp.height);\n\t\n\tchild.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n\nViewGroup 是一个抽象类，其`onMeasure`方法是没有具体实现的，所以我们继承 ViewGroup 必须重写`onMeasure`，重写该方法需要进行的步骤如下：\n\n1. 调用`super.onMeasure(widthMeasureSpec, heightMeasureSpec)`处理非`wrap_content`的情况\n2. 单独处理`wrap_content`，即 SpecMode 为`AT_MOST`的情况\n3. 遍历子 View，并测量子 View\n\n测量子 View 我们可以使用这几个方法\n\n```java\n// 使用子view自身的测量方法\nsubView.measure(int wSpec, int hSpec);\n\n// ViewGroup 的测量子 View 方法\n// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值\nmeasureChild(subView, int wSpec, int hSpec); \n// 所有子view 都是 多宽，多高, 内部调用了 measureChild 方法\nmeasureChildren(int wSpec, int hSpec);\n// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值、margin 值和传入的宽高 wUsed、hUsed\nmeasureChildWithMargins(subView, intwSpec, int wUsed, int hSpec, int hUsed); \n\n```\n\n# 总结\n\nView 的测量基本就是如上所述了，自定义 View 需要重写`onMeasure`方法并对`wrap_content`进行特殊处理，其实说起来需要做的并不多，但原理还是满复杂的，全部了解了之后还是觉得学到了不少东西。","source":"_posts/2016-04-21-measure-custom-view-in-android.md","raw":"---\ntitle: Anroid中的自定义View测量\ndate: 2016-04-22 00:51:22\ncategory: [技术]\ntags: [Android]\ntoc: true\ndescription: 在《Android中的自定义View绘制》中，我们了解了如何使用 Paint、Cavans 等类来绘制 View，但当时的例子中，所有的自定义 View 如果不指定为特定的大小，都是直接占满父容器的。那么我们这篇文章就主要讲解如何测量自定义 View 的大小并对 wrap_content 进行处理。\n---\n\n> 之前已经讲过了 Android 中 View 的绘制流程，上次主要讲的是`onDraw`方法，这次主要讲的就是在`onMeasure`方法中对 View 的大小进行测量。\n\n# 理解 MeasureSpec\n\n要了解如何在`onMeasure`方法中对 View 进行测量，我们首先需要了解的就是`onMeasure`方法传入的两个 int 值：**widthMeasureSpec** 和 **heightMeasureSpec**。\n\n它们都是32位的 int 值，高2位代表 SpecMode(测量模式)，低30位代表 SpecSize(对应模式下的测量大小)。通过以下的代码我们可以了解到 MeasureSpec 的原理：\n\n```java\nprivate static final int MODE_SHIFT = 30; // Mode 的移位(高2位也就是左移30位)\n// 以下四个都是 Mode 常量\nprivate static final int MODE_MASK = 0x3 << MODE_SHIFT;\nprivate static final int UNSPECIFIED = 0 << MODE_SHIFT;\nprivate static final int EXACTLY = 1 << MODE_SHIFT;\nprivate static final int AT_MOST = 2 << MODE_SHIFT;\n\n// 该方法用于组装 MeasureSpec，其中 sUseBrokenMakeMeasureSpec 是一个兼容参数，如果为 true 时可能会出错(sdk19之后默认走底下的逻辑)\npublic static int makeMeasureSpec(int size, int mode) {\n\tif (sUseBrokenMakeMeasureSpec) {\n\t\treturn size + mode;\n\t} else {\n\t\treturn (size & ~MODE_MASK) | (mode & MODE_MASK);\n\t}\n}\n\n// 获取 Mode\npublic static int getMode(int measureSpec) {\n\treturn (measureSpec & MODE_MASK);\n}\n\n// 获取 Size\npublic static int getSize(int measureSpec) {\n\treturn (size & ~MODE_MASK);\n}\n```\n\n> 因为 Android 中会有大量的 View 存在，所以必然会有很多 MeasureSpec，如果将 MeasureSpec 封装成一个对象必然会造成大量的对象内存分配，这也不难理解为什么要将其包装成一个 int 了。\n\n## SpecMode\n\nSpecMode 有三类，我们在前面的代码定义中看到了有五个常量，其中两个是作为工具存在的（MODE_SHIFT 和 MODE_MASK），另外三个就是 SpecMode 了。\n\n### UNSPECIFIED\n\n该模式下父容器不对 View 的大小有任何限制，一般不做处理。\n\n### EXACTLY\n\n父容器已经检测出 View 所需要的精确大小，此时 View 的最终大小就是 SpecSize 指定的大小。\n\n对应 LayoutParams 中`match_parent`以及具体数值。\n\n### AT_MOST\n\n父容器指定了一个 SpecSize，View 不能大于这个值。\n\n它对应于 LayoutParams 中的`wrap_content`。\n\n# 与 Layout_Params 的关系\n\n在 View 测量的时候，会将 Layout_Params 在父容器的约束下转换成对应的 MeasureSpec，然后根据这个 MeasureSpec 确认 View 测量后的宽高。一旦 MeasureSpec 确认了，在`onMesure`中就可以确认 View 的测量宽高了。\n\n* match_parent: 对应 EXACTLY\n* 精确值: 对应 EXACTLY\n* wrap_content: 对应 AT_MOST\n\n# measure 过程\n\nmeasure 过程要分为 View 和 ViewGroup，它们的测量是不同的\n\n## View\n\n由其`measure`方法完成，该方法是`final`关键字修饰的，无法重写。但`measure`会调用`onMeasure`，所以只需要看`onMeasure`如何实现即可。\n\n```java\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\tsetMeasureDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), getDefaultSize(getSuggestedMinimumHeight(), HeightMeasureSpec));\n}\n\npublic static int getDefaultSize(int size, int measureSpec) {\n\tint result = size;\n\tint specMode = MeasureSpec.getMode(measureSpec);\n\tint specSize = MeasureSpec.getSize(measureSpec);\n\t\n\tswitch (specMode) {\n\t\tcase MeasureSpec.UNSPECIFIED:\n\t\t\tresult = size;\n\t\t\tbreak;\n\t\tcase MeasureSpec.ATMOST:\n\t\tcase MeasureSpec.EXACTLY:\n\t\t\tresult = specSize;\n\t\t\tbreak;\n\t}\n\t\n\treturn result;\n}\n\nprotected int getSuggestedMinimumWidth() {\n\treturn (mBackground ==  null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n}\n\nprotected int getSuggestedMinimumHeight() {\n\treturn (mBackground ==  null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\n}\n```\n\n其逻辑很简单，`getDefaultSize`方法中可以看出，View 的宽高由 SpecSize 决定。于是我们知道：直接继承 View 的自定义控件需要重写`onMeasure`方法并设置`wrap_content`时的自身大小，否则使用`wrap_content`属性是无效的(等同于`match_parent`)。\n\n所以我们可以这样实现来使得`wrap_content`生效：\n\n```java\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\n    int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n    int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n\n    int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n    int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n\n    int realWidth = widthSpecMode == MeasureSpec.AT_MOST ? mWidth : widthSpecSize;\n    int realHeight = heightSpecMode == MeasureSpec.AT_MOST ? mHeight : heightSpecSize;\n\n    setMeasuredDimension(realWidth, realHeight);\n}\n```\n\n在如上代码中我们只需要指定默认最小时的`mWidth`,`mHeight`即可(`wrap_content`的默认宽高)，其它模式下交给系统测量即可。\n\n> 需要注意的是`onMeasure`方法中获取到的测量宽高并不一定就是控件的最终宽高，比如 RelativeLayout 中的控件会有多次测量，LinearLayout 中的子控件如果设置了`weight`也会有多次测量，那么第一次`onMeasure`的就不会准了。\n\n## ViewGroup\n\n其实就是在测量自己的宽高之后还会调用`measureChildren`来遍历子控件并且测量子控件的大小。\n\n```java\nprotected void measureChildren(int widthMeasureSpec, int heightMeasureSpec) {\n\tfinal int size = mChildrenCount;\n\tfinal View[] children = mChildren;\n\tfor (int i = 0; i < size; ++i) {\n\t\tfinal View child = children[i];\n\t\tif ((child.mViewFlags & VISIBILITY_MASK) != GONE) {\n\t\t\tmeasureChild(child, widthMeasureSpec, heightMeasureSpec);\n\t\t}\n\t}\n}\n\nprotected void measureChild(View child, int parentWidthMeasureSpec,  \n         int parentHeightMeasureSpec) {  \n\tfinal LayoutParams lp = child.getLayoutParams();\n\t\n\tfinal int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, \n\t\t\tmPaddingLeft + mPaddingRight, lp.width);  \n\tfinal int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, \n\t\t\tmPaddingTop + mPaddingBottom, lp.height);\n\t\n\tchild.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n\nViewGroup 是一个抽象类，其`onMeasure`方法是没有具体实现的，所以我们继承 ViewGroup 必须重写`onMeasure`，重写该方法需要进行的步骤如下：\n\n1. 调用`super.onMeasure(widthMeasureSpec, heightMeasureSpec)`处理非`wrap_content`的情况\n2. 单独处理`wrap_content`，即 SpecMode 为`AT_MOST`的情况\n3. 遍历子 View，并测量子 View\n\n测量子 View 我们可以使用这几个方法\n\n```java\n// 使用子view自身的测量方法\nsubView.measure(int wSpec, int hSpec);\n\n// ViewGroup 的测量子 View 方法\n// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值\nmeasureChild(subView, int wSpec, int hSpec); \n// 所有子view 都是 多宽，多高, 内部调用了 measureChild 方法\nmeasureChildren(int wSpec, int hSpec);\n// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值、margin 值和传入的宽高 wUsed、hUsed\nmeasureChildWithMargins(subView, intwSpec, int wUsed, int hSpec, int hUsed); \n\n```\n\n# 总结\n\nView 的测量基本就是如上所述了，自定义 View 需要重写`onMeasure`方法并对`wrap_content`进行特殊处理，其实说起来需要做的并不多，但原理还是满复杂的，全部了解了之后还是觉得学到了不少东西。","slug":"measure-custom-view-in-android","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvu0011gy6enj0url1c","content":"<blockquote>\n<p>之前已经讲过了 Android 中 View 的绘制流程，上次主要讲的是<code>onDraw</code>方法，这次主要讲的就是在<code>onMeasure</code>方法中对 View 的大小进行测量。</p>\n</blockquote>\n<h1 id=\"理解-MeasureSpec\"><a href=\"#理解-MeasureSpec\" class=\"headerlink\" title=\"理解 MeasureSpec\"></a>理解 MeasureSpec</h1><p>要了解如何在<code>onMeasure</code>方法中对 View 进行测量，我们首先需要了解的就是<code>onMeasure</code>方法传入的两个 int 值：<strong>widthMeasureSpec</strong> 和 <strong>heightMeasureSpec</strong>。</p>\n<p>它们都是32位的 int 值，高2位代表 SpecMode(测量模式)，低30位代表 SpecSize(对应模式下的测量大小)。通过以下的代码我们可以了解到 MeasureSpec 的原理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_SHIFT = <span class=\"number\">30</span>; <span class=\"comment\">// Mode 的移位(高2位也就是左移30位)</span></div><div class=\"line\"><span class=\"comment\">// 以下四个都是 Mode 常量</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_MASK = <span class=\"number\">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNSPECIFIED = <span class=\"number\">0</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXACTLY = <span class=\"number\">1</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AT_MOST = <span class=\"number\">2</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该方法用于组装 MeasureSpec，其中 sUseBrokenMakeMeasureSpec 是一个兼容参数，如果为 true 时可能会出错(sdk19之后默认走底下的逻辑)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">makeMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size + mode;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 Mode</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMode</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (measureSpec &amp; MODE_MASK);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 Size</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (size &amp; ~MODE_MASK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>因为 Android 中会有大量的 View 存在，所以必然会有很多 MeasureSpec，如果将 MeasureSpec 封装成一个对象必然会造成大量的对象内存分配，这也不难理解为什么要将其包装成一个 int 了。</p>\n</blockquote>\n<h2 id=\"SpecMode\"><a href=\"#SpecMode\" class=\"headerlink\" title=\"SpecMode\"></a>SpecMode</h2><p>SpecMode 有三类，我们在前面的代码定义中看到了有五个常量，其中两个是作为工具存在的（MODE_SHIFT 和 MODE_MASK），另外三个就是 SpecMode 了。</p>\n<h3 id=\"UNSPECIFIED\"><a href=\"#UNSPECIFIED\" class=\"headerlink\" title=\"UNSPECIFIED\"></a>UNSPECIFIED</h3><p>该模式下父容器不对 View 的大小有任何限制，一般不做处理。</p>\n<h3 id=\"EXACTLY\"><a href=\"#EXACTLY\" class=\"headerlink\" title=\"EXACTLY\"></a>EXACTLY</h3><p>父容器已经检测出 View 所需要的精确大小，此时 View 的最终大小就是 SpecSize 指定的大小。</p>\n<p>对应 LayoutParams 中<code>match_parent</code>以及具体数值。</p>\n<h3 id=\"AT-MOST\"><a href=\"#AT-MOST\" class=\"headerlink\" title=\"AT_MOST\"></a>AT_MOST</h3><p>父容器指定了一个 SpecSize，View 不能大于这个值。</p>\n<p>它对应于 LayoutParams 中的<code>wrap_content</code>。</p>\n<h1 id=\"与-Layout-Params-的关系\"><a href=\"#与-Layout-Params-的关系\" class=\"headerlink\" title=\"与 Layout_Params 的关系\"></a>与 Layout_Params 的关系</h1><p>在 View 测量的时候，会将 Layout_Params 在父容器的约束下转换成对应的 MeasureSpec，然后根据这个 MeasureSpec 确认 View 测量后的宽高。一旦 MeasureSpec 确认了，在<code>onMesure</code>中就可以确认 View 的测量宽高了。</p>\n<ul>\n<li>match_parent: 对应 EXACTLY</li>\n<li>精确值: 对应 EXACTLY</li>\n<li>wrap_content: 对应 AT_MOST</li>\n</ul>\n<h1 id=\"measure-过程\"><a href=\"#measure-过程\" class=\"headerlink\" title=\"measure 过程\"></a>measure 过程</h1><p>measure 过程要分为 View 和 ViewGroup，它们的测量是不同的</p>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><p>由其<code>measure</code>方法完成，该方法是<code>final</code>关键字修饰的，无法重写。但<code>measure</code>会调用<code>onMeasure</code>，所以只需要看<code>onMeasure</code>如何实现即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">\tsetMeasureDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), getDefaultSize(getSuggestedMinimumHeight(), HeightMeasureSpec));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result = size;</div><div class=\"line\">\t<span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">\t<span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">\t\t\tresult = size;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MeasureSpec.ATMOST:</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">\t\t\tresult = specSize;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (mBackground ==  <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (mBackground ==  <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其逻辑很简单，<code>getDefaultSize</code>方法中可以看出，View 的宽高由 SpecSize 决定。于是我们知道：直接继承 View 的自定义控件需要重写<code>onMeasure</code>方法并设置<code>wrap_content</code>时的自身大小，否则使用<code>wrap_content</code>属性是无效的(等同于<code>match_parent</code>)。</p>\n<p>所以我们可以这样实现来使得<code>wrap_content</code>生效：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> realWidth = widthSpecMode == MeasureSpec.AT_MOST ? mWidth : widthSpecSize;</div><div class=\"line\">    <span class=\"keyword\">int</span> realHeight = heightSpecMode == MeasureSpec.AT_MOST ? mHeight : heightSpecSize;</div><div class=\"line\"></div><div class=\"line\">    setMeasuredDimension(realWidth, realHeight);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在如上代码中我们只需要指定默认最小时的<code>mWidth</code>,<code>mHeight</code>即可(<code>wrap_content</code>的默认宽高)，其它模式下交给系统测量即可。</p>\n<blockquote>\n<p>需要注意的是<code>onMeasure</code>方法中获取到的测量宽高并不一定就是控件的最终宽高，比如 RelativeLayout 中的控件会有多次测量，LinearLayout 中的子控件如果设置了<code>weight</code>也会有多次测量，那么第一次<code>onMeasure</code>的就不会准了。</p>\n</blockquote>\n<h2 id=\"ViewGroup\"><a href=\"#ViewGroup\" class=\"headerlink\" title=\"ViewGroup\"></a>ViewGroup</h2><p>其实就是在测量自己的宽高之后还会调用<code>measureChildren</code>来遍历子控件并且测量子控件的大小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = mChildrenCount;</div><div class=\"line\">\t<span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> View child = children[i];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class=\"line\">\t\t\tmeasureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChild</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> parentWidthMeasureSpec,  </span></span></div><div class=\"line\">         <span class=\"keyword\">int</span> parentHeightMeasureSpec) &#123;  </div><div class=\"line\">\t<span class=\"keyword\">final</span> LayoutParams lp = child.getLayoutParams();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, </div><div class=\"line\">\t\t\tmPaddingLeft + mPaddingRight, lp.width);  </div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, </div><div class=\"line\">\t\t\tmPaddingTop + mPaddingBottom, lp.height);</div><div class=\"line\">\t</div><div class=\"line\">\tchild.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ViewGroup 是一个抽象类，其<code>onMeasure</code>方法是没有具体实现的，所以我们继承 ViewGroup 必须重写<code>onMeasure</code>，重写该方法需要进行的步骤如下：</p>\n<ol>\n<li>调用<code>super.onMeasure(widthMeasureSpec, heightMeasureSpec)</code>处理非<code>wrap_content</code>的情况</li>\n<li>单独处理<code>wrap_content</code>，即 SpecMode 为<code>AT_MOST</code>的情况</li>\n<li>遍历子 View，并测量子 View</li>\n</ol>\n<p>测量子 View 我们可以使用这几个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用子view自身的测量方法</span></div><div class=\"line\">subView.measure(<span class=\"keyword\">int</span> wSpec, <span class=\"keyword\">int</span> hSpec);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ViewGroup 的测量子 View 方法</span></div><div class=\"line\"><span class=\"comment\">// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值</span></div><div class=\"line\">measureChild(subView, <span class=\"keyword\">int</span> wSpec, <span class=\"keyword\">int</span> hSpec); </div><div class=\"line\"><span class=\"comment\">// 所有子view 都是 多宽，多高, 内部调用了 measureChild 方法</span></div><div class=\"line\">measureChildren(<span class=\"keyword\">int</span> wSpec, <span class=\"keyword\">int</span> hSpec);</div><div class=\"line\"><span class=\"comment\">// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值、margin 值和传入的宽高 wUsed、hUsed</span></div><div class=\"line\">measureChildWithMargins(subView, intwSpec, <span class=\"keyword\">int</span> wUsed, <span class=\"keyword\">int</span> hSpec, <span class=\"keyword\">int</span> hUsed);</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>View 的测量基本就是如上所述了，自定义 View 需要重写<code>onMeasure</code>方法并对<code>wrap_content</code>进行特殊处理，其实说起来需要做的并不多，但原理还是满复杂的，全部了解了之后还是觉得学到了不少东西。</p>\n","excerpt":"","more":"<blockquote>\n<p>之前已经讲过了 Android 中 View 的绘制流程，上次主要讲的是<code>onDraw</code>方法，这次主要讲的就是在<code>onMeasure</code>方法中对 View 的大小进行测量。</p>\n</blockquote>\n<h1 id=\"理解-MeasureSpec\"><a href=\"#理解-MeasureSpec\" class=\"headerlink\" title=\"理解 MeasureSpec\"></a>理解 MeasureSpec</h1><p>要了解如何在<code>onMeasure</code>方法中对 View 进行测量，我们首先需要了解的就是<code>onMeasure</code>方法传入的两个 int 值：<strong>widthMeasureSpec</strong> 和 <strong>heightMeasureSpec</strong>。</p>\n<p>它们都是32位的 int 值，高2位代表 SpecMode(测量模式)，低30位代表 SpecSize(对应模式下的测量大小)。通过以下的代码我们可以了解到 MeasureSpec 的原理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_SHIFT = <span class=\"number\">30</span>; <span class=\"comment\">// Mode 的移位(高2位也就是左移30位)</span></div><div class=\"line\"><span class=\"comment\">// 以下四个都是 Mode 常量</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_MASK = <span class=\"number\">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNSPECIFIED = <span class=\"number\">0</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXACTLY = <span class=\"number\">1</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AT_MOST = <span class=\"number\">2</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该方法用于组装 MeasureSpec，其中 sUseBrokenMakeMeasureSpec 是一个兼容参数，如果为 true 时可能会出错(sdk19之后默认走底下的逻辑)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">makeMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> size + mode;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 Mode</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMode</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (measureSpec &amp; MODE_MASK);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取 Size</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (size &amp; ~MODE_MASK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>因为 Android 中会有大量的 View 存在，所以必然会有很多 MeasureSpec，如果将 MeasureSpec 封装成一个对象必然会造成大量的对象内存分配，这也不难理解为什么要将其包装成一个 int 了。</p>\n</blockquote>\n<h2 id=\"SpecMode\"><a href=\"#SpecMode\" class=\"headerlink\" title=\"SpecMode\"></a>SpecMode</h2><p>SpecMode 有三类，我们在前面的代码定义中看到了有五个常量，其中两个是作为工具存在的（MODE_SHIFT 和 MODE_MASK），另外三个就是 SpecMode 了。</p>\n<h3 id=\"UNSPECIFIED\"><a href=\"#UNSPECIFIED\" class=\"headerlink\" title=\"UNSPECIFIED\"></a>UNSPECIFIED</h3><p>该模式下父容器不对 View 的大小有任何限制，一般不做处理。</p>\n<h3 id=\"EXACTLY\"><a href=\"#EXACTLY\" class=\"headerlink\" title=\"EXACTLY\"></a>EXACTLY</h3><p>父容器已经检测出 View 所需要的精确大小，此时 View 的最终大小就是 SpecSize 指定的大小。</p>\n<p>对应 LayoutParams 中<code>match_parent</code>以及具体数值。</p>\n<h3 id=\"AT-MOST\"><a href=\"#AT-MOST\" class=\"headerlink\" title=\"AT_MOST\"></a>AT_MOST</h3><p>父容器指定了一个 SpecSize，View 不能大于这个值。</p>\n<p>它对应于 LayoutParams 中的<code>wrap_content</code>。</p>\n<h1 id=\"与-Layout-Params-的关系\"><a href=\"#与-Layout-Params-的关系\" class=\"headerlink\" title=\"与 Layout_Params 的关系\"></a>与 Layout_Params 的关系</h1><p>在 View 测量的时候，会将 Layout_Params 在父容器的约束下转换成对应的 MeasureSpec，然后根据这个 MeasureSpec 确认 View 测量后的宽高。一旦 MeasureSpec 确认了，在<code>onMesure</code>中就可以确认 View 的测量宽高了。</p>\n<ul>\n<li>match_parent: 对应 EXACTLY</li>\n<li>精确值: 对应 EXACTLY</li>\n<li>wrap_content: 对应 AT_MOST</li>\n</ul>\n<h1 id=\"measure-过程\"><a href=\"#measure-过程\" class=\"headerlink\" title=\"measure 过程\"></a>measure 过程</h1><p>measure 过程要分为 View 和 ViewGroup，它们的测量是不同的</p>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><p>由其<code>measure</code>方法完成，该方法是<code>final</code>关键字修饰的，无法重写。但<code>measure</code>会调用<code>onMeasure</code>，所以只需要看<code>onMeasure</code>如何实现即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">\tsetMeasureDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), getDefaultSize(getSuggestedMinimumHeight(), HeightMeasureSpec));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result = size;</div><div class=\"line\">\t<span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">\t<span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">\t\t\tresult = size;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MeasureSpec.ATMOST:</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">\t\t\tresult = specSize;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (mBackground ==  <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (mBackground ==  <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其逻辑很简单，<code>getDefaultSize</code>方法中可以看出，View 的宽高由 SpecSize 决定。于是我们知道：直接继承 View 的自定义控件需要重写<code>onMeasure</code>方法并设置<code>wrap_content</code>时的自身大小，否则使用<code>wrap_content</code>属性是无效的(等同于<code>match_parent</code>)。</p>\n<p>所以我们可以这样实现来使得<code>wrap_content</code>生效：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> realWidth = widthSpecMode == MeasureSpec.AT_MOST ? mWidth : widthSpecSize;</div><div class=\"line\">    <span class=\"keyword\">int</span> realHeight = heightSpecMode == MeasureSpec.AT_MOST ? mHeight : heightSpecSize;</div><div class=\"line\"></div><div class=\"line\">    setMeasuredDimension(realWidth, realHeight);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在如上代码中我们只需要指定默认最小时的<code>mWidth</code>,<code>mHeight</code>即可(<code>wrap_content</code>的默认宽高)，其它模式下交给系统测量即可。</p>\n<blockquote>\n<p>需要注意的是<code>onMeasure</code>方法中获取到的测量宽高并不一定就是控件的最终宽高，比如 RelativeLayout 中的控件会有多次测量，LinearLayout 中的子控件如果设置了<code>weight</code>也会有多次测量，那么第一次<code>onMeasure</code>的就不会准了。</p>\n</blockquote>\n<h2 id=\"ViewGroup\"><a href=\"#ViewGroup\" class=\"headerlink\" title=\"ViewGroup\"></a>ViewGroup</h2><p>其实就是在测量自己的宽高之后还会调用<code>measureChildren</code>来遍历子控件并且测量子控件的大小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = mChildrenCount;</div><div class=\"line\">\t<span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> View child = children[i];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class=\"line\">\t\t\tmeasureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChild</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> parentWidthMeasureSpec,  </div><div class=\"line\">         <span class=\"keyword\">int</span> parentHeightMeasureSpec)</span> </span>&#123;  </div><div class=\"line\">\t<span class=\"keyword\">final</span> LayoutParams lp = child.getLayoutParams();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, </div><div class=\"line\">\t\t\tmPaddingLeft + mPaddingRight, lp.width);  </div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, </div><div class=\"line\">\t\t\tmPaddingTop + mPaddingBottom, lp.height);</div><div class=\"line\">\t</div><div class=\"line\">\tchild.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ViewGroup 是一个抽象类，其<code>onMeasure</code>方法是没有具体实现的，所以我们继承 ViewGroup 必须重写<code>onMeasure</code>，重写该方法需要进行的步骤如下：</p>\n<ol>\n<li>调用<code>super.onMeasure(widthMeasureSpec, heightMeasureSpec)</code>处理非<code>wrap_content</code>的情况</li>\n<li>单独处理<code>wrap_content</code>，即 SpecMode 为<code>AT_MOST</code>的情况</li>\n<li>遍历子 View，并测量子 View</li>\n</ol>\n<p>测量子 View 我们可以使用这几个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用子view自身的测量方法</span></div><div class=\"line\">subView.measure(<span class=\"keyword\">int</span> wSpec, <span class=\"keyword\">int</span> hSpec);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ViewGroup 的测量子 View 方法</span></div><div class=\"line\"><span class=\"comment\">// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值</span></div><div class=\"line\">measureChild(subView, <span class=\"keyword\">int</span> wSpec, <span class=\"keyword\">int</span> hSpec); </div><div class=\"line\"><span class=\"comment\">// 所有子view 都是 多宽，多高, 内部调用了 measureChild 方法</span></div><div class=\"line\">measureChildren(<span class=\"keyword\">int</span> wSpec, <span class=\"keyword\">int</span> hSpec);</div><div class=\"line\"><span class=\"comment\">// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值、margin 值和传入的宽高 wUsed、hUsed</span></div><div class=\"line\">measureChildWithMargins(subView, intwSpec, <span class=\"keyword\">int</span> wUsed, <span class=\"keyword\">int</span> hSpec, <span class=\"keyword\">int</span> hUsed);</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>View 的测量基本就是如上所述了，自定义 View 需要重写<code>onMeasure</code>方法并对<code>wrap_content</code>进行特殊处理，其实说起来需要做的并不多，但原理还是满复杂的，全部了解了之后还是觉得学到了不少东西。</p>\n"},{"title":"夜间模式初探","date":"2016-06-01T14:19:13.000Z","toc":true,"description":"Android Support Library 23.2.0 版为我们带来了官方的夜间模式，现在我们可以很容易地为 App 开发夜间模式了。","_content":"\n> Android Support Library 23.2.0 版为我们带来了官方的夜间模式，现在我们可以很容易地为 App 开发夜间模式了。\n\n# 如何使用\n\n使用起来非常简单，我们只需要将主题继承其即可\n\n```xml\n<!-- parent 为 Theme.AppCompat.DayNight -->\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.DayNight\">\n    <!-- Blah blah -->\n</style>\n```\n\n## 应用全局主题\n\n然后我们在程序中调用方法设置模式即可，推荐在 Application 的`onCreate()`中进行设置\n\n```java\nAppCompatDelegate.setDefaultNightMode(int mode);\n```\n\n它有四个可选值，分别是：\n\n* `MODE_NIGHT_NO`： 使用亮色(light)主题\n* `MODE_NIGHT_YES`：使用暗色(dark)主题\n* `MODE_NIGHT_AUTO`：根据当前时间自动切换 亮色(light)/暗色(dark)主题\n* `MODE_NIGHT_FOLLOW_SYSTEM`(默认选项)：设置为跟随系统，通常为 MODE_NIGHT_NO\n\n## 组件主题\n\n我们也可以为某一个组件设置主题，通过`getDelegate().setLocalNightMode(int mode);`即可。注意如果改变了 Activity 的主题，我们需要调用`recreate()`重启来显示改变后的效果。\n\n# 获取当前主题\n\n## 应用全局主题\n\n和设置相对应，非常简单\n\n```java\nAppCompatDelegate.getDefaultNightMode();\n```\n\n## 组件主题\n\n如果没有为组件单独设置主题，那么将会获取全局主题，否则获取到组件的主题。\n\n```java\nint currentNightMode = getResources().getConfiguration().uiMode\n        & Configuration.UI_MODE_NIGHT_MASK;\nswitch (currentNightMode) {\n    case Configuration.UI_MODE_NIGHT_NO:\n        // Night mode is not active, we're in day time\n    case Configuration.UI_MODE_NIGHT_YES:\n        // Night mode is active, we're at night!\n    case Configuration.UI_MODE_NIGHT_UNDEFINED:\n        // We don't know what mode we're in, assume notnight\n}\n```\n\n# 属性和资源\n\n对应夜间模式，我们会需要在不同的模式下使用不同的资源文件或不同的属性，此时我们可以新建一个带`-night`后缀的资源文件夹，然后再创建对应的资源文件即可，比如：`drawable-night`、`values-night`等。\n\n此时如果应用切换到了夜间模式，将会自动使用`-night`后缀中对应的资源。\n\n非夜间模式的后缀是`-notnight`，但是因为不是夜间模式就不会使用`-night`里的资源所以一般我们没必要使用这个后缀。\n\n# 主题适配\n\n按照如上设置了之后还可能会出现一些问题如夜间模式下文字颜色还是黑色的所以看不清了（直接给 TextView 设置了`textColor=\"@color/xxx\"`，而比较建议的是直接引用主题属性或者给不同模式设置不同的资源。\n\n如字体颜色一般使用`?android:attr/textColorPrimary`，图标颜色一般使用`?attr/colorControlNormal`等。\n\n# WebView 的主题适配\n\nWebView 因为没有特别的处理，所以我们需要通过加载特殊的 css 来完成夜间模式的适配。通过判断现在处于哪种主题然后切换对应的 css 即可。","source":"_posts/2016-06-01-night-mode-in-android.md","raw":"---\ntitle: 夜间模式初探\ndate: 2016-06-01 22:19:13\ncategory: [技术]\ntags: [Android]\ntoc: true\ndescription: Android Support Library 23.2.0 版为我们带来了官方的夜间模式，现在我们可以很容易地为 App 开发夜间模式了。\n---\n\n> Android Support Library 23.2.0 版为我们带来了官方的夜间模式，现在我们可以很容易地为 App 开发夜间模式了。\n\n# 如何使用\n\n使用起来非常简单，我们只需要将主题继承其即可\n\n```xml\n<!-- parent 为 Theme.AppCompat.DayNight -->\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.DayNight\">\n    <!-- Blah blah -->\n</style>\n```\n\n## 应用全局主题\n\n然后我们在程序中调用方法设置模式即可，推荐在 Application 的`onCreate()`中进行设置\n\n```java\nAppCompatDelegate.setDefaultNightMode(int mode);\n```\n\n它有四个可选值，分别是：\n\n* `MODE_NIGHT_NO`： 使用亮色(light)主题\n* `MODE_NIGHT_YES`：使用暗色(dark)主题\n* `MODE_NIGHT_AUTO`：根据当前时间自动切换 亮色(light)/暗色(dark)主题\n* `MODE_NIGHT_FOLLOW_SYSTEM`(默认选项)：设置为跟随系统，通常为 MODE_NIGHT_NO\n\n## 组件主题\n\n我们也可以为某一个组件设置主题，通过`getDelegate().setLocalNightMode(int mode);`即可。注意如果改变了 Activity 的主题，我们需要调用`recreate()`重启来显示改变后的效果。\n\n# 获取当前主题\n\n## 应用全局主题\n\n和设置相对应，非常简单\n\n```java\nAppCompatDelegate.getDefaultNightMode();\n```\n\n## 组件主题\n\n如果没有为组件单独设置主题，那么将会获取全局主题，否则获取到组件的主题。\n\n```java\nint currentNightMode = getResources().getConfiguration().uiMode\n        & Configuration.UI_MODE_NIGHT_MASK;\nswitch (currentNightMode) {\n    case Configuration.UI_MODE_NIGHT_NO:\n        // Night mode is not active, we're in day time\n    case Configuration.UI_MODE_NIGHT_YES:\n        // Night mode is active, we're at night!\n    case Configuration.UI_MODE_NIGHT_UNDEFINED:\n        // We don't know what mode we're in, assume notnight\n}\n```\n\n# 属性和资源\n\n对应夜间模式，我们会需要在不同的模式下使用不同的资源文件或不同的属性，此时我们可以新建一个带`-night`后缀的资源文件夹，然后再创建对应的资源文件即可，比如：`drawable-night`、`values-night`等。\n\n此时如果应用切换到了夜间模式，将会自动使用`-night`后缀中对应的资源。\n\n非夜间模式的后缀是`-notnight`，但是因为不是夜间模式就不会使用`-night`里的资源所以一般我们没必要使用这个后缀。\n\n# 主题适配\n\n按照如上设置了之后还可能会出现一些问题如夜间模式下文字颜色还是黑色的所以看不清了（直接给 TextView 设置了`textColor=\"@color/xxx\"`，而比较建议的是直接引用主题属性或者给不同模式设置不同的资源。\n\n如字体颜色一般使用`?android:attr/textColorPrimary`，图标颜色一般使用`?attr/colorControlNormal`等。\n\n# WebView 的主题适配\n\nWebView 因为没有特别的处理，所以我们需要通过加载特殊的 css 来完成夜间模式的适配。通过判断现在处于哪种主题然后切换对应的 css 即可。","slug":"night-mode-in-android","published":1,"updated":"2016-08-13T15:53:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvv0014gy6en6rrrymg","content":"<blockquote>\n<p>Android Support Library 23.2.0 版为我们带来了官方的夜间模式，现在我们可以很容易地为 App 开发夜间模式了。</p>\n</blockquote>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><p>使用起来非常简单，我们只需要将主题继承其即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- parent 为 Theme.AppCompat.DayNight --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.DayNight\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Blah blah --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"应用全局主题\"><a href=\"#应用全局主题\" class=\"headerlink\" title=\"应用全局主题\"></a>应用全局主题</h2><p>然后我们在程序中调用方法设置模式即可，推荐在 Application 的<code>onCreate()</code>中进行设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppCompatDelegate.setDefaultNightMode(<span class=\"keyword\">int</span> mode);</div></pre></td></tr></table></figure>\n<p>它有四个可选值，分别是：</p>\n<ul>\n<li><code>MODE_NIGHT_NO</code>： 使用亮色(light)主题</li>\n<li><code>MODE_NIGHT_YES</code>：使用暗色(dark)主题</li>\n<li><code>MODE_NIGHT_AUTO</code>：根据当前时间自动切换 亮色(light)/暗色(dark)主题</li>\n<li><code>MODE_NIGHT_FOLLOW_SYSTEM</code>(默认选项)：设置为跟随系统，通常为 MODE_NIGHT_NO</li>\n</ul>\n<h2 id=\"组件主题\"><a href=\"#组件主题\" class=\"headerlink\" title=\"组件主题\"></a>组件主题</h2><p>我们也可以为某一个组件设置主题，通过<code>getDelegate().setLocalNightMode(int mode);</code>即可。注意如果改变了 Activity 的主题，我们需要调用<code>recreate()</code>重启来显示改变后的效果。</p>\n<h1 id=\"获取当前主题\"><a href=\"#获取当前主题\" class=\"headerlink\" title=\"获取当前主题\"></a>获取当前主题</h1><h2 id=\"应用全局主题-1\"><a href=\"#应用全局主题-1\" class=\"headerlink\" title=\"应用全局主题\"></a>应用全局主题</h2><p>和设置相对应，非常简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppCompatDelegate.getDefaultNightMode();</div></pre></td></tr></table></figure>\n<h2 id=\"组件主题-1\"><a href=\"#组件主题-1\" class=\"headerlink\" title=\"组件主题\"></a>组件主题</h2><p>如果没有为组件单独设置主题，那么将会获取全局主题，否则获取到组件的主题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> currentNightMode = getResources().getConfiguration().uiMode</div><div class=\"line\">        &amp; Configuration.UI_MODE_NIGHT_MASK;</div><div class=\"line\"><span class=\"keyword\">switch</span> (currentNightMode) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Configuration.UI_MODE_NIGHT_NO:</div><div class=\"line\">        <span class=\"comment\">// Night mode is not active, we're in day time</span></div><div class=\"line\">    <span class=\"keyword\">case</span> Configuration.UI_MODE_NIGHT_YES:</div><div class=\"line\">        <span class=\"comment\">// Night mode is active, we're at night!</span></div><div class=\"line\">    <span class=\"keyword\">case</span> Configuration.UI_MODE_NIGHT_UNDEFINED:</div><div class=\"line\">        <span class=\"comment\">// We don't know what mode we're in, assume notnight</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"属性和资源\"><a href=\"#属性和资源\" class=\"headerlink\" title=\"属性和资源\"></a>属性和资源</h1><p>对应夜间模式，我们会需要在不同的模式下使用不同的资源文件或不同的属性，此时我们可以新建一个带<code>-night</code>后缀的资源文件夹，然后再创建对应的资源文件即可，比如：<code>drawable-night</code>、<code>values-night</code>等。</p>\n<p>此时如果应用切换到了夜间模式，将会自动使用<code>-night</code>后缀中对应的资源。</p>\n<p>非夜间模式的后缀是<code>-notnight</code>，但是因为不是夜间模式就不会使用<code>-night</code>里的资源所以一般我们没必要使用这个后缀。</p>\n<h1 id=\"主题适配\"><a href=\"#主题适配\" class=\"headerlink\" title=\"主题适配\"></a>主题适配</h1><p>按照如上设置了之后还可能会出现一些问题如夜间模式下文字颜色还是黑色的所以看不清了（直接给 TextView 设置了<code>textColor=&quot;@color/xxx&quot;</code>，而比较建议的是直接引用主题属性或者给不同模式设置不同的资源。</p>\n<p>如字体颜色一般使用<code>?android:attr/textColorPrimary</code>，图标颜色一般使用<code>?attr/colorControlNormal</code>等。</p>\n<h1 id=\"WebView-的主题适配\"><a href=\"#WebView-的主题适配\" class=\"headerlink\" title=\"WebView 的主题适配\"></a>WebView 的主题适配</h1><p>WebView 因为没有特别的处理，所以我们需要通过加载特殊的 css 来完成夜间模式的适配。通过判断现在处于哪种主题然后切换对应的 css 即可。</p>\n","excerpt":"","more":"<blockquote>\n<p>Android Support Library 23.2.0 版为我们带来了官方的夜间模式，现在我们可以很容易地为 App 开发夜间模式了。</p>\n</blockquote>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><p>使用起来非常简单，我们只需要将主题继承其即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- parent 为 Theme.AppCompat.DayNight --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.DayNight\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Blah blah --&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"应用全局主题\"><a href=\"#应用全局主题\" class=\"headerlink\" title=\"应用全局主题\"></a>应用全局主题</h2><p>然后我们在程序中调用方法设置模式即可，推荐在 Application 的<code>onCreate()</code>中进行设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppCompatDelegate.setDefaultNightMode(<span class=\"keyword\">int</span> mode);</div></pre></td></tr></table></figure>\n<p>它有四个可选值，分别是：</p>\n<ul>\n<li><code>MODE_NIGHT_NO</code>： 使用亮色(light)主题</li>\n<li><code>MODE_NIGHT_YES</code>：使用暗色(dark)主题</li>\n<li><code>MODE_NIGHT_AUTO</code>：根据当前时间自动切换 亮色(light)/暗色(dark)主题</li>\n<li><code>MODE_NIGHT_FOLLOW_SYSTEM</code>(默认选项)：设置为跟随系统，通常为 MODE_NIGHT_NO</li>\n</ul>\n<h2 id=\"组件主题\"><a href=\"#组件主题\" class=\"headerlink\" title=\"组件主题\"></a>组件主题</h2><p>我们也可以为某一个组件设置主题，通过<code>getDelegate().setLocalNightMode(int mode);</code>即可。注意如果改变了 Activity 的主题，我们需要调用<code>recreate()</code>重启来显示改变后的效果。</p>\n<h1 id=\"获取当前主题\"><a href=\"#获取当前主题\" class=\"headerlink\" title=\"获取当前主题\"></a>获取当前主题</h1><h2 id=\"应用全局主题-1\"><a href=\"#应用全局主题-1\" class=\"headerlink\" title=\"应用全局主题\"></a>应用全局主题</h2><p>和设置相对应，非常简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppCompatDelegate.getDefaultNightMode();</div></pre></td></tr></table></figure>\n<h2 id=\"组件主题-1\"><a href=\"#组件主题-1\" class=\"headerlink\" title=\"组件主题\"></a>组件主题</h2><p>如果没有为组件单独设置主题，那么将会获取全局主题，否则获取到组件的主题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> currentNightMode = getResources().getConfiguration().uiMode</div><div class=\"line\">        &amp; Configuration.UI_MODE_NIGHT_MASK;</div><div class=\"line\"><span class=\"keyword\">switch</span> (currentNightMode) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Configuration.UI_MODE_NIGHT_NO:</div><div class=\"line\">        <span class=\"comment\">// Night mode is not active, we're in day time</span></div><div class=\"line\">    <span class=\"keyword\">case</span> Configuration.UI_MODE_NIGHT_YES:</div><div class=\"line\">        <span class=\"comment\">// Night mode is active, we're at night!</span></div><div class=\"line\">    <span class=\"keyword\">case</span> Configuration.UI_MODE_NIGHT_UNDEFINED:</div><div class=\"line\">        <span class=\"comment\">// We don't know what mode we're in, assume notnight</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"属性和资源\"><a href=\"#属性和资源\" class=\"headerlink\" title=\"属性和资源\"></a>属性和资源</h1><p>对应夜间模式，我们会需要在不同的模式下使用不同的资源文件或不同的属性，此时我们可以新建一个带<code>-night</code>后缀的资源文件夹，然后再创建对应的资源文件即可，比如：<code>drawable-night</code>、<code>values-night</code>等。</p>\n<p>此时如果应用切换到了夜间模式，将会自动使用<code>-night</code>后缀中对应的资源。</p>\n<p>非夜间模式的后缀是<code>-notnight</code>，但是因为不是夜间模式就不会使用<code>-night</code>里的资源所以一般我们没必要使用这个后缀。</p>\n<h1 id=\"主题适配\"><a href=\"#主题适配\" class=\"headerlink\" title=\"主题适配\"></a>主题适配</h1><p>按照如上设置了之后还可能会出现一些问题如夜间模式下文字颜色还是黑色的所以看不清了（直接给 TextView 设置了<code>textColor=&quot;@color/xxx&quot;</code>，而比较建议的是直接引用主题属性或者给不同模式设置不同的资源。</p>\n<p>如字体颜色一般使用<code>?android:attr/textColorPrimary</code>，图标颜色一般使用<code>?attr/colorControlNormal</code>等。</p>\n<h1 id=\"WebView-的主题适配\"><a href=\"#WebView-的主题适配\" class=\"headerlink\" title=\"WebView 的主题适配\"></a>WebView 的主题适配</h1><p>WebView 因为没有特别的处理，所以我们需要通过加载特殊的 css 来完成夜间模式的适配。通过判断现在处于哪种主题然后切换对应的 css 即可。</p>\n"},{"title":"自定义View之自定义属性","date":"2016-08-13T14:32:31.000Z","toc":true,"description":"在之前我们学会了自定义 View 的测量和绘制，那么接下来我们需要在布局文件中给它设置一些自定义属性以个性化控件——如我希望第一个该控件是蓝色的，但希望另一个是红色的。这个时候我们就需要在布局文件中定义属性了，本文就记录一下如何获取并使用自定义属性。","_content":"\n# 定义一个控件\n\n我们先画一个简单的圆形 View，在`onDraw`中绘制。\n\n```java\npublic class CircleView extends View {\n\n    private Paint mPaint;\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n        init();\n    }\n\n    private void init() {\n        mPaint = new Paint();\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        canvas.drawCircle(100, 100, 100, mPaint);\n    }\n}\n```\n\n然后在布局文件中使用：\n\n```xml\n    <io.github.loshine.customview.view.CircleView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n```\n\n然后我们就可以在 preview 窗口中看到效果了\n\n![](http://7xl94a.com1.z0.glb.clouddn.com/blog-attr-circle-1.png)\n\n一个很简单的黑色的圆形\n\n# 定义需要的属性\n\n现在我觉得黑色不好看了，我想给它换个颜色，那么一般来说可以用`Paint.setColor(int color)`来修改为其它的颜色。但这会让所有的 CircleView 都变成另一个颜色。\n\n但我可能希望在一个 Activity 里的 CircleView 是红色，但在另一个中的是蓝色。\n\n此时我们就需要给该 View 自定义属性了。\n\n自定义属性就类似 TextView 的`android:text=\"xxx\"`，ImageView 的`android:src=\"@drawable/xxx\"`，可以给相同类型的 View 设置不同的属性展示不同的效果。\n\n这里我们定义一个 color 属性。\n\n## 声明属性名称\n\n在`res/values`文件夹下新建一个资源文件，叫 attrs.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"CircleView\">\n        <attr name=\"circle_color\" format=\"color\" />\n    </declare-styleable>\n</resources>\n```\n\n这样就完成了属性名称的声明。\n\n`declare-styleable`的 name 必须要对应 View 的类名，`attr`标签中定义的就是需要自定义的属性名称和类型。\n\n我们有这几种类型：\n\n* boolean\n* color\n* dimension\n* enum\n* flag\n* float\n* fraction\n* integer\n* reference\n* string\n\n声明完成之后就可以在代码中根据对应的方法获取布局中使用的自定义属性了。\n\n# 获取属性\n\n## 构造方法\n\n我们在自定义 View 的时候 IDE 通常会提醒我们需要拥有构造函数，然后我们使用其智能提醒会发现有四个构造函数供我们选择：\n\n```java\npublic View(Context context);\npublic View(Context context, AttributeSet attrs);\npublic View(Context context, AttributeSet attrs, int defStyleAttr);\npublic View(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)\n```\n\n查看源码注释，我们知道这四个方法分别对应不同方式创建 View：\n\n* `View(context)`：直接在代码中 new 出来\n* `View(context, attrs)`：当 View 是从布局文件 inflate 出来的时候会调用这个构造方法，使用默认的 style 和 theme。\n* `View(context, attrs, defStyleAttr)`：该方法不会被系统直接调用，我们需要手动调用。该方法相比第二个方法多了一个默认 style 的参数，它的作用就是为 View 提供一个基本的样式。\n* `View(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)`：将资源文件中定义的某个样式作为默认样式。\n\n我们在实现自定义 View 的时候，通常至少有两个构造方法（至于为什么我们后文再说），分别是`View(Context context)`以及`View(Context context, AttrbuteSet attires)`，这样我们才可以在 Java 代码中以及在布局文件中（或使用 Inflater）实例化它们。\n\n## obtainStyledAttributes\n\n看过了 View 的构造方法，我们现在就要在构造方法里获取 View 的参数了。`Context`这个类为我们提供了以下几个方法来获取属性：\n\n```java\nobtainAttributes(AttributeSet set, int[] attrs) // 从 layout 设置的属性集中获取 attrs 中的属性\nobtainStyledAttributes(int[] attrs) // 从系统主题中获取 attrs 中的属性\nobtainStyledAttributes(int resId, int[] attrs) // 从资源文件定义的 style 中读取属性\nobtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes) // 后面详细说这个方法\n```\n\n我们了解一下这几个 API 的参数，然后就可以很方便的获取自定义属性了。\n\n### 参数解析\n\n#### attrs\n\n就是我们需要获取属性集中的哪些属性，通常我们会定义一个`<styleable>`来管理所有的`<attr>`，然后我们就可以用`R.styleable.someAttrs`来使用这个参数了。\n\n#### AttrbuteSet\n\n即我们在 xml 中定义的属性的集合，如：\n\n```xml\n    <Button\n        android:id=\"@+id/dial_button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/dial\" />\n```\n\n这里我们的每一条属性都会放到 AttrbuteSet 中去，当然自定义属性也不例外。需要注意的是，`style=\"@style/somestyle\"`这样添加的属性也是会放进去的。\n\n> 这也是我们必须要实现`View(Context context, AttrbuteSet attr)`的原因，因为我们需要把布局文件中定义的参数传进来处理。\n\n#### defStyleAttrs\n\n这是自定义属性中可以让其在 Theme 中配置的关键，使用它作为参数会从当前 Theme 中去获取参数。\n\n#### resId/defStyleRes\n\n直接从资源文件中定义的某个样式中读取。\n\n#### Null\n\n注意到我们有一个方法只需要`attrs`作为参数，那它的属性从哪里来呢？其实是我们可以直接在 Theme 中指定属性并且用这个方法获取属性。\n\n#### 四个参数\n\n`obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)`这个方法有四个参数，我们获取到的属性可能从四个地方来：布局文件(set), defStyleAttr(主题可配置样式), defStyleRes(默认样式), NULL(主题中直接获取)\n\n如果一个属性在多个地方都被定义了，那么它们的优先级如下：\n\n`set`>`defStyleAttr`>`defStyleRes`>`NULL`\n\n## TypedArray\n\n通过`obtainStyledAttributes()`我们就拿到了 TypedValue，我们需要的属性都存在里面。然后我们可以对应声明的时候的类型，使用对应的`getXXX()`方法来获取自定义属性，之后我们就可以使用自定义属性来绘图了。\n\n# 实例\n\n我们将上述的圆形控件修改为五种不同颜色的同心圆，然后使用上面的不同定义属性的方式来定义一遍并且使用。\n\n首先我们的圆形 View 改成这样了：\n\n```java\npublic class CircleView extends View {\n\n    private Paint mPaint;\n    private int mColor1 = Color.BLACK;\n    private int mColor2 = Color.BLACK;\n    private int mColor3 = Color.BLACK;\n    private int mColor4 = Color.BLACK;\n    private int mColor5 = Color.BLACK;\n\n    public CircleView(Context context) {\n        this(context, null);\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleView,\n                defStyleAttr, R.style.default_style);\n        mColor1 = typedArray.getColor(R.styleable.CircleView_circle_color1, Color.BLACK);\n        mColor2 = typedArray.getColor(R.styleable.CircleView_circle_color2, Color.BLACK);\n        mColor3 = typedArray.getColor(R.styleable.CircleView_circle_color3, Color.BLACK);\n        mColor4 = typedArray.getColor(R.styleable.CircleView_circle_color4, Color.BLACK);\n        mColor5 = typedArray.getColor(R.styleable.CircleView_circle_color5, Color.BLACK);\n        typedArray.recycle();\n        init();\n    }\n\n    private void init() {\n        mPaint = new Paint();\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        mPaint.setColor(mColor1);\n        canvas.drawCircle(100, 100, 100, mPaint);\n        mPaint.setColor(mColor2);\n        canvas.drawCircle(100, 100, 80, mPaint);\n        mPaint.setColor(mColor3);\n        canvas.drawCircle(100, 100, 60, mPaint);\n        mPaint.setColor(mColor4);\n        canvas.drawCircle(100, 100, 40, mPaint);\n        mPaint.setColor(mColor5);\n        canvas.drawCircle(100, 100, 20, mPaint);\n    }\n}\n```\n\n然后在`attrs.xml`中如下定义：\n\n```xml\n<resources>\n    <declare-styleable name=\"CircleView\">\n        <!-- 对应五个同心圆的颜色 -->\n        <attr name=\"circle_color1\" format=\"color\"/>\n        <attr name=\"circle_color2\" format=\"color\"/>\n        <attr name=\"circle_color3\" format=\"color\"/>\n        <attr name=\"circle_color4\" format=\"color\"/>\n        <attr name=\"circle_color5\" format=\"color\"/>\n    </declare-styleable>\n\n    <!-- 定义 theme 可配置 style -->\n    <attr name=\"circle_style\" format=\"reference\"/>\n</resources>\n```\n\n然后我们的`style.xml`中是这样的：\n\n```xml\n<resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n\n        <!-- 配置style -->\n        <item name=\"circle_style\">@style/custom_theme</item>\n        <!-- 直接在主题中指定 -->\n        <item name=\"circle_color1\">#ffff00ff</item>\n        <item name=\"circle_color2\">#ffff00ff</item>\n        <item name=\"circle_color3\">#ffff00ff</item>\n        <item name=\"circle_color4\">#ffff00ff</item>\n        <item name=\"circle_color5\">#ffff00ff</item>\n    </style>\n\n    <!-- 主题中配置的style -->\n    <style name=\"custom_theme\">\n        <item name=\"circle_color1\">#ffff0000</item>\n        <item name=\"circle_color2\">#ffff0000</item>\n        <item name=\"circle_color3\">#ffff0000</item>\n    </style>\n\n    <!-- 直接在layout文件中引用的style，最后会被放到set中 -->\n    <style name=\"myStyle\">\n        <item name=\"circle_color1\">#ff00ff00</item>\n        <item name=\"circle_color2\">#ff00ff00</item>\n    </style>\n\n    <style name=\"default_style\">\n        <item name=\"circle_color1\">#ffffff00</item>\n        <item name=\"circle_color2\">#ffffff00</item>\n        <item name=\"circle_color3\">#ffffff00</item>\n        <item name=\"circle_color4\">#ffffff00</item>\n    </style>\n\n</resources>\n```\n\n在布局中我们是这样使用的：\n\n```xml\n    <io.github.loshine.customview.view.CircleView\n        style=\"@style/myStyle\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:circle_color1=\"#ff00ffff\"/>\n```\n\n如上配置，我们效果如图所示：\n\n![](http://7xl94a.com1.z0.glb.clouddn.com/custom_attr.png)\n\n可以看出我们的 color4 没有起效果，这是因为使用了 defStyle，这个时候默认 Style 就不会起作用了。\n\n# 参考文章\n\n[深入理解Android 自定义attr Style styleable以及其应用](http://www.jianshu.com/p/61b79e7f88fc)\n\n","source":"_posts/2016-08-13-custom-view-attrs.md","raw":"---\ntitle: 自定义View之自定义属性\ndate: 2016-08-13 22:32:31\ncategory: [技术]\ntags: [Android]\ntoc: true\ndescription: 在之前我们学会了自定义 View 的测量和绘制，那么接下来我们需要在布局文件中给它设置一些自定义属性以个性化控件——如我希望第一个该控件是蓝色的，但希望另一个是红色的。这个时候我们就需要在布局文件中定义属性了，本文就记录一下如何获取并使用自定义属性。\n---\n\n# 定义一个控件\n\n我们先画一个简单的圆形 View，在`onDraw`中绘制。\n\n```java\npublic class CircleView extends View {\n\n    private Paint mPaint;\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n        init();\n    }\n\n    private void init() {\n        mPaint = new Paint();\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        canvas.drawCircle(100, 100, 100, mPaint);\n    }\n}\n```\n\n然后在布局文件中使用：\n\n```xml\n    <io.github.loshine.customview.view.CircleView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n```\n\n然后我们就可以在 preview 窗口中看到效果了\n\n![](http://7xl94a.com1.z0.glb.clouddn.com/blog-attr-circle-1.png)\n\n一个很简单的黑色的圆形\n\n# 定义需要的属性\n\n现在我觉得黑色不好看了，我想给它换个颜色，那么一般来说可以用`Paint.setColor(int color)`来修改为其它的颜色。但这会让所有的 CircleView 都变成另一个颜色。\n\n但我可能希望在一个 Activity 里的 CircleView 是红色，但在另一个中的是蓝色。\n\n此时我们就需要给该 View 自定义属性了。\n\n自定义属性就类似 TextView 的`android:text=\"xxx\"`，ImageView 的`android:src=\"@drawable/xxx\"`，可以给相同类型的 View 设置不同的属性展示不同的效果。\n\n这里我们定义一个 color 属性。\n\n## 声明属性名称\n\n在`res/values`文件夹下新建一个资源文件，叫 attrs.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"CircleView\">\n        <attr name=\"circle_color\" format=\"color\" />\n    </declare-styleable>\n</resources>\n```\n\n这样就完成了属性名称的声明。\n\n`declare-styleable`的 name 必须要对应 View 的类名，`attr`标签中定义的就是需要自定义的属性名称和类型。\n\n我们有这几种类型：\n\n* boolean\n* color\n* dimension\n* enum\n* flag\n* float\n* fraction\n* integer\n* reference\n* string\n\n声明完成之后就可以在代码中根据对应的方法获取布局中使用的自定义属性了。\n\n# 获取属性\n\n## 构造方法\n\n我们在自定义 View 的时候 IDE 通常会提醒我们需要拥有构造函数，然后我们使用其智能提醒会发现有四个构造函数供我们选择：\n\n```java\npublic View(Context context);\npublic View(Context context, AttributeSet attrs);\npublic View(Context context, AttributeSet attrs, int defStyleAttr);\npublic View(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)\n```\n\n查看源码注释，我们知道这四个方法分别对应不同方式创建 View：\n\n* `View(context)`：直接在代码中 new 出来\n* `View(context, attrs)`：当 View 是从布局文件 inflate 出来的时候会调用这个构造方法，使用默认的 style 和 theme。\n* `View(context, attrs, defStyleAttr)`：该方法不会被系统直接调用，我们需要手动调用。该方法相比第二个方法多了一个默认 style 的参数，它的作用就是为 View 提供一个基本的样式。\n* `View(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)`：将资源文件中定义的某个样式作为默认样式。\n\n我们在实现自定义 View 的时候，通常至少有两个构造方法（至于为什么我们后文再说），分别是`View(Context context)`以及`View(Context context, AttrbuteSet attires)`，这样我们才可以在 Java 代码中以及在布局文件中（或使用 Inflater）实例化它们。\n\n## obtainStyledAttributes\n\n看过了 View 的构造方法，我们现在就要在构造方法里获取 View 的参数了。`Context`这个类为我们提供了以下几个方法来获取属性：\n\n```java\nobtainAttributes(AttributeSet set, int[] attrs) // 从 layout 设置的属性集中获取 attrs 中的属性\nobtainStyledAttributes(int[] attrs) // 从系统主题中获取 attrs 中的属性\nobtainStyledAttributes(int resId, int[] attrs) // 从资源文件定义的 style 中读取属性\nobtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes) // 后面详细说这个方法\n```\n\n我们了解一下这几个 API 的参数，然后就可以很方便的获取自定义属性了。\n\n### 参数解析\n\n#### attrs\n\n就是我们需要获取属性集中的哪些属性，通常我们会定义一个`<styleable>`来管理所有的`<attr>`，然后我们就可以用`R.styleable.someAttrs`来使用这个参数了。\n\n#### AttrbuteSet\n\n即我们在 xml 中定义的属性的集合，如：\n\n```xml\n    <Button\n        android:id=\"@+id/dial_button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/dial\" />\n```\n\n这里我们的每一条属性都会放到 AttrbuteSet 中去，当然自定义属性也不例外。需要注意的是，`style=\"@style/somestyle\"`这样添加的属性也是会放进去的。\n\n> 这也是我们必须要实现`View(Context context, AttrbuteSet attr)`的原因，因为我们需要把布局文件中定义的参数传进来处理。\n\n#### defStyleAttrs\n\n这是自定义属性中可以让其在 Theme 中配置的关键，使用它作为参数会从当前 Theme 中去获取参数。\n\n#### resId/defStyleRes\n\n直接从资源文件中定义的某个样式中读取。\n\n#### Null\n\n注意到我们有一个方法只需要`attrs`作为参数，那它的属性从哪里来呢？其实是我们可以直接在 Theme 中指定属性并且用这个方法获取属性。\n\n#### 四个参数\n\n`obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)`这个方法有四个参数，我们获取到的属性可能从四个地方来：布局文件(set), defStyleAttr(主题可配置样式), defStyleRes(默认样式), NULL(主题中直接获取)\n\n如果一个属性在多个地方都被定义了，那么它们的优先级如下：\n\n`set`>`defStyleAttr`>`defStyleRes`>`NULL`\n\n## TypedArray\n\n通过`obtainStyledAttributes()`我们就拿到了 TypedValue，我们需要的属性都存在里面。然后我们可以对应声明的时候的类型，使用对应的`getXXX()`方法来获取自定义属性，之后我们就可以使用自定义属性来绘图了。\n\n# 实例\n\n我们将上述的圆形控件修改为五种不同颜色的同心圆，然后使用上面的不同定义属性的方式来定义一遍并且使用。\n\n首先我们的圆形 View 改成这样了：\n\n```java\npublic class CircleView extends View {\n\n    private Paint mPaint;\n    private int mColor1 = Color.BLACK;\n    private int mColor2 = Color.BLACK;\n    private int mColor3 = Color.BLACK;\n    private int mColor4 = Color.BLACK;\n    private int mColor5 = Color.BLACK;\n\n    public CircleView(Context context) {\n        this(context, null);\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleView,\n                defStyleAttr, R.style.default_style);\n        mColor1 = typedArray.getColor(R.styleable.CircleView_circle_color1, Color.BLACK);\n        mColor2 = typedArray.getColor(R.styleable.CircleView_circle_color2, Color.BLACK);\n        mColor3 = typedArray.getColor(R.styleable.CircleView_circle_color3, Color.BLACK);\n        mColor4 = typedArray.getColor(R.styleable.CircleView_circle_color4, Color.BLACK);\n        mColor5 = typedArray.getColor(R.styleable.CircleView_circle_color5, Color.BLACK);\n        typedArray.recycle();\n        init();\n    }\n\n    private void init() {\n        mPaint = new Paint();\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        mPaint.setColor(mColor1);\n        canvas.drawCircle(100, 100, 100, mPaint);\n        mPaint.setColor(mColor2);\n        canvas.drawCircle(100, 100, 80, mPaint);\n        mPaint.setColor(mColor3);\n        canvas.drawCircle(100, 100, 60, mPaint);\n        mPaint.setColor(mColor4);\n        canvas.drawCircle(100, 100, 40, mPaint);\n        mPaint.setColor(mColor5);\n        canvas.drawCircle(100, 100, 20, mPaint);\n    }\n}\n```\n\n然后在`attrs.xml`中如下定义：\n\n```xml\n<resources>\n    <declare-styleable name=\"CircleView\">\n        <!-- 对应五个同心圆的颜色 -->\n        <attr name=\"circle_color1\" format=\"color\"/>\n        <attr name=\"circle_color2\" format=\"color\"/>\n        <attr name=\"circle_color3\" format=\"color\"/>\n        <attr name=\"circle_color4\" format=\"color\"/>\n        <attr name=\"circle_color5\" format=\"color\"/>\n    </declare-styleable>\n\n    <!-- 定义 theme 可配置 style -->\n    <attr name=\"circle_style\" format=\"reference\"/>\n</resources>\n```\n\n然后我们的`style.xml`中是这样的：\n\n```xml\n<resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n\n        <!-- 配置style -->\n        <item name=\"circle_style\">@style/custom_theme</item>\n        <!-- 直接在主题中指定 -->\n        <item name=\"circle_color1\">#ffff00ff</item>\n        <item name=\"circle_color2\">#ffff00ff</item>\n        <item name=\"circle_color3\">#ffff00ff</item>\n        <item name=\"circle_color4\">#ffff00ff</item>\n        <item name=\"circle_color5\">#ffff00ff</item>\n    </style>\n\n    <!-- 主题中配置的style -->\n    <style name=\"custom_theme\">\n        <item name=\"circle_color1\">#ffff0000</item>\n        <item name=\"circle_color2\">#ffff0000</item>\n        <item name=\"circle_color3\">#ffff0000</item>\n    </style>\n\n    <!-- 直接在layout文件中引用的style，最后会被放到set中 -->\n    <style name=\"myStyle\">\n        <item name=\"circle_color1\">#ff00ff00</item>\n        <item name=\"circle_color2\">#ff00ff00</item>\n    </style>\n\n    <style name=\"default_style\">\n        <item name=\"circle_color1\">#ffffff00</item>\n        <item name=\"circle_color2\">#ffffff00</item>\n        <item name=\"circle_color3\">#ffffff00</item>\n        <item name=\"circle_color4\">#ffffff00</item>\n    </style>\n\n</resources>\n```\n\n在布局中我们是这样使用的：\n\n```xml\n    <io.github.loshine.customview.view.CircleView\n        style=\"@style/myStyle\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:circle_color1=\"#ff00ffff\"/>\n```\n\n如上配置，我们效果如图所示：\n\n![](http://7xl94a.com1.z0.glb.clouddn.com/custom_attr.png)\n\n可以看出我们的 color4 没有起效果，这是因为使用了 defStyle，这个时候默认 Style 就不会起作用了。\n\n# 参考文章\n\n[深入理解Android 自定义attr Style styleable以及其应用](http://www.jianshu.com/p/61b79e7f88fc)\n\n","slug":"custom-view-attrs","published":1,"updated":"2016-08-13T15:57:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirtd8zvx0017gy6ei5g5ykb9","content":"<h1 id=\"定义一个控件\"><a href=\"#定义一个控件\" class=\"headerlink\" title=\"定义一个控件\"></a>定义一个控件</h1><p>我们先画一个简单的圆形 View，在<code>onDraw</code>中绘制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr, <span class=\"keyword\">int</span> defStyleRes)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在布局文件中使用：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">io.github.loshine.customview.view.CircleView</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>然后我们就可以在 preview 窗口中看到效果了</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-attr-circle-1.png\" alt=\"\"></p>\n<p>一个很简单的黑色的圆形</p>\n<h1 id=\"定义需要的属性\"><a href=\"#定义需要的属性\" class=\"headerlink\" title=\"定义需要的属性\"></a>定义需要的属性</h1><p>现在我觉得黑色不好看了，我想给它换个颜色，那么一般来说可以用<code>Paint.setColor(int color)</code>来修改为其它的颜色。但这会让所有的 CircleView 都变成另一个颜色。</p>\n<p>但我可能希望在一个 Activity 里的 CircleView 是红色，但在另一个中的是蓝色。</p>\n<p>此时我们就需要给该 View 自定义属性了。</p>\n<p>自定义属性就类似 TextView 的<code>android:text=&quot;xxx&quot;</code>，ImageView 的<code>android:src=&quot;@drawable/xxx&quot;</code>，可以给相同类型的 View 设置不同的属性展示不同的效果。</p>\n<p>这里我们定义一个 color 属性。</p>\n<h2 id=\"声明属性名称\"><a href=\"#声明属性名称\" class=\"headerlink\" title=\"声明属性名称\"></a>声明属性名称</h2><p>在<code>res/values</code>文件夹下新建一个资源文件，叫 attrs.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这样就完成了属性名称的声明。</p>\n<p><code>declare-styleable</code>的 name 必须要对应 View 的类名，<code>attr</code>标签中定义的就是需要自定义的属性名称和类型。</p>\n<p>我们有这几种类型：</p>\n<ul>\n<li>boolean</li>\n<li>color</li>\n<li>dimension</li>\n<li>enum</li>\n<li>flag</li>\n<li>float</li>\n<li>fraction</li>\n<li>integer</li>\n<li>reference</li>\n<li>string</li>\n</ul>\n<p>声明完成之后就可以在代码中根据对应的方法获取布局中使用的自定义属性了。</p>\n<h1 id=\"获取属性\"><a href=\"#获取属性\" class=\"headerlink\" title=\"获取属性\"></a>获取属性</h1><h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><p>我们在自定义 View 的时候 IDE 通常会提醒我们需要拥有构造函数，然后我们使用其智能提醒会发现有四个构造函数供我们选择：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, AttributeSet attrs)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr, <span class=\"keyword\">int</span> defStyleRes)</span></span></div></pre></td></tr></table></figure>\n<p>查看源码注释，我们知道这四个方法分别对应不同方式创建 View：</p>\n<ul>\n<li><code>View(context)</code>：直接在代码中 new 出来</li>\n<li><code>View(context, attrs)</code>：当 View 是从布局文件 inflate 出来的时候会调用这个构造方法，使用默认的 style 和 theme。</li>\n<li><code>View(context, attrs, defStyleAttr)</code>：该方法不会被系统直接调用，我们需要手动调用。该方法相比第二个方法多了一个默认 style 的参数，它的作用就是为 View 提供一个基本的样式。</li>\n<li><code>View(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)</code>：将资源文件中定义的某个样式作为默认样式。</li>\n</ul>\n<p>我们在实现自定义 View 的时候，通常至少有两个构造方法（至于为什么我们后文再说），分别是<code>View(Context context)</code>以及<code>View(Context context, AttrbuteSet attires)</code>，这样我们才可以在 Java 代码中以及在布局文件中（或使用 Inflater）实例化它们。</p>\n<h2 id=\"obtainStyledAttributes\"><a href=\"#obtainStyledAttributes\" class=\"headerlink\" title=\"obtainStyledAttributes\"></a>obtainStyledAttributes</h2><p>看过了 View 的构造方法，我们现在就要在构造方法里获取 View 的参数了。<code>Context</code>这个类为我们提供了以下几个方法来获取属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">obtainAttributes(AttributeSet set, <span class=\"keyword\">int</span>[] attrs) <span class=\"comment\">// 从 layout 设置的属性集中获取 attrs 中的属性</span></div><div class=\"line\">obtainStyledAttributes(<span class=\"keyword\">int</span>[] attrs) <span class=\"comment\">// 从系统主题中获取 attrs 中的属性</span></div><div class=\"line\">obtainStyledAttributes(<span class=\"keyword\">int</span> resId, <span class=\"keyword\">int</span>[] attrs) <span class=\"comment\">// 从资源文件定义的 style 中读取属性</span></div><div class=\"line\">obtainStyledAttributes(AttributeSet set, <span class=\"keyword\">int</span>[] attrs, <span class=\"keyword\">int</span> defStyleAttr, <span class=\"keyword\">int</span> defStyleRes) <span class=\"comment\">// 后面详细说这个方法</span></div></pre></td></tr></table></figure>\n<p>我们了解一下这几个 API 的参数，然后就可以很方便的获取自定义属性了。</p>\n<h3 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h3><h4 id=\"attrs\"><a href=\"#attrs\" class=\"headerlink\" title=\"attrs\"></a>attrs</h4><p>就是我们需要获取属性集中的哪些属性，通常我们会定义一个<code>&lt;styleable&gt;</code>来管理所有的<code>&lt;attr&gt;</code>，然后我们就可以用<code>R.styleable.someAttrs</code>来使用这个参数了。</p>\n<h4 id=\"AttrbuteSet\"><a href=\"#AttrbuteSet\" class=\"headerlink\" title=\"AttrbuteSet\"></a>AttrbuteSet</h4><p>即我们在 xml 中定义的属性的集合，如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dial_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dial\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>这里我们的每一条属性都会放到 AttrbuteSet 中去，当然自定义属性也不例外。需要注意的是，<code>style=&quot;@style/somestyle&quot;</code>这样添加的属性也是会放进去的。</p>\n<blockquote>\n<p>这也是我们必须要实现<code>View(Context context, AttrbuteSet attr)</code>的原因，因为我们需要把布局文件中定义的参数传进来处理。</p>\n</blockquote>\n<h4 id=\"defStyleAttrs\"><a href=\"#defStyleAttrs\" class=\"headerlink\" title=\"defStyleAttrs\"></a>defStyleAttrs</h4><p>这是自定义属性中可以让其在 Theme 中配置的关键，使用它作为参数会从当前 Theme 中去获取参数。</p>\n<h4 id=\"resId-defStyleRes\"><a href=\"#resId-defStyleRes\" class=\"headerlink\" title=\"resId/defStyleRes\"></a>resId/defStyleRes</h4><p>直接从资源文件中定义的某个样式中读取。</p>\n<h4 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h4><p>注意到我们有一个方法只需要<code>attrs</code>作为参数，那它的属性从哪里来呢？其实是我们可以直接在 Theme 中指定属性并且用这个方法获取属性。</p>\n<h4 id=\"四个参数\"><a href=\"#四个参数\" class=\"headerlink\" title=\"四个参数\"></a>四个参数</h4><p><code>obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)</code>这个方法有四个参数，我们获取到的属性可能从四个地方来：布局文件(set), defStyleAttr(主题可配置样式), defStyleRes(默认样式), NULL(主题中直接获取)</p>\n<p>如果一个属性在多个地方都被定义了，那么它们的优先级如下：</p>\n<p><code>set</code>&gt;<code>defStyleAttr</code>&gt;<code>defStyleRes</code>&gt;<code>NULL</code></p>\n<h2 id=\"TypedArray\"><a href=\"#TypedArray\" class=\"headerlink\" title=\"TypedArray\"></a>TypedArray</h2><p>通过<code>obtainStyledAttributes()</code>我们就拿到了 TypedValue，我们需要的属性都存在里面。然后我们可以对应声明的时候的类型，使用对应的<code>getXXX()</code>方法来获取自定义属性，之后我们就可以使用自定义属性来绘图了。</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>我们将上述的圆形控件修改为五种不同颜色的同心圆，然后使用上面的不同定义属性的方式来定义一遍并且使用。</p>\n<p>首先我们的圆形 View 改成这样了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor1 = Color.BLACK;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor2 = Color.BLACK;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor3 = Color.BLACK;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor4 = Color.BLACK;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor5 = Color.BLACK;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleView,</div><div class=\"line\">                defStyleAttr, R.style.default_style);</div><div class=\"line\">        mColor1 = typedArray.getColor(R.styleable.CircleView_circle_color1, Color.BLACK);</div><div class=\"line\">        mColor2 = typedArray.getColor(R.styleable.CircleView_circle_color2, Color.BLACK);</div><div class=\"line\">        mColor3 = typedArray.getColor(R.styleable.CircleView_circle_color3, Color.BLACK);</div><div class=\"line\">        mColor4 = typedArray.getColor(R.styleable.CircleView_circle_color4, Color.BLACK);</div><div class=\"line\">        mColor5 = typedArray.getColor(R.styleable.CircleView_circle_color5, Color.BLACK);</div><div class=\"line\">        typedArray.recycle();</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        mPaint.setColor(mColor1);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint);</div><div class=\"line\">        mPaint.setColor(mColor2);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">80</span>, mPaint);</div><div class=\"line\">        mPaint.setColor(mColor3);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, mPaint);</div><div class=\"line\">        mPaint.setColor(mColor4);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">40</span>, mPaint);</div><div class=\"line\">        mPaint.setColor(mColor5);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>, mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在<code>attrs.xml</code>中如下定义：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 对应五个同心圆的颜色 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color3\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color4\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color5\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 定义 theme 可配置 style --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_style\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后我们的<code>style.xml</code>中是这样的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 配置style --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_style\"</span>&gt;</span>@style/custom_theme<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 直接在主题中指定 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color3\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color4\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color5\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 主题中配置的style --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custom_theme\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span>&gt;</span>#ffff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span>&gt;</span>#ffff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color3\"</span>&gt;</span>#ffff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 直接在layout文件中引用的style，最后会被放到set中 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myStyle\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span>&gt;</span>#ff00ff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span>&gt;</span>#ff00ff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default_style\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span>&gt;</span>#ffffff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span>&gt;</span>#ffffff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color3\"</span>&gt;</span>#ffffff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color4\"</span>&gt;</span>#ffffff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在布局中我们是这样使用的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">io.github.loshine.customview.view.CircleView</span></span></div><div class=\"line\">    <span class=\"attr\">style</span>=<span class=\"string\">\"@style/myStyle\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:circle_color1</span>=<span class=\"string\">\"#ff00ffff\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>如上配置，我们效果如图所示：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/custom_attr.png\" alt=\"\"></p>\n<p>可以看出我们的 color4 没有起效果，这是因为使用了 defStyle，这个时候默认 Style 就不会起作用了。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"http://www.jianshu.com/p/61b79e7f88fc\" target=\"_blank\" rel=\"external\">深入理解Android 自定义attr Style styleable以及其应用</a></p>\n","excerpt":"","more":"<h1 id=\"定义一个控件\"><a href=\"#定义一个控件\" class=\"headerlink\" title=\"定义一个控件\"></a>定义一个控件</h1><p>我们先画一个简单的圆形 View，在<code>onDraw</code>中绘制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr, <span class=\"keyword\">int</span> defStyleRes)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在布局文件中使用：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">io.github.loshine.customview.view.CircleView</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>然后我们就可以在 preview 窗口中看到效果了</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/blog-attr-circle-1.png\" alt=\"\"></p>\n<p>一个很简单的黑色的圆形</p>\n<h1 id=\"定义需要的属性\"><a href=\"#定义需要的属性\" class=\"headerlink\" title=\"定义需要的属性\"></a>定义需要的属性</h1><p>现在我觉得黑色不好看了，我想给它换个颜色，那么一般来说可以用<code>Paint.setColor(int color)</code>来修改为其它的颜色。但这会让所有的 CircleView 都变成另一个颜色。</p>\n<p>但我可能希望在一个 Activity 里的 CircleView 是红色，但在另一个中的是蓝色。</p>\n<p>此时我们就需要给该 View 自定义属性了。</p>\n<p>自定义属性就类似 TextView 的<code>android:text=&quot;xxx&quot;</code>，ImageView 的<code>android:src=&quot;@drawable/xxx&quot;</code>，可以给相同类型的 View 设置不同的属性展示不同的效果。</p>\n<p>这里我们定义一个 color 属性。</p>\n<h2 id=\"声明属性名称\"><a href=\"#声明属性名称\" class=\"headerlink\" title=\"声明属性名称\"></a>声明属性名称</h2><p>在<code>res/values</code>文件夹下新建一个资源文件，叫 attrs.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这样就完成了属性名称的声明。</p>\n<p><code>declare-styleable</code>的 name 必须要对应 View 的类名，<code>attr</code>标签中定义的就是需要自定义的属性名称和类型。</p>\n<p>我们有这几种类型：</p>\n<ul>\n<li>boolean</li>\n<li>color</li>\n<li>dimension</li>\n<li>enum</li>\n<li>flag</li>\n<li>float</li>\n<li>fraction</li>\n<li>integer</li>\n<li>reference</li>\n<li>string</li>\n</ul>\n<p>声明完成之后就可以在代码中根据对应的方法获取布局中使用的自定义属性了。</p>\n<h1 id=\"获取属性\"><a href=\"#获取属性\" class=\"headerlink\" title=\"获取属性\"></a>获取属性</h1><h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><p>我们在自定义 View 的时候 IDE 通常会提醒我们需要拥有构造函数，然后我们使用其智能提醒会发现有四个构造函数供我们选择：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, AttributeSet attrs)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr, <span class=\"keyword\">int</span> defStyleRes)</span></span></div></pre></td></tr></table></figure>\n<p>查看源码注释，我们知道这四个方法分别对应不同方式创建 View：</p>\n<ul>\n<li><code>View(context)</code>：直接在代码中 new 出来</li>\n<li><code>View(context, attrs)</code>：当 View 是从布局文件 inflate 出来的时候会调用这个构造方法，使用默认的 style 和 theme。</li>\n<li><code>View(context, attrs, defStyleAttr)</code>：该方法不会被系统直接调用，我们需要手动调用。该方法相比第二个方法多了一个默认 style 的参数，它的作用就是为 View 提供一个基本的样式。</li>\n<li><code>View(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)</code>：将资源文件中定义的某个样式作为默认样式。</li>\n</ul>\n<p>我们在实现自定义 View 的时候，通常至少有两个构造方法（至于为什么我们后文再说），分别是<code>View(Context context)</code>以及<code>View(Context context, AttrbuteSet attires)</code>，这样我们才可以在 Java 代码中以及在布局文件中（或使用 Inflater）实例化它们。</p>\n<h2 id=\"obtainStyledAttributes\"><a href=\"#obtainStyledAttributes\" class=\"headerlink\" title=\"obtainStyledAttributes\"></a>obtainStyledAttributes</h2><p>看过了 View 的构造方法，我们现在就要在构造方法里获取 View 的参数了。<code>Context</code>这个类为我们提供了以下几个方法来获取属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">obtainAttributes(AttributeSet set, <span class=\"keyword\">int</span>[] attrs) <span class=\"comment\">// 从 layout 设置的属性集中获取 attrs 中的属性</span></div><div class=\"line\">obtainStyledAttributes(<span class=\"keyword\">int</span>[] attrs) <span class=\"comment\">// 从系统主题中获取 attrs 中的属性</span></div><div class=\"line\">obtainStyledAttributes(<span class=\"keyword\">int</span> resId, <span class=\"keyword\">int</span>[] attrs) <span class=\"comment\">// 从资源文件定义的 style 中读取属性</span></div><div class=\"line\">obtainStyledAttributes(AttributeSet set, <span class=\"keyword\">int</span>[] attrs, <span class=\"keyword\">int</span> defStyleAttr, <span class=\"keyword\">int</span> defStyleRes) <span class=\"comment\">// 后面详细说这个方法</span></div></pre></td></tr></table></figure>\n<p>我们了解一下这几个 API 的参数，然后就可以很方便的获取自定义属性了。</p>\n<h3 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h3><h4 id=\"attrs\"><a href=\"#attrs\" class=\"headerlink\" title=\"attrs\"></a>attrs</h4><p>就是我们需要获取属性集中的哪些属性，通常我们会定义一个<code>&lt;styleable&gt;</code>来管理所有的<code>&lt;attr&gt;</code>，然后我们就可以用<code>R.styleable.someAttrs</code>来使用这个参数了。</p>\n<h4 id=\"AttrbuteSet\"><a href=\"#AttrbuteSet\" class=\"headerlink\" title=\"AttrbuteSet\"></a>AttrbuteSet</h4><p>即我们在 xml 中定义的属性的集合，如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dial_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dial\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>这里我们的每一条属性都会放到 AttrbuteSet 中去，当然自定义属性也不例外。需要注意的是，<code>style=&quot;@style/somestyle&quot;</code>这样添加的属性也是会放进去的。</p>\n<blockquote>\n<p>这也是我们必须要实现<code>View(Context context, AttrbuteSet attr)</code>的原因，因为我们需要把布局文件中定义的参数传进来处理。</p>\n</blockquote>\n<h4 id=\"defStyleAttrs\"><a href=\"#defStyleAttrs\" class=\"headerlink\" title=\"defStyleAttrs\"></a>defStyleAttrs</h4><p>这是自定义属性中可以让其在 Theme 中配置的关键，使用它作为参数会从当前 Theme 中去获取参数。</p>\n<h4 id=\"resId-defStyleRes\"><a href=\"#resId-defStyleRes\" class=\"headerlink\" title=\"resId/defStyleRes\"></a>resId/defStyleRes</h4><p>直接从资源文件中定义的某个样式中读取。</p>\n<h4 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h4><p>注意到我们有一个方法只需要<code>attrs</code>作为参数，那它的属性从哪里来呢？其实是我们可以直接在 Theme 中指定属性并且用这个方法获取属性。</p>\n<h4 id=\"四个参数\"><a href=\"#四个参数\" class=\"headerlink\" title=\"四个参数\"></a>四个参数</h4><p><code>obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)</code>这个方法有四个参数，我们获取到的属性可能从四个地方来：布局文件(set), defStyleAttr(主题可配置样式), defStyleRes(默认样式), NULL(主题中直接获取)</p>\n<p>如果一个属性在多个地方都被定义了，那么它们的优先级如下：</p>\n<p><code>set</code>&gt;<code>defStyleAttr</code>&gt;<code>defStyleRes</code>&gt;<code>NULL</code></p>\n<h2 id=\"TypedArray\"><a href=\"#TypedArray\" class=\"headerlink\" title=\"TypedArray\"></a>TypedArray</h2><p>通过<code>obtainStyledAttributes()</code>我们就拿到了 TypedValue，我们需要的属性都存在里面。然后我们可以对应声明的时候的类型，使用对应的<code>getXXX()</code>方法来获取自定义属性，之后我们就可以使用自定义属性来绘图了。</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>我们将上述的圆形控件修改为五种不同颜色的同心圆，然后使用上面的不同定义属性的方式来定义一遍并且使用。</p>\n<p>首先我们的圆形 View 改成这样了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor1 = Color.BLACK;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor2 = Color.BLACK;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor3 = Color.BLACK;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor4 = Color.BLACK;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor5 = Color.BLACK;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleView,</div><div class=\"line\">                defStyleAttr, R.style.default_style);</div><div class=\"line\">        mColor1 = typedArray.getColor(R.styleable.CircleView_circle_color1, Color.BLACK);</div><div class=\"line\">        mColor2 = typedArray.getColor(R.styleable.CircleView_circle_color2, Color.BLACK);</div><div class=\"line\">        mColor3 = typedArray.getColor(R.styleable.CircleView_circle_color3, Color.BLACK);</div><div class=\"line\">        mColor4 = typedArray.getColor(R.styleable.CircleView_circle_color4, Color.BLACK);</div><div class=\"line\">        mColor5 = typedArray.getColor(R.styleable.CircleView_circle_color5, Color.BLACK);</div><div class=\"line\">        typedArray.recycle();</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        mPaint.setColor(mColor1);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, mPaint);</div><div class=\"line\">        mPaint.setColor(mColor2);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">80</span>, mPaint);</div><div class=\"line\">        mPaint.setColor(mColor3);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, mPaint);</div><div class=\"line\">        mPaint.setColor(mColor4);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">40</span>, mPaint);</div><div class=\"line\">        mPaint.setColor(mColor5);</div><div class=\"line\">        canvas.drawCircle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>, mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在<code>attrs.xml</code>中如下定义：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 对应五个同心圆的颜色 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color3\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color4\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color5\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 定义 theme 可配置 style --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_style\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后我们的<code>style.xml</code>中是这样的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 配置style --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_style\"</span>&gt;</span>@style/custom_theme<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 直接在主题中指定 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color3\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color4\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color5\"</span>&gt;</span>#ffff00ff<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 主题中配置的style --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custom_theme\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span>&gt;</span>#ffff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span>&gt;</span>#ffff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color3\"</span>&gt;</span>#ffff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 直接在layout文件中引用的style，最后会被放到set中 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myStyle\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span>&gt;</span>#ff00ff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span>&gt;</span>#ff00ff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default_style\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color1\"</span>&gt;</span>#ffffff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color2\"</span>&gt;</span>#ffffff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color3\"</span>&gt;</span>#ffffff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color4\"</span>&gt;</span>#ffffff00<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在布局中我们是这样使用的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">io.github.loshine.customview.view.CircleView</span></div><div class=\"line\">    <span class=\"attr\">style</span>=<span class=\"string\">\"@style/myStyle\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:circle_color1</span>=<span class=\"string\">\"#ff00ffff\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>如上配置，我们效果如图所示：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/custom_attr.png\" alt=\"\"></p>\n<p>可以看出我们的 color4 没有起效果，这是因为使用了 defStyle，这个时候默认 Style 就不会起作用了。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"http://www.jianshu.com/p/61b79e7f88fc\">深入理解Android 自定义attr Style styleable以及其应用</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cirtd8zv50006gy6epdpzh4sk","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvb000bgy6e016l85ex"},{"post_id":"cirtd8zup0000gy6e4x4fy1r2","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zve000fgy6eefr5bpvm"},{"post_id":"cirtd8zv80008gy6ec751qfxb","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvg000hgy6ely7axu06"},{"post_id":"cirtd8zva000agy6esqlwrx2a","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvj000kgy6e4j82xolm"},{"post_id":"cirtd8zuv0002gy6eiz7pu438","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvl000ngy6ewx67ec4i"},{"post_id":"cirtd8zvc000cgy6ecil4oidh","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvo000rgy6enqppz0g5"},{"post_id":"cirtd8zve000ggy6ewal53kbr","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvr000ugy6eroy33m4s"},{"post_id":"cirtd8zv10005gy6e1gdaxcno","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvs000wgy6ecec1ptf3"},{"post_id":"cirtd8zvg000igy6et88mrqrx","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvu0010gy6ede8jznn0"},{"post_id":"cirtd8zvj000lgy6evhwdyb04","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvv0013gy6eb5425yyq"},{"post_id":"cirtd8zvm000ogy6eqj01l2y3","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvx0016gy6e50qcfv3x"},{"post_id":"cirtd8zvp000sgy6ew4hn7k7x","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zvy0018gy6ecy4vd97n"},{"post_id":"cirtd8zvr000vgy6emrju6til","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zw0001bgy6eoo6yybu3"},{"post_id":"cirtd8zvt000ygy6ettdytpu9","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zw0001dgy6eq66mcpqm"},{"post_id":"cirtd8zvu0011gy6enj0url1c","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zw2001ggy6ehsgmc0y4"},{"post_id":"cirtd8zvv0014gy6en6rrrymg","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zw2001igy6en2clwih1"},{"post_id":"cirtd8zvx0017gy6ei5g5ykb9","category_id":"cirtd8zv00004gy6epke6yixc","_id":"cirtd8zw4001kgy6e0d86fzwh"}],"PostTag":[{"post_id":"cirtd8zup0000gy6e4x4fy1r2","tag_id":"cirtd8zuy0003gy6emasryuin","_id":"cirtd8zvk000mgy6etcu7y7hx"},{"post_id":"cirtd8zup0000gy6e4x4fy1r2","tag_id":"cirtd8zv70007gy6exhqli0ak","_id":"cirtd8zvm000pgy6eipo844mw"},{"post_id":"cirtd8zup0000gy6e4x4fy1r2","tag_id":"cirtd8zvd000egy6e3e5ubt6q","_id":"cirtd8zvq000tgy6e16tfdh4t"},{"post_id":"cirtd8zuv0002gy6eiz7pu438","tag_id":"cirtd8zvi000jgy6esd1wjvse","_id":"cirtd8zvu000zgy6ee9yw766w"},{"post_id":"cirtd8zuv0002gy6eiz7pu438","tag_id":"cirtd8zvo000qgy6evb98woob","_id":"cirtd8zvv0012gy6e4zqgy08j"},{"post_id":"cirtd8zvx0017gy6ei5g5ykb9","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zw0001agy6egndvl0t3"},{"post_id":"cirtd8zv10005gy6e1gdaxcno","tag_id":"cirtd8zvs000xgy6e4sxxvix0","_id":"cirtd8zw0001cgy6elp061xgt"},{"post_id":"cirtd8zv10005gy6e1gdaxcno","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zw1001fgy6ek6sq3uvu"},{"post_id":"cirtd8zv50006gy6epdpzh4sk","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zw2001hgy6ekqfeu29j"},{"post_id":"cirtd8zv80008gy6ec751qfxb","tag_id":"cirtd8zvo000qgy6evb98woob","_id":"cirtd8zw5001mgy6emqpzj1ju"},{"post_id":"cirtd8zv80008gy6ec751qfxb","tag_id":"cirtd8zvi000jgy6esd1wjvse","_id":"cirtd8zw6001ngy6es57b4e18"},{"post_id":"cirtd8zva000agy6esqlwrx2a","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zw9001qgy6ebvus6rtr"},{"post_id":"cirtd8zva000agy6esqlwrx2a","tag_id":"cirtd8zw6001ogy6ef3345vnq","_id":"cirtd8zw9001rgy6etfu2ueil"},{"post_id":"cirtd8zvc000cgy6ecil4oidh","tag_id":"cirtd8zw7001pgy6eu7ynwwvk","_id":"cirtd8zw9001tgy6ei34s665n"},{"post_id":"cirtd8zve000ggy6ewal53kbr","tag_id":"cirtd8zw9001sgy6emc7vltbk","_id":"cirtd8zwc001wgy6ea95uhf84"},{"post_id":"cirtd8zve000ggy6ewal53kbr","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zwc001xgy6eql6unyuy"},{"post_id":"cirtd8zvg000igy6et88mrqrx","tag_id":"cirtd8zw9001sgy6emc7vltbk","_id":"cirtd8zwe0020gy6el0ght071"},{"post_id":"cirtd8zvg000igy6et88mrqrx","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zwe0021gy6eti3foami"},{"post_id":"cirtd8zvj000lgy6evhwdyb04","tag_id":"cirtd8zw9001sgy6emc7vltbk","_id":"cirtd8zwe0024gy6er6rsg7b6"},{"post_id":"cirtd8zvj000lgy6evhwdyb04","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zwf0025gy6erpepoaps"},{"post_id":"cirtd8zvm000ogy6eqj01l2y3","tag_id":"cirtd8zwe0023gy6enw6bjydx","_id":"cirtd8zwf0027gy6esbvyrwyh"},{"post_id":"cirtd8zvm000ogy6eqj01l2y3","tag_id":"cirtd8zv70007gy6exhqli0ak","_id":"cirtd8zwf0028gy6eizai5zkt"},{"post_id":"cirtd8zvm000ogy6eqj01l2y3","tag_id":"cirtd8zvd000egy6e3e5ubt6q","_id":"cirtd8zwf002agy6ey4mnp8wk"},{"post_id":"cirtd8zvp000sgy6ew4hn7k7x","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zwf002bgy6esd28ikw2"},{"post_id":"cirtd8zvr000vgy6emrju6til","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zwg002dgy6esgb3oa2n"},{"post_id":"cirtd8zvr000vgy6emrju6til","tag_id":"cirtd8zvo000qgy6evb98woob","_id":"cirtd8zwg002egy6eb99jz956"},{"post_id":"cirtd8zvt000ygy6ettdytpu9","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zwg002ggy6ecnng88xq"},{"post_id":"cirtd8zvt000ygy6ettdytpu9","tag_id":"cirtd8zvo000qgy6evb98woob","_id":"cirtd8zwh002hgy6edoojmedb"},{"post_id":"cirtd8zvu0011gy6enj0url1c","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zwh002jgy6eaae0jc2v"},{"post_id":"cirtd8zvv0014gy6en6rrrymg","tag_id":"cirtd8zvw0015gy6eg3b48ri3","_id":"cirtd8zwh002kgy6evc09aewc"}],"Tag":[{"name":"jekyll","_id":"cirtd8zuy0003gy6emasryuin"},{"name":"github","_id":"cirtd8zv70007gy6exhqli0ak"},{"name":"github-pages","_id":"cirtd8zvd000egy6e3e5ubt6q"},{"name":"设计模式","_id":"cirtd8zvi000jgy6esd1wjvse"},{"name":"Java","_id":"cirtd8zvo000qgy6evb98woob"},{"name":"Android Studio","_id":"cirtd8zvs000xgy6e4sxxvix0"},{"name":"Android","_id":"cirtd8zvw0015gy6eg3b48ri3"},{"name":"Volley","_id":"cirtd8zw6001ogy6ef3345vnq"},{"name":"RIME","_id":"cirtd8zw7001pgy6eu7ynwwvk"},{"name":"Kotlin","_id":"cirtd8zw9001sgy6emc7vltbk"},{"name":"Hexo","_id":"cirtd8zwe0023gy6enw6bjydx"}]}}