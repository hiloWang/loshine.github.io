{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/grids-responsive-min.css","path":"css/grids-responsive-min.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/pure-min.css","path":"css/pure-min.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.pack.js","path":"js/fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/jquery.fancybox.js","path":"js/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/assets/video/鼠须管演示.mov","path":"assets/video/鼠须管演示.mov","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"ce4808ba274df5b0f0a8bdffbc2d2ca7b1658fd4","modified":1457024392000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1457016809000},{"_id":"themes/maupassant/_config.yml","hash":"e6a87501e912bbbc18034a90e051bb631f76ac85","modified":1457016809000},{"_id":"themes/maupassant/README.md","hash":"8426664cffd2e2186f4a6e6d734bdf036cbeafe6","modified":1457016809000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1457016809000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1457016809000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1457018752000},{"_id":"source/_posts/2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md","hash":"66f28a48adfb6731417fc39714889e28e9b8c979","modified":1457024392000},{"_id":"source/_posts/2015-08-18-Java中的单例设计模式.md","hash":"1294772e9e9156ed54187ed48e0245e795121b57","modified":1457024392000},{"_id":"source/_posts/2015-08-20-Android Studio常用快捷键.md","hash":"6f96a8d69e4c0c9127a4582b7864ab9ae86439a1","modified":1457024392000},{"_id":"source/_posts/2015-08-25-Java中的模板方法模式.md","hash":"17f039d3f00c944f57d742d29ab6d360afe6a495","modified":1457024392000},{"_id":"source/_posts/2015-08-22-Android Design Support Library.md","hash":"35fbcd447cce3edffd929a1206e197bff05a84c9","modified":1457024392000},{"_id":"source/_posts/2015-08-26-Android网络通信框架Volley.md","hash":"01886a513f3021f164ade8b09e4c0eb83a7641e7","modified":1457024392000},{"_id":"source/_posts/2015-09-12-打磨真正属于自己的输入法-RIME.md","hash":"c0e0c8bde4200b626309bfe492364713d0db3bdd","modified":1457024392000},{"_id":"source/_posts/2016-03-01-Kotlin中的委托属性.md","hash":"50648ee48e8972b153b52a12be1e9dc19d51bfdd","modified":1457024392000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1457016809000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1457016809000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1457016784000},{"_id":"themes/maupassant/.git/index","hash":"3e8f4bbfbe25e1e35546c7330a00d6fe9e0b3095","modified":1457016809000},{"_id":"themes/maupassant/.git/packed-refs","hash":"319b065ef59be147bde74b29b2888b78b14d2be8","modified":1457016809000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1457016809000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1457016809000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1457016809000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1457016809000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1457016809000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1457016809000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1457016809000},{"_id":"themes/maupassant/layout/base.jade","hash":"03834f6c0c2df16ead0d543d2c927a2c472097d5","modified":1457016809000},{"_id":"themes/maupassant/layout/index.jade","hash":"a83e09d1dc0a28784089ff279cb7372757b25c04","modified":1457016809000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1457016809000},{"_id":"themes/maupassant/layout/post.jade","hash":"6095c96ad52e2e601076ade9ca93ae671923e41a","modified":1457016809000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1457016784000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1457016784000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1457016784000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"1e73c8b3498e28eb9e683d8b26619b7ac84795b5","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"bf23a097203f019f0abf1d6f0042158f595f6b61","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"5786f5ddb4ef3cc9be482a03689ab7bf9cec7214","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"77d650bbe44ef079ab55bd32bad0e222a0fa5c81","modified":1457016809000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"b321ab21a788c3e14236d736448350d2642d63cd","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1457016809000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1457016809000},{"_id":"themes/maupassant/source/css/grids-responsive-min.css","hash":"703826508193cbe21f2745d3e837256e224eb512","modified":1457016809000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"3e5850dfd0ac87fe34a5c680d50f300536542bae","modified":1457016809000},{"_id":"themes/maupassant/source/css/normalize.css","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1457016809000},{"_id":"themes/maupassant/source/css/style.scss","hash":"ab0a62b9e17133185baa76dc2504bcf2b23f3a09","modified":1457016809000},{"_id":"themes/maupassant/source/css/pure-min.css","hash":"8cf7ea3e9e00e752de63fbc443e9300366327cd9","modified":1457016809000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1457016809000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1457016809000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1457016809000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"520f8ee477fabdb450f51f764f10944b54d785ac","modified":1457016809000},{"_id":"themes/maupassant/source/js/fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1457016809000},{"_id":"themes/maupassant/source/js/jquery.fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1457016809000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1457016809000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1457016809000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1457016809000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1457016809000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1457016809000},{"_id":"themes/maupassant/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1457016809000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"d9119a36111c9bfb720bc912e1f07f418b7a738b","modified":1457016809000},{"_id":"themes/maupassant/.git/objects/pack/pack-daf53be855388277875a7b18cb989a4aac68e96e.idx","hash":"b1ca3b96c3b160f8804cab48d75efa9c73843329","modified":1457016809000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1457016809000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"1e73c8b3498e28eb9e683d8b26619b7ac84795b5","modified":1457016809000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"1e73c8b3498e28eb9e683d8b26619b7ac84795b5","modified":1457016809000},{"_id":"themes/maupassant/.git/objects/pack/pack-daf53be855388277875a7b18cb989a4aac68e96e.pack","hash":"c7bd5ca55da5d2e24281a3894c6bce283e8e99c4","modified":1457016809000},{"_id":"public/2015/08/20/Android Studio常用快捷键/index.html","hash":"043cee21d93932588d90509321b5a0580f842065","modified":1457026299832},{"_id":"public/2015/08/18/Java中的单例设计模式/index.html","hash":"93ecacb8736dff8493b3a19dcdf7ec4c212a3e10","modified":1457026299832},{"_id":"public/archives/index.html","hash":"654f4e5ba507f18b43b490f796bd382343deae7e","modified":1457026299832},{"_id":"public/archives/2015/index.html","hash":"ef1315a606e6fd706f477bd3f09f13f57823ceb3","modified":1457026299833},{"_id":"public/archives/2015/08/index.html","hash":"bc1cb90b64e4e217caf620d6fe993fcfc7b89f6e","modified":1457026299833},{"_id":"public/archives/2015/09/index.html","hash":"b7efe77b9d6293f6812b5a8e59ce126a7142133a","modified":1457026299833},{"_id":"public/archives/2016/index.html","hash":"bd6e9a5df14497c917069d2410129ddcebf13f51","modified":1457026299833},{"_id":"public/archives/2016/03/index.html","hash":"bd6e9a5df14497c917069d2410129ddcebf13f51","modified":1457026299833},{"_id":"public/index.html","hash":"69a11459124bd8e6e07088da33cdeac97c2dad31","modified":1457026299833},{"_id":"public/tags/jekyll-github-github-page/index.html","hash":"8732f203005b34d388003d9601521450aa71f725","modified":1457026299833},{"_id":"public/tags/设计模式/index.html","hash":"1386df671373992adfae5d4f1d7fb28776295bcc","modified":1457026299834},{"_id":"public/tags/Java/index.html","hash":"046652a8edfd2172c5acfe1b9f7e5b7b23df8856","modified":1457026299834},{"_id":"public/tags/Android-Studio/index.html","hash":"b15c287f5023839eef98635f35f46444702770fa","modified":1457026299834},{"_id":"public/tags/Android/index.html","hash":"a370abb55abd99211e3480f6da075d4de2859768","modified":1457026299834},{"_id":"public/tags/Volley/index.html","hash":"6efd3c6e7a48a83c824467ac19527df1e6093953","modified":1457026299835},{"_id":"public/tags/RIME/index.html","hash":"15361d2611563721abcd02cedbbd5a45cd20966c","modified":1457026299835},{"_id":"public/tags/Kotlin/index.html","hash":"51a9da6d07285f21c08f98d2bb1e37b18b811112","modified":1457026299835},{"_id":"public/2016/03/01/Kotlin中的委托属性/index.html","hash":"853d00099401fbe1588a2a7f0719d653795f981a","modified":1457026299835},{"_id":"public/2015/08/27/Android网络通信框架Volley/index.html","hash":"ebedad43ccdf5104fed687ea335ec5a719effaf4","modified":1457026299835},{"_id":"public/2015/09/12/打磨真正属于自己的输入法-RIME/index.html","hash":"f2ade387da51ec7d331aa81c586b364b75b75387","modified":1457026299835},{"_id":"public/2015/08/25/Java中的模板方法模式/index.html","hash":"97f6376ad423b222875d6f7fe20b42d5e879366b","modified":1457026299835},{"_id":"public/2015/08/22/Android Design Support Library/index.html","hash":"1276c5efe1e6d3568baaa936e22ff9f83df75bdb","modified":1457026299835},{"_id":"public/2015/08/17/使用Jekyll在Github-Pages上搭建个人博客/index.html","hash":"01d6cdaad005c12b9998b6ac2951dea194509861","modified":1457026299835},{"_id":"public/CNAME","hash":"ce4808ba274df5b0f0a8bdffbc2d2ca7b1658fd4","modified":1457026299841},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1457026299841},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1457026299841},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1457026299841},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1457026299841},{"_id":"public/css/grids-responsive-min.css","hash":"703826508193cbe21f2745d3e837256e224eb512","modified":1457026299874},{"_id":"public/css/jquery.fancybox.css","hash":"3e5850dfd0ac87fe34a5c680d50f300536542bae","modified":1457026299875},{"_id":"public/css/normalize.css","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1457026299875},{"_id":"public/js/codeblock-resizer.js","hash":"520f8ee477fabdb450f51f764f10944b54d785ac","modified":1457026299875},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1457026299875},{"_id":"public/js/jquery.fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1457026299875},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1457026299875},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1457026299875},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1457026299875},{"_id":"public/css/style.css","hash":"f07ed88f6e22f7db0349dc05827013dedf7f7917","modified":1457026299875},{"_id":"public/css/pure-min.css","hash":"8cf7ea3e9e00e752de63fbc443e9300366327cd9","modified":1457026299875},{"_id":"public/js/fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1457026299875},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1457026299875},{"_id":"source/.DS_Store","hash":"037b5088af990098788efe475ed7daa212303e45","modified":1457026139000},{"_id":"source/assets/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1457026126000},{"_id":"source/assets/video/鼠须管演示.mov","hash":"c707c45409dbfed477c5feee85fadc94bc305203","modified":1457026107000},{"_id":"public/assets/video/鼠须管演示.mov","hash":"c707c45409dbfed477c5feee85fadc94bc305203","modified":1457026299911}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"使用Jekyll在Github-Pages上搭建个人博客","date":"2015-08-16T16:00:00.000Z","_content":"> 我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了[《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]、[《Using Jekyll with Pages》][site2]。鄙人于此也作一下**使用Jekyll在Github-Pages上搭建个人博客**的总结，也可以给其他后来者做一些参考。\n\n> * 本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考[《版本控制入门 – 搬进 Github》][site3]。\n* 在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看[这里][site4]\n\n\n[site1]: http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\n[site2]: https://help.github.com/articles/using-jekyll-with-pages/\n[site3]: http://www.imooc.com/learn/390\n[site4]: http://saito.im/slide/ruby-new.html\n\n<br>\n\n# 目录\n\n* [开始](#begin)\n\t* [新建一个仓库](#new respontory)\n\t* [clone到本地](#clone)\n\t* [上传页面](#update index)\n* [建造](#build)\n\t* [搭建本地环境](#build environment)\n\t* [Jekyll的使用](#use jekyll)\n\t* [Jekyll目录解析](#jekyll dictionary)\n* [写博客](#write blog)\n* [装修](#decoration)\n\t* [使用模板](#use template)\n\t* [自定义样式](#stylish)\n* [定制](#customize)\n\t* [使用独立域名](#cname)\n\t* [添加评论功能](#add comment)\n\t\t* [多说](#ds)\n\t    * [Disqus](#disqus)\n* [参考](#reference)\n\n<br>\n\n<h2 id=\"begin\">开始</h2>\n\n<h3 id=\"new respontory\">新建一个仓库</h3>\n\n* 如果没有Github帐号，首先[注册一个][register]。\n* 接下来新建一个仓库\n\n**注：**Repository name(仓库名)必须是 `yourusername.github.io`\n\n比如我的用户名是loshine，那么我的这个仓库名就是`loshine.github.io`\n\n[register]: https://github.com/\n\n\n<h3 id=\"clone\">clone到本地</h3>\n\n使用Github客户端或者Git命令行工具将这个项目clone到本地。\n\n\n<h3 id=\"update index\">上传页面</h3>\n\n之后，新建一个`index.html`文件，push到对应的**master**分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问`yourusername.github.io`，就能看见完整的网页了。\n\n<br>\n\n<h2 id=\"build\">建造</h2>\n\n<h3 id=\"build environment\">搭建本地环境</h3>\n\n由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。\n\n1. **Ruby** - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请[安装Ruby环境][ruby]。\n2. **Bundler** - 打开终端输入`gem install bundler`以安装。\n3. **github-pages** - 打开终端输入`gem install github-pages`以安装。\n3. **Jekyll** - 打开终端输入`gem install jekyll`以安装。\n\n**注**: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为[淘宝镜像源][taobaoGem]解决。\n\n[ruby]: https://www.ruby-lang.org/en/downloads/\n[taobaoGem]: http://ruby.taobao.org/\n\n<h3 id=\"use jekyll\">Jekyll的使用</h3>\n\n1. 在我们之前创建的仓库下新建一个文件，命名为**Gemfile**，并写入`gem 'github-pages'`。\n2. 在仓库目录下打开命令行工具，输入`bundle install`。\n3. 在命令行工具中输入`bundle exec jekyll serve`，按提示打开地址，就可以在本地进行查看和调试网站了。\n\n<h3 id=\"jekyll dictionary\">Jekyll目录解析</h3>\n\n```\n|—— _config.yml\n|—— _includes\n    |—— footer.html\n    |—— header.html\n|—— _layouts\n    |—— default.html\n    |—— post.html\n|—— _posts\n    |—— 2015-04-09-welcome-to-jekyll.md\n    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md\n|—— _site\n|—— css\n    |—— *.css\n|—— script\n    |—— *.js\n|—— Gemfile\n|—— Gemfile.lock\n|—— index.html\n```\n\n接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。\n\n* `_config.yml` 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件\n* `_includes` 文章各个部分的html文件，可以在布局中包含这些文件\n* `_layouts` 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。\n* `_posts` 存放博客文章\n* `CNAME` 域名地址\n* `css` 存放博客所用css\n* `script` 存放博客所用JavaScript\n* `index.html` 博客主页\n\n<br>\n\n<h2 id=\"write blog\">写博客</h2>\n\n博客文章都是用[markdown格式][markdown]书写，命名格式为*时间加标题*，形如：`2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md`\n\n文章需要在开头位置加入一段特殊的文字，其中定义了使用到的**样式**、**文章标题**、**时间**、**分类**。\n\n```\n---\nlayout: post\ntitle: \"Welcome to Jekyll!\"\ndate: 2014-01-27 21:57:11\ncategories: Blog\n---\n```\n\n完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入`_post`文件夹中，并同步到Github上哦。\n\n[markdown]: http://wowubuntu.com/markdown/\n\n<br>\n\n<h2 id=\"decoration\">装修</h2>\n\n<h3 id=\"use template\">使用模板</h3>\n\n之前在[Jekyll目录解析](#jekyll dictionary)中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在[Jekyll 主题][theme]中选择自己喜欢的主题并放入到自己的项目中去。\n\n以我的博客为例，我选择了[Pithy][theme-pithy]主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入`bundle exec jekyll serve`运行jekyll服务器，打开`http://localhost:4000`就可以查看到效果了。\n\n[theme]: http://jekyllthemes.org/\n[theme-pithy]: http://jekyllthemes.org/themes/pithy/\n\n<h3 id=\"stylish\">自定义样式</h3>\n\n如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您[Run Noob][run noob]、[w3cschool][w3cschool]这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。\n\n[run noob]: http://www.runoob.com/\n[w3cschool]: http://www.w3school.com.cn/\n\n<br>\n\n<h2 id=\"customize\">定制</h2>\n\n<h3 id=\"cname\">使用独立域名</h3>\n\n* 新建一个文件，命名为**CNAME**，然后在里面写入你需要绑定的独立域名就可以了。\n* 在你的域名服务商处添加解析地址。\n\n完成以上步骤你就可以使用自己的独立域名了。\n\n<h3 id=\"add comment\">添加评论功能</h3>\n\n<h4 id=\"ds\">多说</h4>\n\n多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。\n\n* 登录[多说][ds]，创建一个项目，拷贝你的**通用代码**。\n* 在`_include`文件夹里新建一个`comment.html`文件，将通用代码粘贴进去。\n* 修改**通用代码**中需要配置的地方\n\n```markup\n<div class=\"ds-thread\" data-thread-key=\"请将此处替换成文章在你的站点中的ID\"\n    data-title=\"请替换成文章的标题\" data-url=\"请替换成文章的网址\"></div>\n```\n\n修改为\n\n```markup\n<div class=\"ds-thread\" data-thread-key=\"【 page.id 】\"\n    data-title=\"【 page.title 】\" data-url=\"your web site【 page.url 】\"></div>\n```\n\n注意`【】`需要替换为**两个大括号**，`your web site`需替换为**您的域名地址**。\n\n* 在`_layout`中的`post.html`中的底部加入`【% include comment.html %】`（【】须替换为{}）\n* 在**多说**的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等\n\n[ds]: http://duoshuo.com/\n\n<h4 id=\"disqus\">Disqus</h4>\n\nDisqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。\n\n* [注册Disqus][disqus]\n* 右上角设置项中选择`Add Disqus To Site`，按步骤走，最后复制生成的**Universal Code**\n* 其它部分类似如上的集成多说操作，*但不需要自己修改代码了*\n* Disqus也有控制台可以对评论进行操作\n\n**注意**：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。\n\n[disqus]: https://disqus.com/\n\n<br>\n\n<h2 id=\"reference\">参考</h2>\n\n* [《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]\n* [官方文档][official documents]\n\n[official documents]: https://help.github.com/categories/github-pages-basics/\n","source":"_posts/2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md","raw":"---\ntitle: 使用Jekyll在Github-Pages上搭建个人博客\ndate: 2015-08-17\ntags: jekyll, github, github-page\n---\n> 我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了[《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]、[《Using Jekyll with Pages》][site2]。鄙人于此也作一下**使用Jekyll在Github-Pages上搭建个人博客**的总结，也可以给其他后来者做一些参考。\n\n> * 本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考[《版本控制入门 – 搬进 Github》][site3]。\n* 在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看[这里][site4]\n\n\n[site1]: http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\n[site2]: https://help.github.com/articles/using-jekyll-with-pages/\n[site3]: http://www.imooc.com/learn/390\n[site4]: http://saito.im/slide/ruby-new.html\n\n<br>\n\n# 目录\n\n* [开始](#begin)\n\t* [新建一个仓库](#new respontory)\n\t* [clone到本地](#clone)\n\t* [上传页面](#update index)\n* [建造](#build)\n\t* [搭建本地环境](#build environment)\n\t* [Jekyll的使用](#use jekyll)\n\t* [Jekyll目录解析](#jekyll dictionary)\n* [写博客](#write blog)\n* [装修](#decoration)\n\t* [使用模板](#use template)\n\t* [自定义样式](#stylish)\n* [定制](#customize)\n\t* [使用独立域名](#cname)\n\t* [添加评论功能](#add comment)\n\t\t* [多说](#ds)\n\t    * [Disqus](#disqus)\n* [参考](#reference)\n\n<br>\n\n<h2 id=\"begin\">开始</h2>\n\n<h3 id=\"new respontory\">新建一个仓库</h3>\n\n* 如果没有Github帐号，首先[注册一个][register]。\n* 接下来新建一个仓库\n\n**注：**Repository name(仓库名)必须是 `yourusername.github.io`\n\n比如我的用户名是loshine，那么我的这个仓库名就是`loshine.github.io`\n\n[register]: https://github.com/\n\n\n<h3 id=\"clone\">clone到本地</h3>\n\n使用Github客户端或者Git命令行工具将这个项目clone到本地。\n\n\n<h3 id=\"update index\">上传页面</h3>\n\n之后，新建一个`index.html`文件，push到对应的**master**分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问`yourusername.github.io`，就能看见完整的网页了。\n\n<br>\n\n<h2 id=\"build\">建造</h2>\n\n<h3 id=\"build environment\">搭建本地环境</h3>\n\n由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。\n\n1. **Ruby** - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请[安装Ruby环境][ruby]。\n2. **Bundler** - 打开终端输入`gem install bundler`以安装。\n3. **github-pages** - 打开终端输入`gem install github-pages`以安装。\n3. **Jekyll** - 打开终端输入`gem install jekyll`以安装。\n\n**注**: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为[淘宝镜像源][taobaoGem]解决。\n\n[ruby]: https://www.ruby-lang.org/en/downloads/\n[taobaoGem]: http://ruby.taobao.org/\n\n<h3 id=\"use jekyll\">Jekyll的使用</h3>\n\n1. 在我们之前创建的仓库下新建一个文件，命名为**Gemfile**，并写入`gem 'github-pages'`。\n2. 在仓库目录下打开命令行工具，输入`bundle install`。\n3. 在命令行工具中输入`bundle exec jekyll serve`，按提示打开地址，就可以在本地进行查看和调试网站了。\n\n<h3 id=\"jekyll dictionary\">Jekyll目录解析</h3>\n\n```\n|—— _config.yml\n|—— _includes\n    |—— footer.html\n    |—— header.html\n|—— _layouts\n    |—— default.html\n    |—— post.html\n|—— _posts\n    |—— 2015-04-09-welcome-to-jekyll.md\n    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md\n|—— _site\n|—— css\n    |—— *.css\n|—— script\n    |—— *.js\n|—— Gemfile\n|—— Gemfile.lock\n|—— index.html\n```\n\n接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。\n\n* `_config.yml` 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件\n* `_includes` 文章各个部分的html文件，可以在布局中包含这些文件\n* `_layouts` 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。\n* `_posts` 存放博客文章\n* `CNAME` 域名地址\n* `css` 存放博客所用css\n* `script` 存放博客所用JavaScript\n* `index.html` 博客主页\n\n<br>\n\n<h2 id=\"write blog\">写博客</h2>\n\n博客文章都是用[markdown格式][markdown]书写，命名格式为*时间加标题*，形如：`2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md`\n\n文章需要在开头位置加入一段特殊的文字，其中定义了使用到的**样式**、**文章标题**、**时间**、**分类**。\n\n```\n---\nlayout: post\ntitle: \"Welcome to Jekyll!\"\ndate: 2014-01-27 21:57:11\ncategories: Blog\n---\n```\n\n完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入`_post`文件夹中，并同步到Github上哦。\n\n[markdown]: http://wowubuntu.com/markdown/\n\n<br>\n\n<h2 id=\"decoration\">装修</h2>\n\n<h3 id=\"use template\">使用模板</h3>\n\n之前在[Jekyll目录解析](#jekyll dictionary)中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在[Jekyll 主题][theme]中选择自己喜欢的主题并放入到自己的项目中去。\n\n以我的博客为例，我选择了[Pithy][theme-pithy]主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入`bundle exec jekyll serve`运行jekyll服务器，打开`http://localhost:4000`就可以查看到效果了。\n\n[theme]: http://jekyllthemes.org/\n[theme-pithy]: http://jekyllthemes.org/themes/pithy/\n\n<h3 id=\"stylish\">自定义样式</h3>\n\n如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您[Run Noob][run noob]、[w3cschool][w3cschool]这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。\n\n[run noob]: http://www.runoob.com/\n[w3cschool]: http://www.w3school.com.cn/\n\n<br>\n\n<h2 id=\"customize\">定制</h2>\n\n<h3 id=\"cname\">使用独立域名</h3>\n\n* 新建一个文件，命名为**CNAME**，然后在里面写入你需要绑定的独立域名就可以了。\n* 在你的域名服务商处添加解析地址。\n\n完成以上步骤你就可以使用自己的独立域名了。\n\n<h3 id=\"add comment\">添加评论功能</h3>\n\n<h4 id=\"ds\">多说</h4>\n\n多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。\n\n* 登录[多说][ds]，创建一个项目，拷贝你的**通用代码**。\n* 在`_include`文件夹里新建一个`comment.html`文件，将通用代码粘贴进去。\n* 修改**通用代码**中需要配置的地方\n\n```markup\n<div class=\"ds-thread\" data-thread-key=\"请将此处替换成文章在你的站点中的ID\"\n    data-title=\"请替换成文章的标题\" data-url=\"请替换成文章的网址\"></div>\n```\n\n修改为\n\n```markup\n<div class=\"ds-thread\" data-thread-key=\"【 page.id 】\"\n    data-title=\"【 page.title 】\" data-url=\"your web site【 page.url 】\"></div>\n```\n\n注意`【】`需要替换为**两个大括号**，`your web site`需替换为**您的域名地址**。\n\n* 在`_layout`中的`post.html`中的底部加入`【% include comment.html %】`（【】须替换为{}）\n* 在**多说**的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等\n\n[ds]: http://duoshuo.com/\n\n<h4 id=\"disqus\">Disqus</h4>\n\nDisqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。\n\n* [注册Disqus][disqus]\n* 右上角设置项中选择`Add Disqus To Site`，按步骤走，最后复制生成的**Universal Code**\n* 其它部分类似如上的集成多说操作，*但不需要自己修改代码了*\n* Disqus也有控制台可以对评论进行操作\n\n**注意**：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。\n\n[disqus]: https://disqus.com/\n\n<br>\n\n<h2 id=\"reference\">参考</h2>\n\n* [《“授人以渔”的教你搭建个人独立博客》——Azure Yu][site1]\n* [官方文档][official documents]\n\n[official documents]: https://help.github.com/categories/github-pages-basics/\n","slug":"使用Jekyll在Github-Pages上搭建个人博客","published":1,"updated":"2016-03-03T16:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcj3xm30000phe9ecmsmozq","content":"<blockquote>\n<p>我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了<a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\" target=\"_blank\" rel=\"external\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a>、<a href=\"https://help.github.com/articles/using-jekyll-with-pages/\" target=\"_blank\" rel=\"external\">《Using Jekyll with Pages》</a>。鄙人于此也作一下<strong>使用Jekyll在Github-Pages上搭建个人博客</strong>的总结，也可以给其他后来者做一些参考。</p>\n<ul>\n<li>本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考<a href=\"http://www.imooc.com/learn/390\" target=\"_blank\" rel=\"external\">《版本控制入门 – 搬进 Github》</a>。</li>\n<li>在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看<a href=\"http://saito.im/slide/ruby-new.html\" target=\"_blank\" rel=\"external\">这里</a></li>\n</ul>\n</blockquote>\n<p><br></p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#begin\">开始</a><ul>\n<li><a href=\"#new respontory\">新建一个仓库</a></li>\n<li><a href=\"#clone\">clone到本地</a></li>\n<li><a href=\"#update index\">上传页面</a></li>\n</ul>\n</li>\n<li><a href=\"#build\">建造</a><ul>\n<li><a href=\"#build environment\">搭建本地环境</a></li>\n<li><a href=\"#use jekyll\">Jekyll的使用</a></li>\n<li><a href=\"#jekyll dictionary\">Jekyll目录解析</a></li>\n</ul>\n</li>\n<li><a href=\"#write blog\">写博客</a></li>\n<li><a href=\"#decoration\">装修</a><ul>\n<li><a href=\"#use template\">使用模板</a></li>\n<li><a href=\"#stylish\">自定义样式</a></li>\n</ul>\n</li>\n<li><a href=\"#customize\">定制</a><ul>\n<li><a href=\"#cname\">使用独立域名</a></li>\n<li><a href=\"#add comment\">添加评论功能</a><ul>\n<li><a href=\"#ds\">多说</a></li>\n<li><a href=\"#disqus\">Disqus</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#reference\">参考</a></li>\n</ul>\n<p><br></p>\n<h2 id=\"begin\">开始</h2>\n\n<h3 id=\"new respontory\">新建一个仓库</h3>\n\n<ul>\n<li>如果没有Github帐号，首先<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">注册一个</a>。</li>\n<li>接下来新建一个仓库</li>\n</ul>\n<p><strong>注：</strong>Repository name(仓库名)必须是 <code>yourusername.github.io</code></p>\n<p>比如我的用户名是loshine，那么我的这个仓库名就是<code>loshine.github.io</code></p>\n<h3 id=\"clone\">clone到本地</h3>\n\n<p>使用Github客户端或者Git命令行工具将这个项目clone到本地。</p>\n<h3 id=\"update index\">上传页面</h3>\n\n<p>之后，新建一个<code>index.html</code>文件，push到对应的<strong>master</strong>分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问<code>yourusername.github.io</code>，就能看见完整的网页了。</p>\n<p><br></p>\n<h2 id=\"build\">建造</h2>\n\n<h3 id=\"build environment\">搭建本地环境</h3>\n\n<p>由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。</p>\n<ol>\n<li><strong>Ruby</strong> - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请<a href=\"https://www.ruby-lang.org/en/downloads/\" target=\"_blank\" rel=\"external\">安装Ruby环境</a>。</li>\n<li><strong>Bundler</strong> - 打开终端输入<code>gem install bundler</code>以安装。</li>\n<li><strong>github-pages</strong> - 打开终端输入<code>gem install github-pages</code>以安装。</li>\n<li><strong>Jekyll</strong> - 打开终端输入<code>gem install jekyll</code>以安装。</li>\n</ol>\n<p><strong>注</strong>: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为<a href=\"http://ruby.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝镜像源</a>解决。</p>\n<h3 id=\"use jekyll\">Jekyll的使用</h3>\n\n<ol>\n<li>在我们之前创建的仓库下新建一个文件，命名为<strong>Gemfile</strong>，并写入<code>gem &#39;github-pages&#39;</code>。</li>\n<li>在仓库目录下打开命令行工具，输入<code>bundle install</code>。</li>\n<li>在命令行工具中输入<code>bundle exec jekyll serve</code>，按提示打开地址，就可以在本地进行查看和调试网站了。</li>\n</ol>\n<h3 id=\"jekyll dictionary\">Jekyll目录解析</h3>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|—— _config.yml</span><br><span class=\"line\">|—— _includes</span><br><span class=\"line\">    |—— footer.html</span><br><span class=\"line\">    |—— header.html</span><br><span class=\"line\">|—— _layouts</span><br><span class=\"line\">    |—— default.html</span><br><span class=\"line\">    |—— post.html</span><br><span class=\"line\">|—— _posts</span><br><span class=\"line\">    |—— 2015-04-09-welcome-to-jekyll.md</span><br><span class=\"line\">    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</span><br><span class=\"line\">|—— _site</span><br><span class=\"line\">|—— css</span><br><span class=\"line\">    |—— *.css</span><br><span class=\"line\">|—— script</span><br><span class=\"line\">    |—— *.js</span><br><span class=\"line\">|—— Gemfile</span><br><span class=\"line\">|—— Gemfile.lock</span><br><span class=\"line\">|—— index.html</span><br></pre></td></tr></table></figure>\n<p>接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。</p>\n<ul>\n<li><code>_config.yml</code> 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件</li>\n<li><code>_includes</code> 文章各个部分的html文件，可以在布局中包含这些文件</li>\n<li><code>_layouts</code> 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。</li>\n<li><code>_posts</code> 存放博客文章</li>\n<li><code>CNAME</code> 域名地址</li>\n<li><code>css</code> 存放博客所用css</li>\n<li><code>script</code> 存放博客所用JavaScript</li>\n<li><code>index.html</code> 博客主页</li>\n</ul>\n<p><br></p>\n<h2 id=\"write blog\">写博客</h2>\n\n<p>博客文章都是用<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">markdown格式</a>书写，命名格式为<em>时间加标题</em>，形如：<code>2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</code></p>\n<p>文章需要在开头位置加入一段特殊的文字，其中定义了使用到的<strong>样式</strong>、<strong>文章标题</strong>、<strong>时间</strong>、<strong>分类</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;Welcome to Jekyll!&quot;</span><br><span class=\"line\">date: 2014-01-27 21:57:11</span><br><span class=\"line\">categories: Blog</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入<code>_post</code>文件夹中，并同步到Github上哦。</p>\n<p><br></p>\n<h2 id=\"decoration\">装修</h2>\n\n<h3 id=\"use template\">使用模板</h3>\n\n<p>之前在<a href=\"#jekyll dictionary\">Jekyll目录解析</a>中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"external\">Jekyll 主题</a>中选择自己喜欢的主题并放入到自己的项目中去。</p>\n<p>以我的博客为例，我选择了<a href=\"http://jekyllthemes.org/themes/pithy/\" target=\"_blank\" rel=\"external\">Pithy</a>主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入<code>bundle exec jekyll serve</code>运行jekyll服务器，打开<code>http://localhost:4000</code>就可以查看到效果了。</p>\n<h3 id=\"stylish\">自定义样式</h3>\n\n<p>如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您<a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"external\">Run Noob</a>、<a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"external\">w3cschool</a>这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。</p>\n<p><br></p>\n<h2 id=\"customize\">定制</h2>\n\n<h3 id=\"cname\">使用独立域名</h3>\n\n<ul>\n<li>新建一个文件，命名为<strong>CNAME</strong>，然后在里面写入你需要绑定的独立域名就可以了。</li>\n<li>在你的域名服务商处添加解析地址。</li>\n</ul>\n<p>完成以上步骤你就可以使用自己的独立域名了。</p>\n<h3 id=\"add comment\">添加评论功能</h3>\n\n<h4 id=\"ds\">多说</h4>\n\n<p>多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。</p>\n<ul>\n<li>登录<a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a>，创建一个项目，拷贝你的<strong>通用代码</strong>。</li>\n<li>在<code>_include</code>文件夹里新建一个<code>comment.html</code>文件，将通用代码粘贴进去。</li>\n<li>修改<strong>通用代码</strong>中需要配置的地方</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;请将此处替换成文章在你的站点中的ID&quot;</span><br><span class=\"line\">    data-title=&quot;请替换成文章的标题&quot; data-url=&quot;请替换成文章的网址&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;【 page.id 】&quot;</span><br><span class=\"line\">    data-title=&quot;【 page.title 】&quot; data-url=&quot;your web site【 page.url 】&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>注意<code>【】</code>需要替换为<strong>两个大括号</strong>，<code>your web site</code>需替换为<strong>您的域名地址</strong>。</p>\n<ul>\n<li>在<code>_layout</code>中的<code>post.html</code>中的底部加入<code>【% include comment.html %】</code>（【】须替换为{}）</li>\n<li>在<strong>多说</strong>的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等</li>\n</ul>\n<h4 id=\"disqus\">Disqus</h4>\n\n<p>Disqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。</p>\n<ul>\n<li><a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">注册Disqus</a></li>\n<li>右上角设置项中选择<code>Add Disqus To Site</code>，按步骤走，最后复制生成的<strong>Universal Code</strong></li>\n<li>其它部分类似如上的集成多说操作，<em>但不需要自己修改代码了</em></li>\n<li>Disqus也有控制台可以对评论进行操作</li>\n</ul>\n<p><strong>注意</strong>：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。</p>\n<p><br></p>\n<h2 id=\"reference\">参考</h2>\n\n<ul>\n<li><a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\" target=\"_blank\" rel=\"external\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a></li>\n<li><a href=\"https://help.github.com/categories/github-pages-basics/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>我的个人博客也在Github-Pages上搭建起来了，其中各个步骤参照了<a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a>、<a href=\"https://help.github.com/articles/using-jekyll-with-pages/\">《Using Jekyll with Pages》</a>。鄙人于此也作一下<strong>使用Jekyll在Github-Pages上搭建个人博客</strong>的总结，也可以给其他后来者做一些参考。</p>\n<ul>\n<li>本文默认读者已经拥有了Github的帐号，并且对Git的使用较为熟练。如果对Git以及Github不是很了解，可以参考<a href=\"http://www.imooc.com/learn/390\">《版本控制入门 – 搬进 Github》</a>。</li>\n<li>在这个过程中可能需要使用到少许的Ruby知识，如果您需要学习，可以看<a href=\"http://saito.im/slide/ruby-new.html\">这里</a></li>\n</ul>\n</blockquote>\n<p><br></p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#begin\">开始</a><ul>\n<li><a href=\"#new respontory\">新建一个仓库</a></li>\n<li><a href=\"#clone\">clone到本地</a></li>\n<li><a href=\"#update index\">上传页面</a></li>\n</ul>\n</li>\n<li><a href=\"#build\">建造</a><ul>\n<li><a href=\"#build environment\">搭建本地环境</a></li>\n<li><a href=\"#use jekyll\">Jekyll的使用</a></li>\n<li><a href=\"#jekyll dictionary\">Jekyll目录解析</a></li>\n</ul>\n</li>\n<li><a href=\"#write blog\">写博客</a></li>\n<li><a href=\"#decoration\">装修</a><ul>\n<li><a href=\"#use template\">使用模板</a></li>\n<li><a href=\"#stylish\">自定义样式</a></li>\n</ul>\n</li>\n<li><a href=\"#customize\">定制</a><ul>\n<li><a href=\"#cname\">使用独立域名</a></li>\n<li><a href=\"#add comment\">添加评论功能</a><ul>\n<li><a href=\"#ds\">多说</a></li>\n<li><a href=\"#disqus\">Disqus</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#reference\">参考</a></li>\n</ul>\n<p><br></p>\n<h2 id=\"begin\">开始</h2>\n\n<h3 id=\"new respontory\">新建一个仓库</h3>\n\n<ul>\n<li>如果没有Github帐号，首先<a href=\"https://github.com/\">注册一个</a>。</li>\n<li>接下来新建一个仓库</li>\n</ul>\n<p><strong>注：</strong>Repository name(仓库名)必须是 <code>yourusername.github.io</code></p>\n<p>比如我的用户名是loshine，那么我的这个仓库名就是<code>loshine.github.io</code></p>\n<h3 id=\"clone\">clone到本地</h3>\n\n<p>使用Github客户端或者Git命令行工具将这个项目clone到本地。</p>\n<h3 id=\"update index\">上传页面</h3>\n\n<p>之后，新建一个<code>index.html</code>文件，push到对应的<strong>master</strong>分支（推荐官网教程）。等一段时间之后（可以听首歌），网站生效，访问<code>yourusername.github.io</code>，就能看见完整的网页了。</p>\n<p><br></p>\n<h2 id=\"build\">建造</h2>\n\n<h3 id=\"build environment\">搭建本地环境</h3>\n\n<p>由于我们使用Jekell来将markdown文件生成博客文章，所以我们需要搭建本地的Jekyll环境。</p>\n<ol>\n<li><strong>Ruby</strong> - Mac已经自带了Ruby，所以无需再次安装。如果是其它系统且没有安装Ruby，请<a href=\"https://www.ruby-lang.org/en/downloads/\">安装Ruby环境</a>。</li>\n<li><strong>Bundler</strong> - 打开终端输入<code>gem install bundler</code>以安装。</li>\n<li><strong>github-pages</strong> - 打开终端输入<code>gem install github-pages</code>以安装。</li>\n<li><strong>Jekyll</strong> - 打开终端输入<code>gem install jekyll</code>以安装。</li>\n</ol>\n<p><strong>注</strong>: 如果你在墙内则可能会出现无法安装的问题，可以通过将Gem源更换为<a href=\"http://ruby.taobao.org/\">淘宝镜像源</a>解决。</p>\n<h3 id=\"use jekyll\">Jekyll的使用</h3>\n\n<ol>\n<li>在我们之前创建的仓库下新建一个文件，命名为<strong>Gemfile</strong>，并写入<code>gem &#39;github-pages&#39;</code>。</li>\n<li>在仓库目录下打开命令行工具，输入<code>bundle install</code>。</li>\n<li>在命令行工具中输入<code>bundle exec jekyll serve</code>，按提示打开地址，就可以在本地进行查看和调试网站了。</li>\n</ol>\n<h3 id=\"jekyll dictionary\">Jekyll目录解析</h3>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|—— _config.yml</span><br><span class=\"line\">|—— _includes</span><br><span class=\"line\">    |—— footer.html</span><br><span class=\"line\">    |—— header.html</span><br><span class=\"line\">|—— _layouts</span><br><span class=\"line\">    |—— default.html</span><br><span class=\"line\">    |—— post.html</span><br><span class=\"line\">|—— _posts</span><br><span class=\"line\">    |—— 2015-04-09-welcome-to-jekyll.md</span><br><span class=\"line\">    |—— 2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</span><br><span class=\"line\">|—— _site</span><br><span class=\"line\">|—— css</span><br><span class=\"line\">    |—— *.css</span><br><span class=\"line\">|—— script</span><br><span class=\"line\">    |—— *.js</span><br><span class=\"line\">|—— Gemfile</span><br><span class=\"line\">|—— Gemfile.lock</span><br><span class=\"line\">|—— index.html</span><br></pre></td></tr></table></figure>\n<p>接下来按顺序介绍一下以上文件目录树的每一个文件夹以及文件的作用。</p>\n<ul>\n<li><code>_config.yml</code> 配置文件，你可以在里面配置你博客会用到的常量，比如博客名，邮件</li>\n<li><code>_includes</code> 文章各个部分的html文件，可以在布局中包含这些文件</li>\n<li><code>_layouts</code> 存放模板。就是你网页的布局，主页布局，文章布局。当然不是指CSS那样的布局，是指，你包含哪些基本的内容到页面上。包含的内容就是includes里面的文件。</li>\n<li><code>_posts</code> 存放博客文章</li>\n<li><code>CNAME</code> 域名地址</li>\n<li><code>css</code> 存放博客所用css</li>\n<li><code>script</code> 存放博客所用JavaScript</li>\n<li><code>index.html</code> 博客主页</li>\n</ul>\n<p><br></p>\n<h2 id=\"write blog\">写博客</h2>\n\n<p>博客文章都是用<a href=\"http://wowubuntu.com/markdown/\">markdown格式</a>书写，命名格式为<em>时间加标题</em>，形如：<code>2015-08-17-使用Jekyll在Github-Pages上搭建个人博客.md</code></p>\n<p>文章需要在开头位置加入一段特殊的文字，其中定义了使用到的<strong>样式</strong>、<strong>文章标题</strong>、<strong>时间</strong>、<strong>分类</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;Welcome to Jekyll!&quot;</span><br><span class=\"line\">date: 2014-01-27 21:57:11</span><br><span class=\"line\">categories: Blog</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>完成了以上的步骤，就可以开始撰写博客了。写完之后记得把它放入<code>_post</code>文件夹中，并同步到Github上哦。</p>\n<p><br></p>\n<h2 id=\"decoration\">装修</h2>\n\n<h3 id=\"use template\">使用模板</h3>\n\n<p>之前在<a href=\"#jekyll dictionary\">Jekyll目录解析</a>中我们大致了解了各个目录的结构。如果您是一名资深的前端工程师，那么就可以直接开始编写自己喜欢的样式的博客了。如果您对于前端并不是那么擅长，那么您可以直接在<a href=\"http://jekyllthemes.org/\">Jekyll 主题</a>中选择自己喜欢的主题并放入到自己的项目中去。</p>\n<p>以我的博客为例，我选择了<a href=\"http://jekyllthemes.org/themes/pithy/\">Pithy</a>主题，将其下载了下来，然后放入了自己的项目中，覆盖已有的文件，然后在终端中输入<code>bundle exec jekyll serve</code>运行jekyll服务器，打开<code>http://localhost:4000</code>就可以查看到效果了。</p>\n<h3 id=\"stylish\">自定义样式</h3>\n\n<p>如果您不是一名资深的前端工程师但是还是想要自己定义自己博客的样式。那么我推荐您<a href=\"http://www.runoob.com/\">Run Noob</a>、<a href=\"http://www.w3school.com.cn/\">w3cschool</a>这两个地方学习前端知识。之后您就可以根据自己的需求装点自己的博客了。</p>\n<p><br></p>\n<h2 id=\"customize\">定制</h2>\n\n<h3 id=\"cname\">使用独立域名</h3>\n\n<ul>\n<li>新建一个文件，命名为<strong>CNAME</strong>，然后在里面写入你需要绑定的独立域名就可以了。</li>\n<li>在你的域名服务商处添加解析地址。</li>\n</ul>\n<p>完成以上步骤你就可以使用自己的独立域名了。</p>\n<h3 id=\"add comment\">添加评论功能</h3>\n\n<h4 id=\"ds\">多说</h4>\n\n<p>多说评论对国内的社交帐号支持不错，自定义性也很强，是一个不错的选择。</p>\n<ul>\n<li>登录<a href=\"http://duoshuo.com/\">多说</a>，创建一个项目，拷贝你的<strong>通用代码</strong>。</li>\n<li>在<code>_include</code>文件夹里新建一个<code>comment.html</code>文件，将通用代码粘贴进去。</li>\n<li>修改<strong>通用代码</strong>中需要配置的地方</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;请将此处替换成文章在你的站点中的ID&quot;</span><br><span class=\"line\">    data-title=&quot;请替换成文章的标题&quot; data-url=&quot;请替换成文章的网址&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;【 page.id 】&quot;</span><br><span class=\"line\">    data-title=&quot;【 page.title 】&quot; data-url=&quot;your web site【 page.url 】&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>注意<code>【】</code>需要替换为<strong>两个大括号</strong>，<code>your web site</code>需替换为<strong>您的域名地址</strong>。</p>\n<ul>\n<li>在<code>_layout</code>中的<code>post.html</code>中的底部加入<code>【% include comment.html %】</code>（【】须替换为{}）</li>\n<li>在<strong>多说</strong>的控制台里你可以设置很多自定义项，如：评论审核、评论显示方式、关键词过滤、主题、自定义CSS等</li>\n</ul>\n<h4 id=\"disqus\">Disqus</h4>\n\n<p>Disqus支持使用Disqus、Facebook、Twitter以及Google帐号登录，如果你的博客不是主要面向国内普通用户的话，可以考虑使用Disqus。</p>\n<ul>\n<li><a href=\"https://disqus.com/\">注册Disqus</a></li>\n<li>右上角设置项中选择<code>Add Disqus To Site</code>，按步骤走，最后复制生成的<strong>Universal Code</strong></li>\n<li>其它部分类似如上的集成多说操作，<em>但不需要自己修改代码了</em></li>\n<li>Disqus也有控制台可以对评论进行操作</li>\n</ul>\n<p><strong>注意</strong>：Disqus在国内的访问速度可能比较慢，可能需要慎重考虑使用。</p>\n<p><br></p>\n<h2 id=\"reference\">参考</h2>\n\n<ul>\n<li><a href=\"http://azureyu.com/blog/2015/08/15/HowToBulidBlog.html\">《“授人以渔”的教你搭建个人独立博客》——Azure Yu</a></li>\n<li><a href=\"https://help.github.com/categories/github-pages-basics/\">官方文档</a></li>\n</ul>\n"},{"title":"Java中的单例设计模式","date":"2015-08-18T03:19:30.000Z","_content":"单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n\n# 目录\n\n* [特点](#feature)\n* [实现](#implement)\n\t* [饿汉式](#hunger style)\n\t* [懒汉式](#lazy style)\n\n<h2 id=\"feature\">特点</h2>\n\n单例模式有以下特点：\n\n1. 单例类只能有一个实例\n2. 单例类必须自己创建自己的唯一实例\n3. 单例类必须给所有其他对象提供这一实例\n\n<h2 id=\"implement\">实现</h2>\n\n<h3 id=\"hunger style\">饿汉式</h3>\n\n饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。\n\n```java\npublic class Singleton {\n\n    // 饿汉式，开始就建立一个对象\n    private static final Singleton single = new Singleton();\n    \n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    public static Singleton getInstance() {\n        return single;\n    }\n}\n```\n\n<h3 id=\"lazy style\">懒汉式</h3>\n\n懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。\n\n```java\npublic class Singleton {\n    // 懒汉式，刚开始不创建对象\n    private static Singleton single=null;\n\n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    // 静态工厂方法\n    public static Singleton getInstance() {\n         if (single == null) {\n             single = new Singleton();\n         }\n        return single;  \n    }\n}\n```\n\n这种懒汉式实现是**非线程安全**的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式\n\n* 同步`getInstance()`方法\n\n```java\npublic static synchronized Singleton getInstance() {\n    if (single == null) {\n        single = new Singleton();\n    }    \n    return single;\n}\n```\n\n* 代码块加锁和双重检查\n\n```java\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        synchronized (Singleton.class) {\n            if (singleton == null) {\n            singleton = new Singleton();\n            }\n        }\n    }\n    return singleton;\n}\n```\n\n* 静态内部类\n\n```java\npublic class Singleton {\n    \n    // 用于封装单例实例的内部类\n    private static class LazyHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    \n    // 私有构造\n    private Singleton() {}\n    \n    // 获取单例实例的方法\n    public static final Singleton getInstance() {\n        return LazyHolder.INSTANCE;\n    }    \n}\n```\n\n其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。","source":"_posts/2015-08-18-Java中的单例设计模式.md","raw":"---\ntitle: Java中的单例设计模式\ndate: 2015-08-18 11:19:30\ntags: [设计模式, Java]\n---\n单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n\n# 目录\n\n* [特点](#feature)\n* [实现](#implement)\n\t* [饿汉式](#hunger style)\n\t* [懒汉式](#lazy style)\n\n<h2 id=\"feature\">特点</h2>\n\n单例模式有以下特点：\n\n1. 单例类只能有一个实例\n2. 单例类必须自己创建自己的唯一实例\n3. 单例类必须给所有其他对象提供这一实例\n\n<h2 id=\"implement\">实现</h2>\n\n<h3 id=\"hunger style\">饿汉式</h3>\n\n饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。\n\n```java\npublic class Singleton {\n\n    // 饿汉式，开始就建立一个对象\n    private static final Singleton single = new Singleton();\n    \n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    public static Singleton getInstance() {\n        return single;\n    }\n}\n```\n\n<h3 id=\"lazy style\">懒汉式</h3>\n\n懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。\n\n```java\npublic class Singleton {\n    // 懒汉式，刚开始不创建对象\n    private static Singleton single=null;\n\n    // 将构造函数私有，禁止在其它类中创建对象\n    private Singleton() {}\n    \n    // 静态工厂方法\n    public static Singleton getInstance() {\n         if (single == null) {\n             single = new Singleton();\n         }\n        return single;  \n    }\n}\n```\n\n这种懒汉式实现是**非线程安全**的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式\n\n* 同步`getInstance()`方法\n\n```java\npublic static synchronized Singleton getInstance() {\n    if (single == null) {\n        single = new Singleton();\n    }    \n    return single;\n}\n```\n\n* 代码块加锁和双重检查\n\n```java\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        synchronized (Singleton.class) {\n            if (singleton == null) {\n            singleton = new Singleton();\n            }\n        }\n    }\n    return singleton;\n}\n```\n\n* 静态内部类\n\n```java\npublic class Singleton {\n    \n    // 用于封装单例实例的内部类\n    private static class LazyHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    \n    // 私有构造\n    private Singleton() {}\n    \n    // 获取单例实例的方法\n    public static final Singleton getInstance() {\n        return LazyHolder.INSTANCE;\n    }    \n}\n```\n\n其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。","slug":"Java中的单例设计模式","published":1,"updated":"2016-03-03T16:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcj3xm70001phe9z4eb9gu6","content":"<p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#feature\">特点</a></li>\n<li><a href=\"#implement\">实现</a><ul>\n<li><a href=\"#hunger style\">饿汉式</a></li>\n<li><a href=\"#lazy style\">懒汉式</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"feature\">特点</h2>\n\n<p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例</li>\n<li>单例类必须自己创建自己的唯一实例</li>\n<li>单例类必须给所有其他对象提供这一实例</li>\n</ol>\n<h2 id=\"implement\">实现</h2>\n\n<h3 id=\"hunger style\">饿汉式</h3>\n\n<p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 饿汉式，开始就建立一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lazy style\">懒汉式</h3>\n\n<p>懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 懒汉式，刚开始不创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton single=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 静态工厂方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种懒汉式实现是<strong>非线程安全</strong>的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式</p>\n<ul>\n<li>同步<code>getInstance()</code>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>代码块加锁和双重检查</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>静态内部类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 用于封装单例实例的内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 私有构造</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取单例实例的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。</p>\n","excerpt":"","more":"<p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#feature\">特点</a></li>\n<li><a href=\"#implement\">实现</a><ul>\n<li><a href=\"#hunger style\">饿汉式</a></li>\n<li><a href=\"#lazy style\">懒汉式</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"feature\">特点</h2>\n\n<p>单例模式有以下特点：</p>\n<ol>\n<li>单例类只能有一个实例</li>\n<li>单例类必须自己创建自己的唯一实例</li>\n<li>单例类必须给所有其他对象提供这一实例</li>\n</ol>\n<h2 id=\"implement\">实现</h2>\n\n<h3 id=\"hunger style\">饿汉式</h3>\n\n<p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 饿汉式，开始就建立一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lazy style\">懒汉式</h3>\n\n<p>懒汉式则是在调用获取实例对象的方法时检查，若没有对象则创建对象，如果单例对象已经存在则不创建对象直接返回已存在的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 懒汉式，刚开始不创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton single=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将构造函数私有，禁止在其它类中创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 静态工厂方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种懒汉式实现是<strong>非线程安全</strong>的，并发环境下很可能出现多个Singleton实例。若要保证线程安全，我们可以使用如下几种方式</p>\n<ul>\n<li>同步<code>getInstance()</code>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        single = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>代码块加锁和双重检查</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>静态内部类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 用于封装单例实例的内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 私有构造</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取单例实例的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中第三种实现方式最好，避免了加锁的效率问题。但实际开发中饿汉式使用较多。</p>\n"},{"title":"Android Studio常用快捷键","date":"2015-08-20T14:31:30.000Z","_content":"之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。\n\n# 快捷键\n\n| Action | Mac OSX | Win/Linux |\n|:-------|:--------|:----------|\n| 注释代码(//) | Cmd + / | Ctrl + / |\n| 注释代码(/**/) | Cmd + Option + / | Ctrl + Shift + / |\n| 格式化代码 | Cmd + Option + L | Ctrl + Alt + L |\n| 清除无效包引用 | Option + Control + O | Alt + Ctrl + O |\n| 查找 | Cmd + F | Ctrl + F |\n| 查找+替换 | Cmd + R | Ctrl + R |\n| 上下移动代码 | Option + Shift + Up/Down | Alt + Shift + Up/Down |\n| 删除行 | Cmd + Delete | Ctrl + Y |\n| 扩大缩小选中范围 | Option + Up/Down | Ctrl + W/Ctrl + Shift + W |\n| 快捷生成结构体 | Cmd + Option + T | Ctrl + Alt + T |\n| 快捷覆写方法 | Cmd + O | Ctrl + O |\n| 快捷定位到行首/尾 | Cmd + Left/Right | Ctrl + Left/Right |\n| 折叠展开代码块 | Cmd + Plus,Minus | Ctrl + Plus/Minus |\n| 折叠展开全部代码块 | Cmd + Shift + Plus,Minus | Ctrl + Shift + Plus,Minus |\n| 文件方法结构 | Cmd + F12 | Ctrl + F12 |\n| 查找调用的位置 | Ctrl + Option + H | Ctrl + Alt + H |\n| 大小写转换 | Cmd + Shift + U | Ctrl + Shift + U |\n| 编译项目 | Cmd + F9 | Ctrl + F9 |\n| 运行项目 | Ctrl + R | Ctrl + R |\n| 代码提示 | Option + Space | Alt + Space |\n\n(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)\n","source":"_posts/2015-08-20-Android Studio常用快捷键.md","raw":"---\ntitle: Android Studio常用快捷键\ndate:   2015-08-20 22:31:30\ntags: [Android Studio, Android]\n---\n之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。\n\n# 快捷键\n\n| Action | Mac OSX | Win/Linux |\n|:-------|:--------|:----------|\n| 注释代码(//) | Cmd + / | Ctrl + / |\n| 注释代码(/**/) | Cmd + Option + / | Ctrl + Shift + / |\n| 格式化代码 | Cmd + Option + L | Ctrl + Alt + L |\n| 清除无效包引用 | Option + Control + O | Alt + Ctrl + O |\n| 查找 | Cmd + F | Ctrl + F |\n| 查找+替换 | Cmd + R | Ctrl + R |\n| 上下移动代码 | Option + Shift + Up/Down | Alt + Shift + Up/Down |\n| 删除行 | Cmd + Delete | Ctrl + Y |\n| 扩大缩小选中范围 | Option + Up/Down | Ctrl + W/Ctrl + Shift + W |\n| 快捷生成结构体 | Cmd + Option + T | Ctrl + Alt + T |\n| 快捷覆写方法 | Cmd + O | Ctrl + O |\n| 快捷定位到行首/尾 | Cmd + Left/Right | Ctrl + Left/Right |\n| 折叠展开代码块 | Cmd + Plus,Minus | Ctrl + Plus/Minus |\n| 折叠展开全部代码块 | Cmd + Shift + Plus,Minus | Ctrl + Shift + Plus,Minus |\n| 文件方法结构 | Cmd + F12 | Ctrl + F12 |\n| 查找调用的位置 | Ctrl + Option + H | Ctrl + Alt + H |\n| 大小写转换 | Cmd + Shift + U | Ctrl + Shift + U |\n| 编译项目 | Cmd + F9 | Ctrl + F9 |\n| 运行项目 | Ctrl + R | Ctrl + R |\n| 代码提示 | Option + Space | Alt + Space |\n\n(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)\n","slug":"Android Studio常用快捷键","published":1,"updated":"2016-03-03T16:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcj3xmd0003phe9uv40sg01","content":"<p>之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。</p>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Action</th>\n<th style=\"text-align:left\">Mac OSX</th>\n<th style=\"text-align:left\">Win/Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">注释代码(//)</td>\n<td style=\"text-align:left\">Cmd + /</td>\n<td style=\"text-align:left\">Ctrl + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释代码(/**/)</td>\n<td style=\"text-align:left\">Cmd + Option + /</td>\n<td style=\"text-align:left\">Ctrl + Shift + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">格式化代码</td>\n<td style=\"text-align:left\">Cmd + Option + L</td>\n<td style=\"text-align:left\">Ctrl + Alt + L</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">清除无效包引用</td>\n<td style=\"text-align:left\">Option + Control + O</td>\n<td style=\"text-align:left\">Alt + Ctrl + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\">Cmd + F</td>\n<td style=\"text-align:left\">Ctrl + F</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找+替换</td>\n<td style=\"text-align:left\">Cmd + R</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">上下移动代码</td>\n<td style=\"text-align:left\">Option + Shift + Up/Down</td>\n<td style=\"text-align:left\">Alt + Shift + Up/Down</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除行</td>\n<td style=\"text-align:left\">Cmd + Delete</td>\n<td style=\"text-align:left\">Ctrl + Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">扩大缩小选中范围</td>\n<td style=\"text-align:left\">Option + Up/Down</td>\n<td style=\"text-align:left\">Ctrl + W/Ctrl + Shift + W</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷生成结构体</td>\n<td style=\"text-align:left\">Cmd + Option + T</td>\n<td style=\"text-align:left\">Ctrl + Alt + T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷覆写方法</td>\n<td style=\"text-align:left\">Cmd + O</td>\n<td style=\"text-align:left\">Ctrl + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷定位到行首/尾</td>\n<td style=\"text-align:left\">Cmd + Left/Right</td>\n<td style=\"text-align:left\">Ctrl + Left/Right</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠展开代码块</td>\n<td style=\"text-align:left\">Cmd + Plus,Minus</td>\n<td style=\"text-align:left\">Ctrl + Plus/Minus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠展开全部代码块</td>\n<td style=\"text-align:left\">Cmd + Shift + Plus,Minus</td>\n<td style=\"text-align:left\">Ctrl + Shift + Plus,Minus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文件方法结构</td>\n<td style=\"text-align:left\">Cmd + F12</td>\n<td style=\"text-align:left\">Ctrl + F12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找调用的位置</td>\n<td style=\"text-align:left\">Ctrl + Option + H</td>\n<td style=\"text-align:left\">Ctrl + Alt + H</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大小写转换</td>\n<td style=\"text-align:left\">Cmd + Shift + U</td>\n<td style=\"text-align:left\">Ctrl + Shift + U</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">编译项目</td>\n<td style=\"text-align:left\">Cmd + F9</td>\n<td style=\"text-align:left\">Ctrl + F9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">运行项目</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">代码提示</td>\n<td style=\"text-align:left\">Option + Space</td>\n<td style=\"text-align:left\">Alt + Space</td>\n</tr>\n</tbody>\n</table>\n<p>(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)</p>\n","excerpt":"","more":"<p>之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。</p>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Action</th>\n<th style=\"text-align:left\">Mac OSX</th>\n<th style=\"text-align:left\">Win/Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">注释代码(//)</td>\n<td style=\"text-align:left\">Cmd + /</td>\n<td style=\"text-align:left\">Ctrl + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释代码(/**/)</td>\n<td style=\"text-align:left\">Cmd + Option + /</td>\n<td style=\"text-align:left\">Ctrl + Shift + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">格式化代码</td>\n<td style=\"text-align:left\">Cmd + Option + L</td>\n<td style=\"text-align:left\">Ctrl + Alt + L</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">清除无效包引用</td>\n<td style=\"text-align:left\">Option + Control + O</td>\n<td style=\"text-align:left\">Alt + Ctrl + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\">Cmd + F</td>\n<td style=\"text-align:left\">Ctrl + F</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找+替换</td>\n<td style=\"text-align:left\">Cmd + R</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">上下移动代码</td>\n<td style=\"text-align:left\">Option + Shift + Up/Down</td>\n<td style=\"text-align:left\">Alt + Shift + Up/Down</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除行</td>\n<td style=\"text-align:left\">Cmd + Delete</td>\n<td style=\"text-align:left\">Ctrl + Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">扩大缩小选中范围</td>\n<td style=\"text-align:left\">Option + Up/Down</td>\n<td style=\"text-align:left\">Ctrl + W/Ctrl + Shift + W</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷生成结构体</td>\n<td style=\"text-align:left\">Cmd + Option + T</td>\n<td style=\"text-align:left\">Ctrl + Alt + T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷覆写方法</td>\n<td style=\"text-align:left\">Cmd + O</td>\n<td style=\"text-align:left\">Ctrl + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快捷定位到行首/尾</td>\n<td style=\"text-align:left\">Cmd + Left/Right</td>\n<td style=\"text-align:left\">Ctrl + Left/Right</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠展开代码块</td>\n<td style=\"text-align:left\">Cmd + Plus,Minus</td>\n<td style=\"text-align:left\">Ctrl + Plus/Minus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠展开全部代码块</td>\n<td style=\"text-align:left\">Cmd + Shift + Plus,Minus</td>\n<td style=\"text-align:left\">Ctrl + Shift + Plus,Minus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文件方法结构</td>\n<td style=\"text-align:left\">Cmd + F12</td>\n<td style=\"text-align:left\">Ctrl + F12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找调用的位置</td>\n<td style=\"text-align:left\">Ctrl + Option + H</td>\n<td style=\"text-align:left\">Ctrl + Alt + H</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大小写转换</td>\n<td style=\"text-align:left\">Cmd + Shift + U</td>\n<td style=\"text-align:left\">Ctrl + Shift + U</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">编译项目</td>\n<td style=\"text-align:left\">Cmd + F9</td>\n<td style=\"text-align:left\">Ctrl + F9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">运行项目</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n<td style=\"text-align:left\">Ctrl + R</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">代码提示</td>\n<td style=\"text-align:left\">Option + Space</td>\n<td style=\"text-align:left\">Alt + Space</td>\n</tr>\n</tbody>\n</table>\n<p>(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)</p>\n"},{"title":"Java中的模板方法模式","date":"2015-08-25T05:50:30.000Z","_content":"准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。\n\n# 目录\n\n* [结构](#structure)\n* [在Servlet中的应用](#application)\n\n<h1 id=\"structure\">结构</h1>\n\n模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做**基本方法**(primitive method)；而将这些基本方法汇总起来的方法叫做**模板方法**(template method)，这个设计模式的名字就是从此而来。\n\n模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：\n\n![](http://7xl94a.com1.z0.glb.clouddn.com/123123123.png)\n\n这里涉及到两个角色：\n\n**抽象模板(Abstract Template)角色：**\n\n* 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。\n* 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。\n\n**具体模板(Concrete Template)角色：**\n\n* 实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。\n* 每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。\n\n## 示例代码\n\n抽象模板角色类，`abstractMethod()`、`doHookMethod()`等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由`templateMethod()`方法代表。\n\n```java\npublic abstract class AbstractTemplate {\n    \n    /**\n     * 模板方法\n     */\n    public void templateMethod(){\n        // 调用基本方法\n        abstractMethod();\n        doHookMethod();\n        concreteMethod();\n    }\n    \n    /**\n     * 抽象方法，子类必须实现的方法\n     */\n    protected abstract void abstractMethod();\n    \n    /**\n     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头\n     */\n    protected void doHookMethod(){}\n    \n    /**\n     * 具体方法，由父类实现，子类无法 override\n     */\n    private final void concreteMethod(){\n        // 业务相关的代码\n    }\n}\n```\n\n具体模板角色类，实现了父类所声明的基本方法，`abstractMethod()`方法所代表的就是强制子类实现的剩余逻辑，而`doHookMethod()`方法是可选择实现的逻辑，不是必须实现的。\n\n```java\npublic class ConcreteTemplate extends AbstractTemplate {\n    \n    // 基本方法的实现\n    @Override\n    public void abstractMethod() {\n        // 业务相关的代码\n    }\n    \n    // 重写父类的方法\n    @Override\n    public void hookMethod() {\n        // 业务相关的代码\n    }\n}\n```\n\n**模板方法模式的关键**：*子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑*。\n \n每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照**责任**的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。\n\n<h1 id=\"application\">在Servlet中的应用</h1>\n\n使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个`service()`方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的**模板方法模式**。下面是`service()`方法的源代码：\n\n```java\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n \n        String method = req.getMethod();\n \n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n \n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n \n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n \n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);       \n \n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n \n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n \n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n \n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n \n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n \n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n```\n\n当然，这个`service()`方法也可以被子类置换掉。\n \n下面给出一个简单的 Servlet 例子：\n \nTestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：`doGet()`和`doPost()`：\n\n```java\n    public class TestServlet extends HttpServlet {\n     \n        public void doGet(HttpServletRequest request, HttpServletResponse response)\n                throws ServletException, IOException {\n     \n            System.out.println(\"using the GET method\");\n \n        }\n     \n        public void doPost(HttpServletRequest request, HttpServletResponse response)\n                throws ServletException, IOException {\n     \n            System.out.println(\"using the POST method\");\n        }\n     \n    }\n```\n\n从上面的例子可以看出这是一个典型的模板方法模式。\n \nHttpServlet 担任抽象模板角色\n \n* **模板方法**：由`service()`方法担任。\n* **基本方法**：由`doPost()`、`doGet()`等方法担任。\n \nTestServlet 担任具体模板角色\n \n* TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是`doGet()`和`doPost()`。","source":"_posts/2015-08-25-Java中的模板方法模式.md","raw":"---\ntitle: Java中的模板方法模式\ndate: 2015-08-25 13:50:30\ntags: [Java, 设计模式]\n---\n准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。\n\n# 目录\n\n* [结构](#structure)\n* [在Servlet中的应用](#application)\n\n<h1 id=\"structure\">结构</h1>\n\n模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做**基本方法**(primitive method)；而将这些基本方法汇总起来的方法叫做**模板方法**(template method)，这个设计模式的名字就是从此而来。\n\n模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：\n\n![](http://7xl94a.com1.z0.glb.clouddn.com/123123123.png)\n\n这里涉及到两个角色：\n\n**抽象模板(Abstract Template)角色：**\n\n* 定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。\n* 定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。\n\n**具体模板(Concrete Template)角色：**\n\n* 实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。\n* 每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。\n\n## 示例代码\n\n抽象模板角色类，`abstractMethod()`、`doHookMethod()`等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由`templateMethod()`方法代表。\n\n```java\npublic abstract class AbstractTemplate {\n    \n    /**\n     * 模板方法\n     */\n    public void templateMethod(){\n        // 调用基本方法\n        abstractMethod();\n        doHookMethod();\n        concreteMethod();\n    }\n    \n    /**\n     * 抽象方法，子类必须实现的方法\n     */\n    protected abstract void abstractMethod();\n    \n    /**\n     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头\n     */\n    protected void doHookMethod(){}\n    \n    /**\n     * 具体方法，由父类实现，子类无法 override\n     */\n    private final void concreteMethod(){\n        // 业务相关的代码\n    }\n}\n```\n\n具体模板角色类，实现了父类所声明的基本方法，`abstractMethod()`方法所代表的就是强制子类实现的剩余逻辑，而`doHookMethod()`方法是可选择实现的逻辑，不是必须实现的。\n\n```java\npublic class ConcreteTemplate extends AbstractTemplate {\n    \n    // 基本方法的实现\n    @Override\n    public void abstractMethod() {\n        // 业务相关的代码\n    }\n    \n    // 重写父类的方法\n    @Override\n    public void hookMethod() {\n        // 业务相关的代码\n    }\n}\n```\n\n**模板方法模式的关键**：*子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑*。\n \n每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照**责任**的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。\n\n<h1 id=\"application\">在Servlet中的应用</h1>\n\n使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个`service()`方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的**模板方法模式**。下面是`service()`方法的源代码：\n\n```java\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n \n        String method = req.getMethod();\n \n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n \n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n \n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n \n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);       \n \n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n \n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n \n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n \n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n \n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n \n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n```\n\n当然，这个`service()`方法也可以被子类置换掉。\n \n下面给出一个简单的 Servlet 例子：\n \nTestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：`doGet()`和`doPost()`：\n\n```java\n    public class TestServlet extends HttpServlet {\n     \n        public void doGet(HttpServletRequest request, HttpServletResponse response)\n                throws ServletException, IOException {\n     \n            System.out.println(\"using the GET method\");\n \n        }\n     \n        public void doPost(HttpServletRequest request, HttpServletResponse response)\n                throws ServletException, IOException {\n     \n            System.out.println(\"using the POST method\");\n        }\n     \n    }\n```\n\n从上面的例子可以看出这是一个典型的模板方法模式。\n \nHttpServlet 担任抽象模板角色\n \n* **模板方法**：由`service()`方法担任。\n* **基本方法**：由`doPost()`、`doGet()`等方法担任。\n \nTestServlet 担任具体模板角色\n \n* TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是`doGet()`和`doPost()`。","slug":"Java中的模板方法模式","published":1,"updated":"2016-03-03T16:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcj3xme0004phe90ke2v133","content":"<p>准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#structure\">结构</a></li>\n<li><a href=\"#application\">在Servlet中的应用</a></li>\n</ul>\n<h1 id=\"structure\">结构</h1>\n\n<p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做<strong>基本方法</strong>(primitive method)；而将这些基本方法汇总起来的方法叫做<strong>模板方法</strong>(template method)，这个设计模式的名字就是从此而来。</p>\n<p>模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/123123123.png\" alt=\"\"></p>\n<p>这里涉及到两个角色：</p>\n<p><strong>抽象模板(Abstract Template)角色：</strong></p>\n<ul>\n<li>定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。</li>\n<li>定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</li>\n</ul>\n<p><strong>具体模板(Concrete Template)角色：</strong></p>\n<ul>\n<li>实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。</li>\n<li>每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>抽象模板角色类，<code>abstractMethod()</code>、<code>doHookMethod()</code>等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由<code>templateMethod()</code>方法代表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 模板方法</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用基本方法</span></span><br><span class=\"line\">        abstractMethod();</span><br><span class=\"line\">        doHookMethod();</span><br><span class=\"line\">        concreteMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 抽象方法，子类必须实现的方法</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractMethod</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doHookMethod</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 具体方法，由父类实现，子类无法 override</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">concreteMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体模板角色类，实现了父类所声明的基本方法，<code>abstractMethod()</code>方法所代表的就是强制子类实现的剩余逻辑，而<code>doHookMethod()</code>方法是可选择实现的逻辑，不是必须实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 基本方法的实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 重写父类的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hookMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>模板方法模式的关键</strong>：<em>子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑</em>。</p>\n<p>每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照<strong>责任</strong>的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。</p>\n<h1 id=\"application\">在Servlet中的应用</h1>\n\n<p>使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个<code>service()</code>方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的<strong>模板方法模式</strong>。下面是<code>service()</code>方法的源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// servlet doesn't support if-modified-since, no reason</span></span><br><span class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; (lastModified / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></span><br><span class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></span><br><span class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);       </span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Note that this means NO servlet supports whatever</span></span><br><span class=\"line\">        <span class=\"comment\">// method was requested, anywhere on this server.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</span><br><span class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\"> </span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，这个<code>service()</code>方法也可以被子类置换掉。</p>\n<p>下面给出一个简单的 Servlet 例子：</p>\n<p>TestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：<code>doGet()</code>和<code>doPost()</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"using the GET method\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"using the POST method\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看出这是一个典型的模板方法模式。</p>\n<p>HttpServlet 担任抽象模板角色</p>\n<ul>\n<li><strong>模板方法</strong>：由<code>service()</code>方法担任。</li>\n<li><strong>基本方法</strong>：由<code>doPost()</code>、<code>doGet()</code>等方法担任。</li>\n</ul>\n<p>TestServlet 担任具体模板角色</p>\n<ul>\n<li>TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是<code>doGet()</code>和<code>doPost()</code>。</li>\n</ul>\n","excerpt":"","more":"<p>准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#structure\">结构</a></li>\n<li><a href=\"#application\">在Servlet中的应用</a></li>\n</ul>\n<h1 id=\"structure\">结构</h1>\n\n<p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做<strong>基本方法</strong>(primitive method)；而将这些基本方法汇总起来的方法叫做<strong>模板方法</strong>(template method)，这个设计模式的名字就是从此而来。</p>\n<p>模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/123123123.png\" alt=\"\"></p>\n<p>这里涉及到两个角色：</p>\n<p><strong>抽象模板(Abstract Template)角色：</strong></p>\n<ul>\n<li>定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。</li>\n<li>定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</li>\n</ul>\n<p><strong>具体模板(Concrete Template)角色：</strong></p>\n<ul>\n<li>实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。</li>\n<li>每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>抽象模板角色类，<code>abstractMethod()</code>、<code>doHookMethod()</code>等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由<code>templateMethod()</code>方法代表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 模板方法</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用基本方法</span></span><br><span class=\"line\">        abstractMethod();</span><br><span class=\"line\">        doHookMethod();</span><br><span class=\"line\">        concreteMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 抽象方法，子类必须实现的方法</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractMethod</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doHookMethod</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 具体方法，由父类实现，子类无法 override</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">concreteMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体模板角色类，实现了父类所声明的基本方法，<code>abstractMethod()</code>方法所代表的就是强制子类实现的剩余逻辑，而<code>doHookMethod()</code>方法是可选择实现的逻辑，不是必须实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 基本方法的实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">abstractMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 重写父类的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hookMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 业务相关的代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>模板方法模式的关键</strong>：<em>子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑</em>。</p>\n<p>每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照<strong>责任</strong>的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。</p>\n<h1 id=\"application\">在Servlet中的应用</h1>\n\n<p>使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个<code>service()</code>方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的<strong>模板方法模式</strong>。下面是<code>service()</code>方法的源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// servlet doesn't support if-modified-since, no reason</span></span><br><span class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; (lastModified / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></span><br><span class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></span><br><span class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);       </span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Note that this means NO servlet supports whatever</span></span><br><span class=\"line\">        <span class=\"comment\">// method was requested, anywhere on this server.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</span><br><span class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\"> </span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，这个<code>service()</code>方法也可以被子类置换掉。</p>\n<p>下面给出一个简单的 Servlet 例子：</p>\n<p>TestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：<code>doGet()</code>和<code>doPost()</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"using the GET method\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"using the POST method\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看出这是一个典型的模板方法模式。</p>\n<p>HttpServlet 担任抽象模板角色</p>\n<ul>\n<li><strong>模板方法</strong>：由<code>service()</code>方法担任。</li>\n<li><strong>基本方法</strong>：由<code>doPost()</code>、<code>doGet()</code>等方法担任。</li>\n</ul>\n<p>TestServlet 担任具体模板角色</p>\n<ul>\n<li>TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是<code>doGet()</code>和<code>doPost()</code>。</li>\n</ul>\n"},{"title":"Android网络通信框架Volley","date":"2015-08-27T15:37:30.000Z","_content":"之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。\n\n# 目录\n\n* [Why](#why)\n* [How](#how)\n    * [集成](#compile)\n    * [使用](#use)\n    * [与生命周期的联动](#lifecircle)\n\n<h1 id=\"why\">Why</h1>\n\n之前从网络下载图片可能要这样：\n\n1. 在`ListAdapter#getView()`里开始图像的读取\n2. 通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源\n3. 在`AsyncTask#onPostExecute()`里设置相应 ImageView 的属性\n\n再有，屏幕旋转的时候，有时候*会导致再次从网络取得数据*。为了防止不必要的网络访问，可能我们要自己实现 cache。\n\n还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。\n\n**这些问题使用 Volley 都可以很简单地解决**。\n\nVolley 提供了如下的便捷功能：\n\n* JSON，图像的异步下载\n* 网络请求序列\n* 网络请求优先级处理\n* 缓存\n* 多级别取消请求\n* 和 Activity 生命周期的联动\n\n**人生苦短，快用 Volley！**\n\n<h1 id=\"how\">How</h1>\n\n<h2 id=\"compile\">集成</h2>\n\n三种集成方法，其中后两种都是非官方渠道：\n\n* 编译源码导入项目\n    1. 从 Git 库 clone 最新版 \n\t\t```bash\n\t\tgit clone https://android.googlesource.com/platform/frameworks/volley\n\t\t```\n    2. 编译为 jar 包\n    3. 导入项目\n\n* Gradle构建（非官方渠道，推荐）\n    ```groovy\ncompile 'com.mcxiaoke.volley:library:1.0.18'\n    ```\n\n* Maven构建（非官方渠道）\n    ```xml\n<dependency>\n    <groupId>com.mcxiaoke.volley</groupId>\n    <artifactId>library</artifactId>\n    <version>{latest-version}</version>\n</dependency>\n    ```\n\n<h2 id=\"use\">使用</h2>\n\n具体使用流程如下：\n\n1. 在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象\n2. 创建一个 Request 对象（子类实现）\n3. 添加到序列\n4. 开始序列\n\n在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：\n\n* ClearCacheRequest\n* ImageRequest\n* JSONRequest\n* StringRequest\n\n下面我们就对这几个子类进行介绍以及给出示例\n\n### ClearCacheRequest\n\n虚构的请求，用于清空已有的缓存文件。\n\nClearCacheRequest的优先级很高，为`Priority.IMMEDIATE`，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法`mCache.clear()`写在了`isCanceled()`方法体中，能最早的得到执行。\n\n### ImageRequest\n\n待完成\n\n### JSONRequest\n\nJSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。\n\nJsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。\n\n### StringRequest\n\nStringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：\n\n```java\npublic class StringRequestActivity extends AppCompatActivity {\n\n    /**\n     * Volley 请求队列对象\n     */\n    private RequestQueue mRequestQueue;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_string_request);\n        \n        // 构造请求队列\n        mRequestQueue = Volley.newRequestQueue(context);\n        \n        StringRequest request = new StringRequest(\"http://www.baidu.com\",\n            new Response.Listener<String>() {\n                @Override\n                public void onResponse(String response) {\n                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);\n                }\n            },\n             new Response.ErrorListener() {\n                @Override\n                public void onErrorResponse(VolleyError error) {\n                    Log.i(\"net error\", error.getLocalizedMessage());\n                }\n            });\n        mRequestQueue.add(request);\n    }\n    \n    @Override\n    protected void onStop() {\n        super.onStop();\n        // 退出时取消所有网络请求\n        mRequestQueue.cancelAll(this);\n    }\n}\n```\n\n### 自定义Request\n\n一个简单的使用 Pull 解析的 XMLRequest\n\n```java\npublic class XMLRequest extends Request<XmlPullParser> {  \n\n    private final Listener<XmlPullParser> mListener;\n\n    public XMLRequest(int method, String url, Listener<XmlPullParser> listener,\n            ErrorListener errorListener) {  \n        super(method, url, errorListener);  \n        mListener = listener;  \n    }  \n  \n    public XMLRequest(String url, Listener<XmlPullParser> listener, ErrorListener errorListener) {  \n        this(Method.GET, url, listener, errorListener);  \n    }  \n  \n    @Override  \n    protected Response<XmlPullParser> parseNetworkResponse(NetworkResponse response) {  \n        try {  \n            String xmlString = new String(response.data,  \n                    HttpHeaderParser.parseCharset(response.headers));  \n            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();\n            XmlPullParser xmlPullParser = factory.newPullParser();\n            xmlPullParser.setInput(new StringReader(xmlString));\n            return Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));\n        } catch (UnsupportedEncodingException e) {\n            return Response.error(new ParseError(e));  \n        } catch (XmlPullParserException e) {\n            return Response.error(new ParseError(e));  \n        }\n    }\n  \n    @Override\n    protected void deliverResponse(XmlPullParser response) {  \n        mListener.onResponse(response);\n    }\n  \n}  \n```\n\n在`parseNetworkResponse()`方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在`deliverResponse()`方法中则是将XmlPullParser对象进行回调。\n\n<h2 id=\"lifecircle\">与生命周期的联动</h2>\n\n当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。\n\n所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。\n\n* 可以针对某些个 request 做取消操作\n    ```java\n@Override\npublic void onStop() {\n    for (Request <?> req : mRequestQueue) {\n        req.cancel();\n    }\n}\n    ```\n* 取消这个队列里的所有请求\n    ```java\n@Override\nprotected void onStop() {\n    super.onStop();\n    mRequestQueue.cancelAll(this);\n}  \n    ```\n* 可以根据 RequestFilter 或者 Tag 来终止某些请求\n    ```java\n@Override  \nprotected void onStop() {\n    super.onStop();\n\n    // 根据 RequestFilter\n    mRequestQueue.cancelAll(new RequestFilter() {});\n    // 根据 Tag\n    mRequestQueue.cancelAll(new Object());\n}\n    ```","source":"_posts/2015-08-26-Android网络通信框架Volley.md","raw":"---\ntitle:  \"Android网络通信框架Volley\"\ndate:   2015-08-27 23:37:30\ntags: [Android, Volley]\n---\n之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。\n\n# 目录\n\n* [Why](#why)\n* [How](#how)\n    * [集成](#compile)\n    * [使用](#use)\n    * [与生命周期的联动](#lifecircle)\n\n<h1 id=\"why\">Why</h1>\n\n之前从网络下载图片可能要这样：\n\n1. 在`ListAdapter#getView()`里开始图像的读取\n2. 通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源\n3. 在`AsyncTask#onPostExecute()`里设置相应 ImageView 的属性\n\n再有，屏幕旋转的时候，有时候*会导致再次从网络取得数据*。为了防止不必要的网络访问，可能我们要自己实现 cache。\n\n还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。\n\n**这些问题使用 Volley 都可以很简单地解决**。\n\nVolley 提供了如下的便捷功能：\n\n* JSON，图像的异步下载\n* 网络请求序列\n* 网络请求优先级处理\n* 缓存\n* 多级别取消请求\n* 和 Activity 生命周期的联动\n\n**人生苦短，快用 Volley！**\n\n<h1 id=\"how\">How</h1>\n\n<h2 id=\"compile\">集成</h2>\n\n三种集成方法，其中后两种都是非官方渠道：\n\n* 编译源码导入项目\n    1. 从 Git 库 clone 最新版 \n\t\t```bash\n\t\tgit clone https://android.googlesource.com/platform/frameworks/volley\n\t\t```\n    2. 编译为 jar 包\n    3. 导入项目\n\n* Gradle构建（非官方渠道，推荐）\n    ```groovy\ncompile 'com.mcxiaoke.volley:library:1.0.18'\n    ```\n\n* Maven构建（非官方渠道）\n    ```xml\n<dependency>\n    <groupId>com.mcxiaoke.volley</groupId>\n    <artifactId>library</artifactId>\n    <version>{latest-version}</version>\n</dependency>\n    ```\n\n<h2 id=\"use\">使用</h2>\n\n具体使用流程如下：\n\n1. 在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象\n2. 创建一个 Request 对象（子类实现）\n3. 添加到序列\n4. 开始序列\n\n在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：\n\n* ClearCacheRequest\n* ImageRequest\n* JSONRequest\n* StringRequest\n\n下面我们就对这几个子类进行介绍以及给出示例\n\n### ClearCacheRequest\n\n虚构的请求，用于清空已有的缓存文件。\n\nClearCacheRequest的优先级很高，为`Priority.IMMEDIATE`，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法`mCache.clear()`写在了`isCanceled()`方法体中，能最早的得到执行。\n\n### ImageRequest\n\n待完成\n\n### JSONRequest\n\nJSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。\n\nJsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。\n\n### StringRequest\n\nStringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：\n\n```java\npublic class StringRequestActivity extends AppCompatActivity {\n\n    /**\n     * Volley 请求队列对象\n     */\n    private RequestQueue mRequestQueue;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_string_request);\n        \n        // 构造请求队列\n        mRequestQueue = Volley.newRequestQueue(context);\n        \n        StringRequest request = new StringRequest(\"http://www.baidu.com\",\n            new Response.Listener<String>() {\n                @Override\n                public void onResponse(String response) {\n                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);\n                }\n            },\n             new Response.ErrorListener() {\n                @Override\n                public void onErrorResponse(VolleyError error) {\n                    Log.i(\"net error\", error.getLocalizedMessage());\n                }\n            });\n        mRequestQueue.add(request);\n    }\n    \n    @Override\n    protected void onStop() {\n        super.onStop();\n        // 退出时取消所有网络请求\n        mRequestQueue.cancelAll(this);\n    }\n}\n```\n\n### 自定义Request\n\n一个简单的使用 Pull 解析的 XMLRequest\n\n```java\npublic class XMLRequest extends Request<XmlPullParser> {  \n\n    private final Listener<XmlPullParser> mListener;\n\n    public XMLRequest(int method, String url, Listener<XmlPullParser> listener,\n            ErrorListener errorListener) {  \n        super(method, url, errorListener);  \n        mListener = listener;  \n    }  \n  \n    public XMLRequest(String url, Listener<XmlPullParser> listener, ErrorListener errorListener) {  \n        this(Method.GET, url, listener, errorListener);  \n    }  \n  \n    @Override  \n    protected Response<XmlPullParser> parseNetworkResponse(NetworkResponse response) {  \n        try {  \n            String xmlString = new String(response.data,  \n                    HttpHeaderParser.parseCharset(response.headers));  \n            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();\n            XmlPullParser xmlPullParser = factory.newPullParser();\n            xmlPullParser.setInput(new StringReader(xmlString));\n            return Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));\n        } catch (UnsupportedEncodingException e) {\n            return Response.error(new ParseError(e));  \n        } catch (XmlPullParserException e) {\n            return Response.error(new ParseError(e));  \n        }\n    }\n  \n    @Override\n    protected void deliverResponse(XmlPullParser response) {  \n        mListener.onResponse(response);\n    }\n  \n}  \n```\n\n在`parseNetworkResponse()`方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在`deliverResponse()`方法中则是将XmlPullParser对象进行回调。\n\n<h2 id=\"lifecircle\">与生命周期的联动</h2>\n\n当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。\n\n所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。\n\n* 可以针对某些个 request 做取消操作\n    ```java\n@Override\npublic void onStop() {\n    for (Request <?> req : mRequestQueue) {\n        req.cancel();\n    }\n}\n    ```\n* 取消这个队列里的所有请求\n    ```java\n@Override\nprotected void onStop() {\n    super.onStop();\n    mRequestQueue.cancelAll(this);\n}  \n    ```\n* 可以根据 RequestFilter 或者 Tag 来终止某些请求\n    ```java\n@Override  \nprotected void onStop() {\n    super.onStop();\n\n    // 根据 RequestFilter\n    mRequestQueue.cancelAll(new RequestFilter() {});\n    // 根据 Tag\n    mRequestQueue.cancelAll(new Object());\n}\n    ```","slug":"Android网络通信框架Volley","published":1,"updated":"2016-03-03T16:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcj3xmh0006phe9caobovqn","content":"<p>之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#why\">Why</a></li>\n<li><a href=\"#how\">How</a><ul>\n<li><a href=\"#compile\">集成</a></li>\n<li><a href=\"#use\">使用</a></li>\n<li><a href=\"#lifecircle\">与生命周期的联动</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"why\">Why</h1>\n\n<p>之前从网络下载图片可能要这样：</p>\n<ol>\n<li>在<code>ListAdapter#getView()</code>里开始图像的读取</li>\n<li>通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源</li>\n<li>在<code>AsyncTask#onPostExecute()</code>里设置相应 ImageView 的属性</li>\n</ol>\n<p>再有，屏幕旋转的时候，有时候<em>会导致再次从网络取得数据</em>。为了防止不必要的网络访问，可能我们要自己实现 cache。</p>\n<p>还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。</p>\n<p><strong>这些问题使用 Volley 都可以很简单地解决</strong>。</p>\n<p>Volley 提供了如下的便捷功能：</p>\n<ul>\n<li>JSON，图像的异步下载</li>\n<li>网络请求序列</li>\n<li>网络请求优先级处理</li>\n<li>缓存</li>\n<li>多级别取消请求</li>\n<li>和 Activity 生命周期的联动</li>\n</ul>\n<p><strong>人生苦短，快用 Volley！</strong></p>\n<h1 id=\"how\">How</h1>\n\n<h2 id=\"compile\">集成</h2>\n\n<p>三种集成方法，其中后两种都是非官方渠道：</p>\n<ul>\n<li><p>编译源码导入项目</p>\n<ol>\n<li><p>从 Git 库 clone 最新版 </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://android.googlesource.com/platform/frameworks/volley</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译为 jar 包</p>\n</li>\n<li>导入项目</li>\n</ol>\n</li>\n<li><p>Gradle构建（非官方渠道，推荐）</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.mcxiaoke.volley:library:1.0.18'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Maven构建（非官方渠道）</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mcxiaoke.volley<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>library<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>&#123;latest-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"use\">使用</h2>\n\n<p>具体使用流程如下：</p>\n<ol>\n<li>在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象</li>\n<li>创建一个 Request 对象（子类实现）</li>\n<li>添加到序列</li>\n<li>开始序列</li>\n</ol>\n<p>在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：</p>\n<ul>\n<li>ClearCacheRequest</li>\n<li>ImageRequest</li>\n<li>JSONRequest</li>\n<li>StringRequest</li>\n</ul>\n<p>下面我们就对这几个子类进行介绍以及给出示例</p>\n<h3 id=\"ClearCacheRequest\"><a href=\"#ClearCacheRequest\" class=\"headerlink\" title=\"ClearCacheRequest\"></a>ClearCacheRequest</h3><p>虚构的请求，用于清空已有的缓存文件。</p>\n<p>ClearCacheRequest的优先级很高，为<code>Priority.IMMEDIATE</code>，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法<code>mCache.clear()</code>写在了<code>isCanceled()</code>方法体中，能最早的得到执行。</p>\n<h3 id=\"ImageRequest\"><a href=\"#ImageRequest\" class=\"headerlink\" title=\"ImageRequest\"></a>ImageRequest</h3><p>待完成</p>\n<h3 id=\"JSONRequest\"><a href=\"#JSONRequest\" class=\"headerlink\" title=\"JSONRequest\"></a>JSONRequest</h3><p>JSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。</p>\n<p>JsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。</p>\n<h3 id=\"StringRequest\"><a href=\"#StringRequest\" class=\"headerlink\" title=\"StringRequest\"></a>StringRequest</h3><p>StringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringRequestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Volley 请求队列对象</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RequestQueue mRequestQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_string_request);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 构造请求队列</span></span><br><span class=\"line\">        mRequestQueue = Volley.newRequestQueue(context);</span><br><span class=\"line\">        </span><br><span class=\"line\">        StringRequest request = <span class=\"keyword\">new</span> StringRequest(<span class=\"string\">\"http://www.baidu.com\"</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String response)</span> </span>&#123;</span><br><span class=\"line\">                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">             <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</span><br><span class=\"line\">                    Log.i(<span class=\"string\">\"net error\"</span>, error.getLocalizedMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        mRequestQueue.add(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        <span class=\"comment\">// 退出时取消所有网络请求</span></span><br><span class=\"line\">        mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义Request\"><a href=\"#自定义Request\" class=\"headerlink\" title=\"自定义Request\"></a>自定义Request</h3><p>一个简单的使用 Pull 解析的 XMLRequest</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XMLRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span>&lt;<span class=\"title\">XmlPullParser</span>&gt; </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Listener&lt;XmlPullParser&gt; mListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XMLRequest</span><span class=\"params\">(<span class=\"keyword\">int</span> method, String url, Listener&lt;XmlPullParser&gt; listener,</span><br><span class=\"line\">            ErrorListener errorListener)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(method, url, errorListener);  </span><br><span class=\"line\">        mListener = listener;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XMLRequest</span><span class=\"params\">(String url, Listener&lt;XmlPullParser&gt; listener, ErrorListener errorListener)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>(Method.GET, url, listener, errorListener);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Response&lt;XmlPullParser&gt; <span class=\"title\">parseNetworkResponse</span><span class=\"params\">(NetworkResponse response)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            String xmlString = <span class=\"keyword\">new</span> String(response.data,  </span><br><span class=\"line\">                    HttpHeaderParser.parseCharset(response.headers));  </span><br><span class=\"line\">            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</span><br><span class=\"line\">            XmlPullParser xmlPullParser = factory.newPullParser();</span><br><span class=\"line\">            xmlPullParser.setInput(<span class=\"keyword\">new</span> StringReader(xmlString));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(e));  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(e));  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverResponse</span><span class=\"params\">(XmlPullParser response)</span> </span>&#123;  </span><br><span class=\"line\">        mListener.onResponse(response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>parseNetworkResponse()</code>方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在<code>deliverResponse()</code>方法中则是将XmlPullParser对象进行回调。</p>\n<h2 id=\"lifecircle\">与生命周期的联动</h2>\n\n<p>当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。</p>\n<p>所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。</p>\n<ul>\n<li><p>可以针对某些个 request 做取消操作</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Request &lt;?&gt; req : mRequestQueue) &#123;</span><br><span class=\"line\">        req.cancel();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消这个队列里的所有请求</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以根据 RequestFilter 或者 Tag 来终止某些请求</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据 RequestFilter</span></span><br><span class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">new</span> RequestFilter() &#123;&#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 根据 Tag</span></span><br><span class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p>之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#why\">Why</a></li>\n<li><a href=\"#how\">How</a><ul>\n<li><a href=\"#compile\">集成</a></li>\n<li><a href=\"#use\">使用</a></li>\n<li><a href=\"#lifecircle\">与生命周期的联动</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"why\">Why</h1>\n\n<p>之前从网络下载图片可能要这样：</p>\n<ol>\n<li>在<code>ListAdapter#getView()</code>里开始图像的读取</li>\n<li>通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源</li>\n<li>在<code>AsyncTask#onPostExecute()</code>里设置相应 ImageView 的属性</li>\n</ol>\n<p>再有，屏幕旋转的时候，有时候<em>会导致再次从网络取得数据</em>。为了防止不必要的网络访问，可能我们要自己实现 cache。</p>\n<p>还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。</p>\n<p><strong>这些问题使用 Volley 都可以很简单地解决</strong>。</p>\n<p>Volley 提供了如下的便捷功能：</p>\n<ul>\n<li>JSON，图像的异步下载</li>\n<li>网络请求序列</li>\n<li>网络请求优先级处理</li>\n<li>缓存</li>\n<li>多级别取消请求</li>\n<li>和 Activity 生命周期的联动</li>\n</ul>\n<p><strong>人生苦短，快用 Volley！</strong></p>\n<h1 id=\"how\">How</h1>\n\n<h2 id=\"compile\">集成</h2>\n\n<p>三种集成方法，其中后两种都是非官方渠道：</p>\n<ul>\n<li><p>编译源码导入项目</p>\n<ol>\n<li><p>从 Git 库 clone 最新版 </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://android.googlesource.com/platform/frameworks/volley</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译为 jar 包</p>\n</li>\n<li>导入项目</li>\n</ol>\n</li>\n<li><p>Gradle构建（非官方渠道，推荐）</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.mcxiaoke.volley:library:1.0.18'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Maven构建（非官方渠道）</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mcxiaoke.volley<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>library<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>&#123;latest-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"use\">使用</h2>\n\n<p>具体使用流程如下：</p>\n<ol>\n<li>在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象</li>\n<li>创建一个 Request 对象（子类实现）</li>\n<li>添加到序列</li>\n<li>开始序列</li>\n</ol>\n<p>在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：</p>\n<ul>\n<li>ClearCacheRequest</li>\n<li>ImageRequest</li>\n<li>JSONRequest</li>\n<li>StringRequest</li>\n</ul>\n<p>下面我们就对这几个子类进行介绍以及给出示例</p>\n<h3 id=\"ClearCacheRequest\"><a href=\"#ClearCacheRequest\" class=\"headerlink\" title=\"ClearCacheRequest\"></a>ClearCacheRequest</h3><p>虚构的请求，用于清空已有的缓存文件。</p>\n<p>ClearCacheRequest的优先级很高，为<code>Priority.IMMEDIATE</code>，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法<code>mCache.clear()</code>写在了<code>isCanceled()</code>方法体中，能最早的得到执行。</p>\n<h3 id=\"ImageRequest\"><a href=\"#ImageRequest\" class=\"headerlink\" title=\"ImageRequest\"></a>ImageRequest</h3><p>待完成</p>\n<h3 id=\"JSONRequest\"><a href=\"#JSONRequest\" class=\"headerlink\" title=\"JSONRequest\"></a>JSONRequest</h3><p>JSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。</p>\n<p>JsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。</p>\n<h3 id=\"StringRequest\"><a href=\"#StringRequest\" class=\"headerlink\" title=\"StringRequest\"></a>StringRequest</h3><p>StringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringRequestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Volley 请求队列对象</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RequestQueue mRequestQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_string_request);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 构造请求队列</span></span><br><span class=\"line\">        mRequestQueue = Volley.newRequestQueue(context);</span><br><span class=\"line\">        </span><br><span class=\"line\">        StringRequest request = <span class=\"keyword\">new</span> StringRequest(<span class=\"string\">\"http://www.baidu.com\"</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String response)</span> </span>&#123;</span><br><span class=\"line\">                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">             <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</span><br><span class=\"line\">                    Log.i(<span class=\"string\">\"net error\"</span>, error.getLocalizedMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        mRequestQueue.add(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        <span class=\"comment\">// 退出时取消所有网络请求</span></span><br><span class=\"line\">        mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义Request\"><a href=\"#自定义Request\" class=\"headerlink\" title=\"自定义Request\"></a>自定义Request</h3><p>一个简单的使用 Pull 解析的 XMLRequest</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XMLRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span>&lt;<span class=\"title\">XmlPullParser</span>&gt; </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Listener&lt;XmlPullParser&gt; mListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XMLRequest</span><span class=\"params\">(<span class=\"keyword\">int</span> method, String url, Listener&lt;XmlPullParser&gt; listener,</span><br><span class=\"line\">            ErrorListener errorListener)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(method, url, errorListener);  </span><br><span class=\"line\">        mListener = listener;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XMLRequest</span><span class=\"params\">(String url, Listener&lt;XmlPullParser&gt; listener, ErrorListener errorListener)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>(Method.GET, url, listener, errorListener);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Response&lt;XmlPullParser&gt; <span class=\"title\">parseNetworkResponse</span><span class=\"params\">(NetworkResponse response)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            String xmlString = <span class=\"keyword\">new</span> String(response.data,  </span><br><span class=\"line\">                    HttpHeaderParser.parseCharset(response.headers));  </span><br><span class=\"line\">            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</span><br><span class=\"line\">            XmlPullParser xmlPullParser = factory.newPullParser();</span><br><span class=\"line\">            xmlPullParser.setInput(<span class=\"keyword\">new</span> StringReader(xmlString));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(e));  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(e));  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverResponse</span><span class=\"params\">(XmlPullParser response)</span> </span>&#123;  </span><br><span class=\"line\">        mListener.onResponse(response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>parseNetworkResponse()</code>方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在<code>deliverResponse()</code>方法中则是将XmlPullParser对象进行回调。</p>\n<h2 id=\"lifecircle\">与生命周期的联动</h2>\n\n<p>当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。</p>\n<p>所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。</p>\n<ul>\n<li><p>可以针对某些个 request 做取消操作</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Request &lt;?&gt; req : mRequestQueue) &#123;</span><br><span class=\"line\">        req.cancel();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消这个队列里的所有请求</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以根据 RequestFilter 或者 Tag 来终止某些请求</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据 RequestFilter</span></span><br><span class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">new</span> RequestFilter() &#123;&#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 根据 Tag</span></span><br><span class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Android Design Support Library","date":"2015-08-22T03:24:30.000Z","_content":"Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。\n\n# 目录\n\n* [使用](#use)\n* [组件](#components)\n    * [Snackbar](#snackbar)\n    * [TextInputLayout](#textinputlayout)\n    * [Floating Action Button](#floatingactionbutton)\n    * [TabLayout](#tablayout)\n    * [NavigationView](#navigationview)\n    * [AppBarLayout](#appbarlayout)\n    * [CoordinatorLayout](#coordinatorlayout)\n    * [CollapsingToolbarLayout](#collapsingtoolbarlayout)\n* [总结](#summary)\n* [参考](#references)\n\n<h1 id=\"use\">使用</h1>\n\n要使用非常简单，在Gradle中添加如下语句即可\n\n```groovy\ncompile 'com.android.support:design:23.0.0'\n```\n\n<h1 id=\"components\">组件</h1>\n\n<h2 id=\"snackbar\">Snackbar</h2>\n\nSnackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。*其使用方式与Toast基本相同*。\n\n```java\nSnackbar.make(view, \"Snackbar comes out\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View v) {\n                                Toast.makeText(\n                                        MainActivity.this,\n                                        \"Toast comes out\",\n                                        Toast.LENGTH_SHORT).show();\n                            }\n                        }).show();\n```\n\n此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。\n\n显示效果：\n\n![Snackbar](http://7xl94a.com1.z0.glb.clouddn.com/123123.png)\n\n官网API：[Snackbar API][snackbar api]\n\n<h2 id=\"textinputlayout\">TextInputLayout</h2>\n\n通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。\n\n使用方法：\n\n```xml\n<android.support.design.widget.TextInputLayout\n        android:id=\"@+id/til_pwd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n</android.support.design.widget.TextInputLayout>\n```\n\n在代码中监听：\n\n```java\nTextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);\nEditText editText = textInputLayout.getEditText();\ntextInputLayout.setHint(\"Password\");\n\neditText.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n        if (s.length() > 4) {\n            textInputLayout.setError(\"Password error\");\n            textInputLayout.setErrorEnabled(true);\n        } else {\n            textInputLayout.setErrorEnabled(false);\n        }\n    }\n\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n```\n\n**注意**：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：\n\n```xml\n<item name=\"colorAccent\">#1743b7</item>\n```\n\n显示效果：\n\n![textinputlayout1](http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png)\n\n![textinputlayout2](http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png)\n\n官网API：[TextInputLayout API][textinputlayout api]\n\n<h2 id=\"floatingactionbutton\">Floating Action Button</h2>\n\nFloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：\n\n![floatingactionbutton](http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png)\n\nFloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。\n\n```xml\n<android.support.design.widget.FloatingActionButton\n        android:id=\"@+id/fab\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"@dimen/fab_margin\"\n        android:src=\"@drawable/ic_done\"/>\n```\n\n通过指定`layout_gravity`就可以指定它的位置。 \n\n同样，你可以通过指定`anchor`，即显示位置的锚点：\n\n```xml\n<android.support.design.widget.FloatingActionButton\n        android:layout_height=\"wrap_content\"\n        android:layout_width=\"wrap_content\"\n        app:layout_anchor=\"@id/app_bar\"\n        app:layout_anchorGravity=\"bottom|right|end\"\n        android:src=\"@android:drawable/ic_done\"\n        android:layout_margin=\"15dp\"\n        android:clickable=\"true\"/>\n```\n\n除了一般大小的悬浮操作按钮，它还支持 mini size（`fabSize=\"mini\"`）。FloatingActionButton 继承自 ImageView，你可以使用`android:src`或者 ImageView 的任意方法，比如`setImageDrawable()`来设置 FloatingActionButton 里面的图标。\n\n官网API：[Floating Action Button][floatingactionbutton api]\n\n<h2 id=\"tablayout\">TabLayout</h2>\n\nTabLayout既实现了**固定的选项卡** - view的宽度平均分配，也实现了**可滚动的选项卡** - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：\n\n```java\nTabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);\ntabLayout.addTab(tabLayout.newTab().setText(\"tab1\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"tab2\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"tab3\"));\n```\n\n通常 TabLayout 都会和 ViewPager 配合起来使用：\n\n```java\nmViewPager = (ViewPager) findViewById(R.id.viewpager);\n// 设置 ViewPager 的数据等\nsetupViewPager();\nTabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);\ntabLayout.setupWithViewPager(mViewPager);\n```\n\n显示效果：\n\n![tablayout](http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png)\n\n官网API：[TabLayout API][tablayout api]\n\n<h2 id=\"navigationview\">NavigationView</h2>\n\nNavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：\n\n```xml\n<android.support.v4.widget.DrawerLayout\n    android:id=\"@+id/dl_main_drawer\"\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\">\n\n    <!-- 你的内容布局-->\n    <include layout=\"@layout/navigation_content\"/>\n\n    <android.support.design.widget.NavigationView\n        android:id=\"@+id/nv_main_navigation\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:headerLayout=\"@layout/navigation_header\"\n        app:menu=\"@menu/drawer_view\"/>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n其中最重要的就是这两个属性：`app:headerLayout`和`app:menu`\n\n通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：\n\n![navigationview](http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png)\n\n其中最上面的布局就是`app:headerLayout`所指定的头布局：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"200dp\"\n              android:background=\"?attr/colorPrimaryDark\"\n              android:gravity=\"center\"\n              android:orientation=\"vertical\"\n              android:padding=\"16dp\"\n              android:theme=\"@style/ThemeOverlay.AppCompat.Dark\">\n\n    <ImageView\n        android:layout_width=\"100dp\"\n        android:layout_height=\"100dp\"\n        android:layout_marginTop=\"16dp\"\n        android:background=\"@drawable/ic_user\"/>\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:gravity=\"center\"\n        android:text=\"XuYisheng\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\n        android:textSize=\"20sp\"/>\n\n</LinearLayout>\n```\n\n而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/nav_home\"\n            android:icon=\"@drawable/ic_dashboard\"\n            android:title=\"CC Talk\"/>\n        <item\n            android:id=\"@+id/nav_messages\"\n            android:icon=\"@drawable/ic_event\"\n            android:title=\"HJ Class\"/>\n        <item\n            android:id=\"@+id/nav_friends\"\n            android:icon=\"@drawable/ic_headset\"\n            android:title=\"Words\"/>\n        <item\n            android:id=\"@+id/nav_discussion\"\n            android:icon=\"@drawable/ic_forum\"\n            android:title=\"Big HJ\"/>\n    </group>\n\n    <item android:title=\"Version\">\n        <menu>\n            <item\n                android:icon=\"@drawable/ic_dashboard\"\n                android:title=\"Android\"/>\n            <item\n                android:icon=\"@drawable/ic_dashboard\"\n                android:title=\"iOS\"/>\n        </menu>\n    </item>\n\n</menu>\n```\n\n你可以通过设置一个`OnNavigationItemSelectedListener`，使用其`setNavigationItemSelectedListener()`来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：\n\n```java\nprivate void setupDrawerContent(NavigationView navigationView) {\n    navigationView.setNavigationItemSelectedListener(\n        new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(MenuItem menuItem) {\n                menuItem.setChecked(true);\n                mDrawerLayout.closeDrawers();\n                return true;\n            }\n        }\n    });\n}\n```\n\n官网API：[NavigationView API][navigationview api]\n\n<h2 id=\"appbarlayout\">AppBarLayout</h2>\n\nAppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。\n\n![appbarlayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png)\n\n这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。\n\n```xml\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n        <android.support.design.widget.TabLayout\n            android:id=\"@+id/tabs\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n    </android.support.design.widget.AppBarLayout>\n```\n\n官网API：[AppBarLayout API][appbarlayout api]\n\n<h2 id=\"coordinatorlayout\">CoordinatorLayout</h2>\n\nCoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。\n\n### Floating View\n\nMaterial Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：\n\n```xml\nandroid:layout_gravity=\"end|bottom\"\n```\n\n来指定显示的位置。同时，它还提供了`layout_anchor`来供你设置显示坐标的锚点：\n\n```xml\napp:layout_anchor=\"@id/appbar\"\n```\n\n### 创建滚动\n\nCoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。\n\n> 一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给`Snackbar.make()`，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。\n\n官方的例子很好的说明了这一点：\n\n```xml\n<android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n     <! -- Your Scrollable View -->\n    <android.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" />\n\n    <android.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <android.support.v7.widget.Toolbar\n                  ...\n                  app:layout_scrollFlags=\"scroll|enterAlways\">\n\n            <android.support.design.widget.TabLayout\n                  ...\n                  app:layout_scrollFlags=\"scroll|enterAlways\">\n     </android.support.design.widget.AppBarLayout>\n</android.support.design.widget.CoordinatorLayout>\n```\n\n其中，一个可以滚动的组件，例如 RecyclerView、ListView（**注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的**）。如果：\n\n1. 给这个可滚动组件设置了`layout_behavior`\n2. 给另一个控件设置了`layout_scrollFlags`\n\n那么，当设置了`layout_behavior`的控件滑动时，就会触发设置了`layout_scrollFlags`的控件发生状态的改变。 \n\n![coordinatorlayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif)\n\n设置的`layout_scrollFlags`有如下几种选项：\n\n* scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。\n* enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。\n* enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。\n* exitUntilCollapsed: 向上滚动时收缩 View。\n\n需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。\n\n例如我们前面例子中的，也就是这种模式：\n\n```xml\napp:layout_scrollFlags=\"scroll|enterAlways\"\n```\n\n> PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。\n\n官网API：[CoordinatorLayout][coordinatorlayout]\n\n<h2 id=\"collapsingtoolbarlayout\">CollapsingToolbarLayout</h2>\n\nCollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。\n\n这里先看一个例子：\n\n```xml\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/detail_backdrop_height\"\n        android:fitsSystemWindows=\"true\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.design.widget.CollapsingToolbarLayout\n            android:id=\"@+id/collapsing_toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:fitsSystemWindows=\"true\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:expandedTitleMarginEnd=\"64dp\"\n            app:expandedTitleMarginStart=\"48dp\"\n            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n\n            <ImageView\n                android:id=\"@+id/backdrop\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:fitsSystemWindows=\"true\"\n                android:scaleType=\"centerCrop\"\n                android:src=\"@drawable/ic_banner\"\n                app:layout_collapseMode=\"parallax\"/>\n\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                app:layout_collapseMode=\"pin\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n        </android.support.design.widget.CollapsingToolbarLayout>\n\n    </android.support.design.widget.AppBarLayout>\n```\n\n我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的`layout_collapseMode`。\n\n这里使用了 CollapsingToolbarLayout 的`app:layout_collapseMode=\"pin\"`来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用`setTitle()`，而不是在 Toolbar 上。\n\n除了固定住 view，你还可以使用`app:layout_collapseMode=\"parallax\"`（以及使用`app:layout_collapseParallaxMultiplier=\"0.7\"`来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的`app:contentScrim=\"?attr/colorPrimary\"`属性一起配合更完美。\n\n在这个例子中，我们同样设置了：\n\n```xml\napp:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n```\n\n来接收一个：\n\n```xml\napp:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n```\n\n这样才能产生滚动效果，而通过`layout_collapseMode`，我们就设置了滚动时内容的变化效果。\n\n![CollapsingToolbarLayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif)\n\n### CoordinatorLayout与自定义view\n\n有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以`Coordinator.Behavior`的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过`onDependentViewChanged()`接收回调。\n\n可以使用`CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)`注解或者在布局中使用`app:layout_behavior=\"com.example.app.你的View$Behavior\"`属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。\n\n官方API：[CollapsingToolbarLayout][collapsingtoolbarlayout]\n\n<h2 id=\"summary\">总结</h2>\n\n研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。\n\n<h2 id=\"references\">参考</h2>\n\nThanks to [《Android Design Support Library使用详解》][article]\n\n\n[snackbar api]: http://developer.android.com/reference/android/support/design/widget/Snackbar.html\n[textinputlayout api]: http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html\n[floatingactionbutton api]: http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html\n[tablayout api]: http://developer.android.com/reference/android/support/design/widget/TabLayout.html\n[navigationview api]: http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html\n[appbarlayout api]: http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html\n[coordinatorlayout]: http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html\n[collapsingtoolbarlayout]: http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html\n[article]: http://blog.csdn.net/eclipsexys/article/details/46349721","source":"_posts/2015-08-22-Android Design Support Library.md","raw":"---\ntitle: Android Design Support Library\ndate: 2015-08-22 11:24:30\ntags: [Android]\n---\nGoogle 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。\n\n# 目录\n\n* [使用](#use)\n* [组件](#components)\n    * [Snackbar](#snackbar)\n    * [TextInputLayout](#textinputlayout)\n    * [Floating Action Button](#floatingactionbutton)\n    * [TabLayout](#tablayout)\n    * [NavigationView](#navigationview)\n    * [AppBarLayout](#appbarlayout)\n    * [CoordinatorLayout](#coordinatorlayout)\n    * [CollapsingToolbarLayout](#collapsingtoolbarlayout)\n* [总结](#summary)\n* [参考](#references)\n\n<h1 id=\"use\">使用</h1>\n\n要使用非常简单，在Gradle中添加如下语句即可\n\n```groovy\ncompile 'com.android.support:design:23.0.0'\n```\n\n<h1 id=\"components\">组件</h1>\n\n<h2 id=\"snackbar\">Snackbar</h2>\n\nSnackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。*其使用方式与Toast基本相同*。\n\n```java\nSnackbar.make(view, \"Snackbar comes out\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View v) {\n                                Toast.makeText(\n                                        MainActivity.this,\n                                        \"Toast comes out\",\n                                        Toast.LENGTH_SHORT).show();\n                            }\n                        }).show();\n```\n\n此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。\n\n显示效果：\n\n![Snackbar](http://7xl94a.com1.z0.glb.clouddn.com/123123.png)\n\n官网API：[Snackbar API][snackbar api]\n\n<h2 id=\"textinputlayout\">TextInputLayout</h2>\n\n通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。\n\n使用方法：\n\n```xml\n<android.support.design.widget.TextInputLayout\n        android:id=\"@+id/til_pwd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n</android.support.design.widget.TextInputLayout>\n```\n\n在代码中监听：\n\n```java\nTextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);\nEditText editText = textInputLayout.getEditText();\ntextInputLayout.setHint(\"Password\");\n\neditText.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n        if (s.length() > 4) {\n            textInputLayout.setError(\"Password error\");\n            textInputLayout.setErrorEnabled(true);\n        } else {\n            textInputLayout.setErrorEnabled(false);\n        }\n    }\n\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n```\n\n**注意**：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：\n\n```xml\n<item name=\"colorAccent\">#1743b7</item>\n```\n\n显示效果：\n\n![textinputlayout1](http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png)\n\n![textinputlayout2](http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png)\n\n官网API：[TextInputLayout API][textinputlayout api]\n\n<h2 id=\"floatingactionbutton\">Floating Action Button</h2>\n\nFloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：\n\n![floatingactionbutton](http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png)\n\nFloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。\n\n```xml\n<android.support.design.widget.FloatingActionButton\n        android:id=\"@+id/fab\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"@dimen/fab_margin\"\n        android:src=\"@drawable/ic_done\"/>\n```\n\n通过指定`layout_gravity`就可以指定它的位置。 \n\n同样，你可以通过指定`anchor`，即显示位置的锚点：\n\n```xml\n<android.support.design.widget.FloatingActionButton\n        android:layout_height=\"wrap_content\"\n        android:layout_width=\"wrap_content\"\n        app:layout_anchor=\"@id/app_bar\"\n        app:layout_anchorGravity=\"bottom|right|end\"\n        android:src=\"@android:drawable/ic_done\"\n        android:layout_margin=\"15dp\"\n        android:clickable=\"true\"/>\n```\n\n除了一般大小的悬浮操作按钮，它还支持 mini size（`fabSize=\"mini\"`）。FloatingActionButton 继承自 ImageView，你可以使用`android:src`或者 ImageView 的任意方法，比如`setImageDrawable()`来设置 FloatingActionButton 里面的图标。\n\n官网API：[Floating Action Button][floatingactionbutton api]\n\n<h2 id=\"tablayout\">TabLayout</h2>\n\nTabLayout既实现了**固定的选项卡** - view的宽度平均分配，也实现了**可滚动的选项卡** - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：\n\n```java\nTabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);\ntabLayout.addTab(tabLayout.newTab().setText(\"tab1\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"tab2\"));\ntabLayout.addTab(tabLayout.newTab().setText(\"tab3\"));\n```\n\n通常 TabLayout 都会和 ViewPager 配合起来使用：\n\n```java\nmViewPager = (ViewPager) findViewById(R.id.viewpager);\n// 设置 ViewPager 的数据等\nsetupViewPager();\nTabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);\ntabLayout.setupWithViewPager(mViewPager);\n```\n\n显示效果：\n\n![tablayout](http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png)\n\n官网API：[TabLayout API][tablayout api]\n\n<h2 id=\"navigationview\">NavigationView</h2>\n\nNavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：\n\n```xml\n<android.support.v4.widget.DrawerLayout\n    android:id=\"@+id/dl_main_drawer\"\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\">\n\n    <!-- 你的内容布局-->\n    <include layout=\"@layout/navigation_content\"/>\n\n    <android.support.design.widget.NavigationView\n        android:id=\"@+id/nv_main_navigation\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:headerLayout=\"@layout/navigation_header\"\n        app:menu=\"@menu/drawer_view\"/>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n其中最重要的就是这两个属性：`app:headerLayout`和`app:menu`\n\n通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：\n\n![navigationview](http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png)\n\n其中最上面的布局就是`app:headerLayout`所指定的头布局：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"200dp\"\n              android:background=\"?attr/colorPrimaryDark\"\n              android:gravity=\"center\"\n              android:orientation=\"vertical\"\n              android:padding=\"16dp\"\n              android:theme=\"@style/ThemeOverlay.AppCompat.Dark\">\n\n    <ImageView\n        android:layout_width=\"100dp\"\n        android:layout_height=\"100dp\"\n        android:layout_marginTop=\"16dp\"\n        android:background=\"@drawable/ic_user\"/>\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:gravity=\"center\"\n        android:text=\"XuYisheng\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\n        android:textSize=\"20sp\"/>\n\n</LinearLayout>\n```\n\n而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/nav_home\"\n            android:icon=\"@drawable/ic_dashboard\"\n            android:title=\"CC Talk\"/>\n        <item\n            android:id=\"@+id/nav_messages\"\n            android:icon=\"@drawable/ic_event\"\n            android:title=\"HJ Class\"/>\n        <item\n            android:id=\"@+id/nav_friends\"\n            android:icon=\"@drawable/ic_headset\"\n            android:title=\"Words\"/>\n        <item\n            android:id=\"@+id/nav_discussion\"\n            android:icon=\"@drawable/ic_forum\"\n            android:title=\"Big HJ\"/>\n    </group>\n\n    <item android:title=\"Version\">\n        <menu>\n            <item\n                android:icon=\"@drawable/ic_dashboard\"\n                android:title=\"Android\"/>\n            <item\n                android:icon=\"@drawable/ic_dashboard\"\n                android:title=\"iOS\"/>\n        </menu>\n    </item>\n\n</menu>\n```\n\n你可以通过设置一个`OnNavigationItemSelectedListener`，使用其`setNavigationItemSelectedListener()`来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：\n\n```java\nprivate void setupDrawerContent(NavigationView navigationView) {\n    navigationView.setNavigationItemSelectedListener(\n        new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(MenuItem menuItem) {\n                menuItem.setChecked(true);\n                mDrawerLayout.closeDrawers();\n                return true;\n            }\n        }\n    });\n}\n```\n\n官网API：[NavigationView API][navigationview api]\n\n<h2 id=\"appbarlayout\">AppBarLayout</h2>\n\nAppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。\n\n![appbarlayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png)\n\n这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。\n\n```xml\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n        <android.support.design.widget.TabLayout\n            android:id=\"@+id/tabs\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n    </android.support.design.widget.AppBarLayout>\n```\n\n官网API：[AppBarLayout API][appbarlayout api]\n\n<h2 id=\"coordinatorlayout\">CoordinatorLayout</h2>\n\nCoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。\n\n### Floating View\n\nMaterial Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：\n\n```xml\nandroid:layout_gravity=\"end|bottom\"\n```\n\n来指定显示的位置。同时，它还提供了`layout_anchor`来供你设置显示坐标的锚点：\n\n```xml\napp:layout_anchor=\"@id/appbar\"\n```\n\n### 创建滚动\n\nCoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。\n\n> 一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给`Snackbar.make()`，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。\n\n官方的例子很好的说明了这一点：\n\n```xml\n<android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n     <! -- Your Scrollable View -->\n    <android.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" />\n\n    <android.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <android.support.v7.widget.Toolbar\n                  ...\n                  app:layout_scrollFlags=\"scroll|enterAlways\">\n\n            <android.support.design.widget.TabLayout\n                  ...\n                  app:layout_scrollFlags=\"scroll|enterAlways\">\n     </android.support.design.widget.AppBarLayout>\n</android.support.design.widget.CoordinatorLayout>\n```\n\n其中，一个可以滚动的组件，例如 RecyclerView、ListView（**注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的**）。如果：\n\n1. 给这个可滚动组件设置了`layout_behavior`\n2. 给另一个控件设置了`layout_scrollFlags`\n\n那么，当设置了`layout_behavior`的控件滑动时，就会触发设置了`layout_scrollFlags`的控件发生状态的改变。 \n\n![coordinatorlayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif)\n\n设置的`layout_scrollFlags`有如下几种选项：\n\n* scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。\n* enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。\n* enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。\n* exitUntilCollapsed: 向上滚动时收缩 View。\n\n需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。\n\n例如我们前面例子中的，也就是这种模式：\n\n```xml\napp:layout_scrollFlags=\"scroll|enterAlways\"\n```\n\n> PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。\n\n官网API：[CoordinatorLayout][coordinatorlayout]\n\n<h2 id=\"collapsingtoolbarlayout\">CollapsingToolbarLayout</h2>\n\nCollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。\n\n这里先看一个例子：\n\n```xml\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/detail_backdrop_height\"\n        android:fitsSystemWindows=\"true\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.design.widget.CollapsingToolbarLayout\n            android:id=\"@+id/collapsing_toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:fitsSystemWindows=\"true\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:expandedTitleMarginEnd=\"64dp\"\n            app:expandedTitleMarginStart=\"48dp\"\n            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n\n            <ImageView\n                android:id=\"@+id/backdrop\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:fitsSystemWindows=\"true\"\n                android:scaleType=\"centerCrop\"\n                android:src=\"@drawable/ic_banner\"\n                app:layout_collapseMode=\"parallax\"/>\n\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                app:layout_collapseMode=\"pin\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n        </android.support.design.widget.CollapsingToolbarLayout>\n\n    </android.support.design.widget.AppBarLayout>\n```\n\n我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的`layout_collapseMode`。\n\n这里使用了 CollapsingToolbarLayout 的`app:layout_collapseMode=\"pin\"`来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用`setTitle()`，而不是在 Toolbar 上。\n\n除了固定住 view，你还可以使用`app:layout_collapseMode=\"parallax\"`（以及使用`app:layout_collapseParallaxMultiplier=\"0.7\"`来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的`app:contentScrim=\"?attr/colorPrimary\"`属性一起配合更完美。\n\n在这个例子中，我们同样设置了：\n\n```xml\napp:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n```\n\n来接收一个：\n\n```xml\napp:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n```\n\n这样才能产生滚动效果，而通过`layout_collapseMode`，我们就设置了滚动时内容的变化效果。\n\n![CollapsingToolbarLayout](http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif)\n\n### CoordinatorLayout与自定义view\n\n有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以`Coordinator.Behavior`的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过`onDependentViewChanged()`接收回调。\n\n可以使用`CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)`注解或者在布局中使用`app:layout_behavior=\"com.example.app.你的View$Behavior\"`属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。\n\n官方API：[CollapsingToolbarLayout][collapsingtoolbarlayout]\n\n<h2 id=\"summary\">总结</h2>\n\n研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。\n\n<h2 id=\"references\">参考</h2>\n\nThanks to [《Android Design Support Library使用详解》][article]\n\n\n[snackbar api]: http://developer.android.com/reference/android/support/design/widget/Snackbar.html\n[textinputlayout api]: http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html\n[floatingactionbutton api]: http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html\n[tablayout api]: http://developer.android.com/reference/android/support/design/widget/TabLayout.html\n[navigationview api]: http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html\n[appbarlayout api]: http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html\n[coordinatorlayout]: http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html\n[collapsingtoolbarlayout]: http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html\n[article]: http://blog.csdn.net/eclipsexys/article/details/46349721","slug":"Android Design Support Library","published":1,"updated":"2016-03-03T16:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcj3xmi0008phe9o9kg4pmm","content":"<p>Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#use\">使用</a></li>\n<li><a href=\"#components\">组件</a><ul>\n<li><a href=\"#snackbar\">Snackbar</a></li>\n<li><a href=\"#textinputlayout\">TextInputLayout</a></li>\n<li><a href=\"#floatingactionbutton\">Floating Action Button</a></li>\n<li><a href=\"#tablayout\">TabLayout</a></li>\n<li><a href=\"#navigationview\">NavigationView</a></li>\n<li><a href=\"#appbarlayout\">AppBarLayout</a></li>\n<li><a href=\"#coordinatorlayout\">CoordinatorLayout</a></li>\n<li><a href=\"#collapsingtoolbarlayout\">CollapsingToolbarLayout</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">总结</a></li>\n<li><a href=\"#references\">参考</a></li>\n</ul>\n<h1 id=\"use\">使用</h1>\n\n<p>要使用非常简单，在Gradle中添加如下语句即可</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.android.support:design:23.0.0'</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"components\">组件</h1>\n\n<h2 id=\"snackbar\">Snackbar</h2>\n\n<p>Snackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。<em>其使用方式与Toast基本相同</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snackbar.make(view, <span class=\"string\">\"Snackbar comes out\"</span>, Snackbar.LENGTH_LONG)</span><br><span class=\"line\">                        .setAction(<span class=\"string\">\"Action\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                                Toast.makeText(</span><br><span class=\"line\">                                        MainActivity.<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                                        <span class=\"string\">\"Toast comes out\"</span>,</span><br><span class=\"line\">                                        Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;).show();</span><br></pre></td></tr></table></figure>\n<p>此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。</p>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/123123.png\" alt=\"Snackbar\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/Snackbar.html\" target=\"_blank\" rel=\"external\">Snackbar API</a></p>\n<h2 id=\"textinputlayout\">TextInputLayout</h2>\n\n<p>通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。</p>\n<p>使用方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/til_pwd\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在代码中监听：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);</span><br><span class=\"line\">EditText editText = textInputLayout.getEditText();</span><br><span class=\"line\">textInputLayout.setHint(<span class=\"string\">\"Password\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">editText.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            textInputLayout.setError(<span class=\"string\">\"Password error\"</span>);</span><br><span class=\"line\">            textInputLayout.setErrorEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            textInputLayout.setErrorEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>#1743b7<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png\" alt=\"textinputlayout1\"></p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png\" alt=\"textinputlayout2\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html\" target=\"_blank\" rel=\"external\">TextInputLayout API</a></p>\n<h2 id=\"floatingactionbutton\">Floating Action Button</h2>\n\n<p>FloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png\" alt=\"floatingactionbutton\"></p>\n<p>FloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"end|bottom\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"@dimen/fab_margin\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_done\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过指定<code>layout_gravity</code>就可以指定它的位置。 </p>\n<p>同样，你可以通过指定<code>anchor</code>，即显示位置的锚点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:layout_anchor</span>=<span class=\"string\">\"@id/app_bar\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:layout_anchorGravity</span>=<span class=\"string\">\"bottom|right|end\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@android:drawable/ic_done\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"15dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>除了一般大小的悬浮操作按钮，它还支持 mini size（<code>fabSize=&quot;mini&quot;</code>）。FloatingActionButton 继承自 ImageView，你可以使用<code>android:src</code>或者 ImageView 的任意方法，比如<code>setImageDrawable()</code>来设置 FloatingActionButton 里面的图标。</p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html\" target=\"_blank\" rel=\"external\">Floating Action Button</a></p>\n<h2 id=\"tablayout\">TabLayout</h2>\n\n<p>TabLayout既实现了<strong>固定的选项卡</strong> - view的宽度平均分配，也实现了<strong>可滚动的选项卡</strong> - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</span><br><span class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab1\"</span>));</span><br><span class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab2\"</span>));</span><br><span class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab3\"</span>));</span><br></pre></td></tr></table></figure>\n<p>通常 TabLayout 都会和 ViewPager 配合起来使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mViewPager = (ViewPager) findViewById(R.id.viewpager);</span><br><span class=\"line\"><span class=\"comment\">// 设置 ViewPager 的数据等</span></span><br><span class=\"line\">setupViewPager();</span><br><span class=\"line\">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</span><br><span class=\"line\">tabLayout.setupWithViewPager(mViewPager);</span><br></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png\" alt=\"tablayout\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/TabLayout.html\" target=\"_blank\" rel=\"external\">TabLayout API</a></p>\n<h2 id=\"navigationview\">NavigationView</h2>\n\n<p>NavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dl_main_drawer\"</span></span><br><span class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 你的内容布局--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/navigation_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nv_main_navigation\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/navigation_header\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/drawer_view\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中最重要的就是这两个属性：<code>app:headerLayout</code>和<code>app:menu</code></p>\n<p>通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png\" alt=\"navigationview\"></p>\n<p>其中最上面的布局就是<code>app:headerLayout</code>所指定的头布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimaryDark\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/ic_user\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"XuYisheng\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"@style/TextAppearance.AppCompat.Body1\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20sp\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_home\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"CC Talk\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_messages\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_event\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"HJ Class\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_friends\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_headset\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Words\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_discussion\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_forum\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Big HJ\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:title</span>=<span class=\"string\">\"Version\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">menu</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">                <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></span><br><span class=\"line\">                <span class=\"attr\">android:title</span>=<span class=\"string\">\"Android\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">                <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></span><br><span class=\"line\">                <span class=\"attr\">android:title</span>=<span class=\"string\">\"iOS\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>你可以通过设置一个<code>OnNavigationItemSelectedListener</code>，使用其<code>setNavigationItemSelectedListener()</code>来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupDrawerContent</span><span class=\"params\">(NavigationView navigationView)</span> </span>&#123;</span><br><span class=\"line\">    navigationView.setNavigationItemSelectedListener(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(MenuItem menuItem)</span> </span>&#123;</span><br><span class=\"line\">                menuItem.setChecked(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                mDrawerLayout.closeDrawers();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>官网API：<a href=\"http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html\" target=\"_blank\" rel=\"external\">NavigationView API</a></p>\n<h2 id=\"appbarlayout\">AppBarLayout</h2>\n\n<p>AppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png\" alt=\"appbarlayout\"></p>\n<p>这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html\" target=\"_blank\" rel=\"external\">AppBarLayout API</a></p>\n<h2 id=\"coordinatorlayout\">CoordinatorLayout</h2>\n\n<p>CoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。</p>\n<h3 id=\"Floating-View\"><a href=\"#Floating-View\" class=\"headerlink\" title=\"Floating View\"></a>Floating View</h3><p>Material Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:layout_gravity=\"end|bottom\"</span><br></pre></td></tr></table></figure>\n<p>来指定显示的位置。同时，它还提供了<code>layout_anchor</code>来供你设置显示坐标的锚点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_anchor=\"@id/appbar\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建滚动\"><a href=\"#创建滚动\" class=\"headerlink\" title=\"创建滚动\"></a>创建滚动</h3><p>CoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。</p>\n<blockquote>\n<p>一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给<code>Snackbar.make()</code>，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。</p>\n</blockquote>\n<p>官方的例子很好的说明了这一点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span><br><span class=\"line\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">Your</span> <span class=\"attr\">Scrollable</span> <span class=\"attr\">View</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span><br><span class=\"line\">                  <span class=\"attr\">...</span></span><br><span class=\"line\">                  <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span><br><span class=\"line\">                  <span class=\"attr\">...</span></span><br><span class=\"line\">                  <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中，一个可以滚动的组件，例如 RecyclerView、ListView（<strong>注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的</strong>）。如果：</p>\n<ol>\n<li>给这个可滚动组件设置了<code>layout_behavior</code></li>\n<li>给另一个控件设置了<code>layout_scrollFlags</code></li>\n</ol>\n<p>那么，当设置了<code>layout_behavior</code>的控件滑动时，就会触发设置了<code>layout_scrollFlags</code>的控件发生状态的改变。 </p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif\" alt=\"coordinatorlayout\"></p>\n<p>设置的<code>layout_scrollFlags</code>有如下几种选项：</p>\n<ul>\n<li>scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。</li>\n<li>enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。</li>\n<li>enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</li>\n<li>exitUntilCollapsed: 向上滚动时收缩 View。</li>\n</ul>\n<p>需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。</p>\n<p>例如我们前面例子中的，也就是这种模式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_scrollFlags=\"scroll|enterAlways\"</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。</p>\n</blockquote>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html\" target=\"_blank\" rel=\"external\">CoordinatorLayout</a></p>\n<h2 id=\"collapsingtoolbarlayout\">CollapsingToolbarLayout</h2>\n\n<p>CollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。</p>\n<p>这里先看一个例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/detail_backdrop_height\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsing_toolbar\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:expandedTitleMarginEnd</span>=<span class=\"string\">\"64dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:expandedTitleMarginStart</span>=<span class=\"string\">\"48dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|exitUntilCollapsed\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/backdrop\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_banner\"</span></span><br><span class=\"line\">            <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span><br><span class=\"line\">            <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span></span><br><span class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的<code>layout_collapseMode</code>。</p>\n<p>这里使用了 CollapsingToolbarLayout 的<code>app:layout_collapseMode=&quot;pin&quot;</code>来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用<code>setTitle()</code>，而不是在 Toolbar 上。</p>\n<p>除了固定住 view，你还可以使用<code>app:layout_collapseMode=&quot;parallax&quot;</code>（以及使用<code>app:layout_collapseParallaxMultiplier=&quot;0.7&quot;</code>来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的<code>app:contentScrim=&quot;?attr/colorPrimary&quot;</code>属性一起配合更完美。</p>\n<p>在这个例子中，我们同样设置了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"&gt;</span><br></pre></td></tr></table></figure>\n<p>来接收一个：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt;</span><br></pre></td></tr></table></figure>\n<p>这样才能产生滚动效果，而通过<code>layout_collapseMode</code>，我们就设置了滚动时内容的变化效果。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif\" alt=\"CollapsingToolbarLayout\"></p>\n<h3 id=\"CoordinatorLayout与自定义view\"><a href=\"#CoordinatorLayout与自定义view\" class=\"headerlink\" title=\"CoordinatorLayout与自定义view\"></a>CoordinatorLayout与自定义view</h3><p>有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以<code>Coordinator.Behavior</code>的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过<code>onDependentViewChanged()</code>接收回调。</p>\n<p>可以使用<code>CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)</code>注解或者在布局中使用<code>app:layout_behavior=&quot;com.example.app.你的View$Behavior&quot;</code>属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。</p>\n<p>官方API：<a href=\"http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html\" target=\"_blank\" rel=\"external\">CollapsingToolbarLayout</a></p>\n<h2 id=\"summary\">总结</h2>\n\n<p>研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。</p>\n<h2 id=\"references\">参考</h2>\n\n<p>Thanks to <a href=\"http://blog.csdn.net/eclipsexys/article/details/46349721\" target=\"_blank\" rel=\"external\">《Android Design Support Library使用详解》</a></p>\n","excerpt":"","more":"<p>Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#use\">使用</a></li>\n<li><a href=\"#components\">组件</a><ul>\n<li><a href=\"#snackbar\">Snackbar</a></li>\n<li><a href=\"#textinputlayout\">TextInputLayout</a></li>\n<li><a href=\"#floatingactionbutton\">Floating Action Button</a></li>\n<li><a href=\"#tablayout\">TabLayout</a></li>\n<li><a href=\"#navigationview\">NavigationView</a></li>\n<li><a href=\"#appbarlayout\">AppBarLayout</a></li>\n<li><a href=\"#coordinatorlayout\">CoordinatorLayout</a></li>\n<li><a href=\"#collapsingtoolbarlayout\">CollapsingToolbarLayout</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">总结</a></li>\n<li><a href=\"#references\">参考</a></li>\n</ul>\n<h1 id=\"use\">使用</h1>\n\n<p>要使用非常简单，在Gradle中添加如下语句即可</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.android.support:design:23.0.0'</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"components\">组件</h1>\n\n<h2 id=\"snackbar\">Snackbar</h2>\n\n<p>Snackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。<em>其使用方式与Toast基本相同</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snackbar.make(view, <span class=\"string\">\"Snackbar comes out\"</span>, Snackbar.LENGTH_LONG)</span><br><span class=\"line\">                        .setAction(<span class=\"string\">\"Action\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                                Toast.makeText(</span><br><span class=\"line\">                                        MainActivity.<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                                        <span class=\"string\">\"Toast comes out\"</span>,</span><br><span class=\"line\">                                        Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;).show();</span><br></pre></td></tr></table></figure>\n<p>此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。</p>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/123123.png\" alt=\"Snackbar\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/Snackbar.html\">Snackbar API</a></p>\n<h2 id=\"textinputlayout\">TextInputLayout</h2>\n\n<p>通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。</p>\n<p>使用方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/til_pwd\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在代码中监听：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);</span><br><span class=\"line\">EditText editText = textInputLayout.getEditText();</span><br><span class=\"line\">textInputLayout.setHint(<span class=\"string\">\"Password\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">editText.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            textInputLayout.setError(<span class=\"string\">\"Password error\"</span>);</span><br><span class=\"line\">            textInputLayout.setErrorEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            textInputLayout.setErrorEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>#1743b7<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png\" alt=\"textinputlayout1\"></p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png\" alt=\"textinputlayout2\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html\">TextInputLayout API</a></p>\n<h2 id=\"floatingactionbutton\">Floating Action Button</h2>\n\n<p>FloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png\" alt=\"floatingactionbutton\"></p>\n<p>FloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"end|bottom\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"@dimen/fab_margin\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_done\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过指定<code>layout_gravity</code>就可以指定它的位置。 </p>\n<p>同样，你可以通过指定<code>anchor</code>，即显示位置的锚点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:layout_anchor</span>=<span class=\"string\">\"@id/app_bar\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:layout_anchorGravity</span>=<span class=\"string\">\"bottom|right|end\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@android:drawable/ic_done\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"15dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>除了一般大小的悬浮操作按钮，它还支持 mini size（<code>fabSize=&quot;mini&quot;</code>）。FloatingActionButton 继承自 ImageView，你可以使用<code>android:src</code>或者 ImageView 的任意方法，比如<code>setImageDrawable()</code>来设置 FloatingActionButton 里面的图标。</p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html\">Floating Action Button</a></p>\n<h2 id=\"tablayout\">TabLayout</h2>\n\n<p>TabLayout既实现了<strong>固定的选项卡</strong> - view的宽度平均分配，也实现了<strong>可滚动的选项卡</strong> - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</span><br><span class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab1\"</span>));</span><br><span class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab2\"</span>));</span><br><span class=\"line\">tabLayout.addTab(tabLayout.newTab().setText(<span class=\"string\">\"tab3\"</span>));</span><br></pre></td></tr></table></figure>\n<p>通常 TabLayout 都会和 ViewPager 配合起来使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mViewPager = (ViewPager) findViewById(R.id.viewpager);</span><br><span class=\"line\"><span class=\"comment\">// 设置 ViewPager 的数据等</span></span><br><span class=\"line\">setupViewPager();</span><br><span class=\"line\">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</span><br><span class=\"line\">tabLayout.setupWithViewPager(mViewPager);</span><br></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png\" alt=\"tablayout\"></p>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/TabLayout.html\">TabLayout API</a></p>\n<h2 id=\"navigationview\">NavigationView</h2>\n\n<p>NavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dl_main_drawer\"</span></span><br><span class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 你的内容布局--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/navigation_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nv_main_navigation\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/navigation_header\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/drawer_view\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中最重要的就是这两个属性：<code>app:headerLayout</code>和<code>app:menu</code></p>\n<p>通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png\" alt=\"navigationview\"></p>\n<p>其中最上面的布局就是<code>app:headerLayout</code>所指定的头布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimaryDark\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></span><br><span class=\"line\">              <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/ic_user\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"XuYisheng\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"@style/TextAppearance.AppCompat.Body1\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20sp\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_home\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"CC Talk\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_messages\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_event\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"HJ Class\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_friends\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_headset\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Words\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_discussion\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_forum\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Big HJ\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:title</span>=<span class=\"string\">\"Version\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">menu</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">                <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></span><br><span class=\"line\">                <span class=\"attr\">android:title</span>=<span class=\"string\">\"Android\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">item</span></span><br><span class=\"line\">                <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></span><br><span class=\"line\">                <span class=\"attr\">android:title</span>=<span class=\"string\">\"iOS\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>你可以通过设置一个<code>OnNavigationItemSelectedListener</code>，使用其<code>setNavigationItemSelectedListener()</code>来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupDrawerContent</span><span class=\"params\">(NavigationView navigationView)</span> </span>&#123;</span><br><span class=\"line\">    navigationView.setNavigationItemSelectedListener(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(MenuItem menuItem)</span> </span>&#123;</span><br><span class=\"line\">                menuItem.setChecked(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                mDrawerLayout.closeDrawers();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>官网API：<a href=\"http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html\">NavigationView API</a></p>\n<h2 id=\"appbarlayout\">AppBarLayout</h2>\n\n<p>AppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png\" alt=\"appbarlayout\"></p>\n<p>这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html\">AppBarLayout API</a></p>\n<h2 id=\"coordinatorlayout\">CoordinatorLayout</h2>\n\n<p>CoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。</p>\n<h3 id=\"Floating-View\"><a href=\"#Floating-View\" class=\"headerlink\" title=\"Floating View\"></a>Floating View</h3><p>Material Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:layout_gravity=\"end|bottom\"</span><br></pre></td></tr></table></figure>\n<p>来指定显示的位置。同时，它还提供了<code>layout_anchor</code>来供你设置显示坐标的锚点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_anchor=\"@id/appbar\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建滚动\"><a href=\"#创建滚动\" class=\"headerlink\" title=\"创建滚动\"></a>创建滚动</h3><p>CoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。</p>\n<blockquote>\n<p>一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给<code>Snackbar.make()</code>，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。</p>\n</blockquote>\n<p>官方的例子很好的说明了这一点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span><br><span class=\"line\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">Your</span> <span class=\"attr\">Scrollable</span> <span class=\"attr\">View</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span><br><span class=\"line\">                  <span class=\"attr\">...</span></span><br><span class=\"line\">                  <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span><br><span class=\"line\">                  <span class=\"attr\">...</span></span><br><span class=\"line\">                  <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中，一个可以滚动的组件，例如 RecyclerView、ListView（<strong>注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的</strong>）。如果：</p>\n<ol>\n<li>给这个可滚动组件设置了<code>layout_behavior</code></li>\n<li>给另一个控件设置了<code>layout_scrollFlags</code></li>\n</ol>\n<p>那么，当设置了<code>layout_behavior</code>的控件滑动时，就会触发设置了<code>layout_scrollFlags</code>的控件发生状态的改变。 </p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif\" alt=\"coordinatorlayout\"></p>\n<p>设置的<code>layout_scrollFlags</code>有如下几种选项：</p>\n<ul>\n<li>scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。</li>\n<li>enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。</li>\n<li>enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</li>\n<li>exitUntilCollapsed: 向上滚动时收缩 View。</li>\n</ul>\n<p>需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。</p>\n<p>例如我们前面例子中的，也就是这种模式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_scrollFlags=\"scroll|enterAlways\"</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。</p>\n</blockquote>\n<p>官网API：<a href=\"http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html\">CoordinatorLayout</a></p>\n<h2 id=\"collapsingtoolbarlayout\">CollapsingToolbarLayout</h2>\n\n<p>CollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。</p>\n<p>这里先看一个例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/detail_backdrop_height\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></span><br><span class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsing_toolbar\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:expandedTitleMarginEnd</span>=<span class=\"string\">\"64dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:expandedTitleMarginStart</span>=<span class=\"string\">\"48dp\"</span></span><br><span class=\"line\">        <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|exitUntilCollapsed\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/backdrop\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_banner\"</span></span><br><span class=\"line\">            <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span><br><span class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span><br><span class=\"line\">            <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span></span><br><span class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的<code>layout_collapseMode</code>。</p>\n<p>这里使用了 CollapsingToolbarLayout 的<code>app:layout_collapseMode=&quot;pin&quot;</code>来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用<code>setTitle()</code>，而不是在 Toolbar 上。</p>\n<p>除了固定住 view，你还可以使用<code>app:layout_collapseMode=&quot;parallax&quot;</code>（以及使用<code>app:layout_collapseParallaxMultiplier=&quot;0.7&quot;</code>来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的<code>app:contentScrim=&quot;?attr/colorPrimary&quot;</code>属性一起配合更完美。</p>\n<p>在这个例子中，我们同样设置了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"&gt;</span><br></pre></td></tr></table></figure>\n<p>来接收一个：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt;</span><br></pre></td></tr></table></figure>\n<p>这样才能产生滚动效果，而通过<code>layout_collapseMode</code>，我们就设置了滚动时内容的变化效果。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif\" alt=\"CollapsingToolbarLayout\"></p>\n<h3 id=\"CoordinatorLayout与自定义view\"><a href=\"#CoordinatorLayout与自定义view\" class=\"headerlink\" title=\"CoordinatorLayout与自定义view\"></a>CoordinatorLayout与自定义view</h3><p>有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以<code>Coordinator.Behavior</code>的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过<code>onDependentViewChanged()</code>接收回调。</p>\n<p>可以使用<code>CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)</code>注解或者在布局中使用<code>app:layout_behavior=&quot;com.example.app.你的View$Behavior&quot;</code>属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。</p>\n<p>官方API：<a href=\"http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html\">CollapsingToolbarLayout</a></p>\n<h2 id=\"summary\">总结</h2>\n\n<p>研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。</p>\n<h2 id=\"references\">参考</h2>\n\n<p>Thanks to <a href=\"http://blog.csdn.net/eclipsexys/article/details/46349721\">《Android Design Support Library使用详解》</a></p>\n"},{"title":"打磨真正属于自己的输入法-RIME","date":"2015-09-12T04:59:57.000Z","_content":"很久之前就发现了RIME这个输入法，但因为在windows下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了mac作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。\n\n# 目录\n\n* [简介](#introduction)\n* [安装](#install)\n* [使用](#use)\n* [自定义](#custom)\n  * [输入方案](#input method)\n  * [外观](#show)\n  * [主题](#theme)\n  * [生僻字乱码](#garbled)\n  * [根据程序切换中英文](#auto switch)\n  * [emoji表情以及特殊符号](#emoji)\n  * [同步](#synchronize)\n  * [我的成品](#my product)\n\n<h1 id=\"introduction\">简介</h1>\n\nRIME，全称是**中州韵输入法引擎**，是由**佛振**先生开发的跨平台开源输入法。\n\n它在不同平台上有不同的名字：\n\n* **Windows**：小狼毫 Weasel\n* **Mac OS X**： 鼠须管 Squirrel\n* **Linux**：ibus-rime or fcitx-rime\n\n其内置的输入方案包括\n\n* 朙月拼音\n* 朙月拼音 语句流\n* 朙月拼音 简化字模式\n* 朙月拼音 臺灣正體模式\n* 地球拼音 dì qiú pīn yīn\n* 注音\n* 注音 臺灣正體模式\n* 粵拼\n* 倉頡五代\n* 倉頡 快打模式\n* 速成\n* 五笔86\n* 五笔拼音混合輸入\n* 自然碼雙拼\n* 微軟雙拼\n* 智能ABC雙拼\n* 小鶴雙拼\n* 吳語上海話（新派）\n* 吳語上海話（老派）\n* 中古漢語三拼\n* 中古漢語全拼\n* X-SAMPA 國際音標\n* emoji表情\n\n再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案\n\n* 英文\n* 日语\n* 山人全息码\n* ……\n\n它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。\n\n![配色主题](http://7xl94a.com1.z0.glb.clouddn.com/111.jpg)\n\n<h1 id=\"install\">安装</h1>\n\n前往[下载地址](http://rime.im/download/)选择对应的版本下载，Mac用户选择`鼠须管 Squirrel`即可。\n\n下载完成之后，解压zip压缩包，然后打开`Squirrel-versioncode.pkg`按步骤安装即可。\n\n<h1 id=\"use\">使用</h1>\n\n1. Mac用户在输入源中添加**鼠须管**\n2. 按`⌘ + Space`切换输入法到**鼠须管**\n3. 按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入\n4. Enjoy it！\n\n<h1 id=\"custom\">自定义</h1>\n\n点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的**配置文件**。鼠须管的配置文件都是`yaml`格式的，我们如果想要自定义，可以新建一个`*.custom.yaml`对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。\n\n<h2 id=\"input method\">输入方案</h2>\n\n新建一个`default.custom.yaml`文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记**重新部署**一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。\n\n```yaml\npatch:\n  schema_list:\n    - schema: luna_pinyin          # 朙月拼音\n    - schema: luna_pinyin_fluency  # 朙月拼音 语句流\n#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式\n#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式\n    - schema: terra_pinyin         # 地球拼音 dì qiú pīn yīn\n#    - schema: bopomofo             # 注音\n#    - schema: bopomofo_tw          # 注音 臺灣正體模式\n#    - schema: jyutping             # 粵拼\n#    - schema: cangjie5             # 倉頡五代\n#    - schema: cangjie5_express     # 倉頡 快打模式\n#    - schema: quick5               # 速成\n#    - schema: wubi86               # 五笔86\n    - schema: wubi_pinyin          # 五笔拼音混合輸入\n#    - schema: double_pinyin        # 自然碼雙拼\n#    - schema: double_pinyin_mspy   # 微軟雙拼\n#    - schema: double_pinyin_abc    # 智能ABC雙拼\n#    - schema: double_pinyin_flypy  # 小鶴雙拼\n#    - schema: wugniu        # 吳語上海話（新派）\n#    - schema: wugniu_lopha  # 吳語上海話（老派）\n#    - schema: sampheng      # 中古漢語三拼\n#    - schema: zyenpheng     # 中古漢語全拼\n#    - schema: ipa_xsampa    # X-SAMPA 國際音標\n    - schema: emoji         # emoji表情\n```\n\n<h2 id=\"show\">外观</h2>\n\n新建一个`squirrel.custom.yaml`文件，向其中写入如下内容，然后根据自己的需求修改。\n\n```yaml\n# 適用於【鼠鬚管】0.9.13+\n# 位置：~/Library/Rime/squirrel.custom.yaml\n# 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格\n\npatch:\n#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局\n#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）\n#  style/horizontal: true        # 候選窗横向顯示\n#  style/inline_preedit: false   # 非內嵌編碼行\n#  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱\n#  style/font_point: 21          # 字號\n#  style/corner_radius: 10       # 窗口圓角半徑\n#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果\n#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果\n#  style/color_scheme: luna      # 選擇配色方案\n\n# 註：預設的配色方案及代碼（指定爲 style/color_scheme ）\n#   碧水 - aqua\n#   青天 - azure\n#   明月 - luna\n#   墨池 - ink\n#   孤寺 - lost_temple\n#   暗堂 - dark_temple\n#   星際我爭霸 - starcraft\n#   谷歌 - google\n```\n\n<h2 id=\"theme\">主题</h2>\n\n如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。\n\n还是在`squirrel.custom.yaml`中，在刚刚加入的内容后面加入如下内容\n\n```yaml\n  preset_color_schemes/textflow:\n    author: \"name <name@gmail.com>\"\n    back_color: 0xFFFFFF #背景\n    border_color: 0xE0B693 #边框\n    candidate_text_color: 0x000000 #非第一候选项\n    hilited_back_color: 0xEBECED #拼音串高亮背景\n    hilited_candidate_back_color: 0xFFFFFF #第一候选项背景\n    hilited_candidate_text_color: 0xF57C75 #第一候选项\n    hilited_text_color: 0xFF6666 #拼音串高亮\n    name: Textflow\n    text_color: 0x000000 #拼音串\n```\n\n然后启用这个主题就可以了\n\n如果你想要更多的配色，可以参照[RIME吧：配色方案专帖](http://tieba.baidu.com/p/2445582839)\n\n<h2 id=\"garbled\">生僻字乱码</h2>\n\n生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。\n\n一般的选择是「[花园明朝](http://fonts.jp/hanazono/)」，下载下来安装好之后，将 [外观](#show) 这一步中的\n\n```yaml\n  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱\n```\n\n改为\n\n```yaml\n  style/font_face: \"PingFang SC,HanaMinA\"    # 我喜歡的字體名稱\n```\n\n然后重新部署即可\n\n<h2 id=\"auto switch\">根据程序切换中英文</h2>\n\n鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。\n\n如在\n\n* 终端 **Terminal**、**iTerm2**\n* 编辑器 **sublime**、**atom**\n* 启动工具 **QuickSilver**、**Alfred**\n\n中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入\n\n如果想要设置应用中输入法的初始状态，我们首先要查看应用的`Info.plist`文件得到该应用的`Bundle Identifier`，通常是形如`com.apple.Xcode`的字符串\n\n例如，要在`Xcode`中默认英文输入，又要在`Alfred`中恢复中文输入，可如下设定：\n\n```yaml\n# example squirrel.custom.yaml\npatch:\n  app_options/com.apple.Xcode:\n    ascii_mode: true\n  app_options/com.alfredapp.Alfred: {}\n```\n\n<h2 id=\"emoji\">emoji表情以及特殊符号</h2>\n\n有时候我们会有输入`emoji`表情的需求，但仅仅只是开启了`emoji`输入方案的话，我们每次都要切换输入方案才可以输入`emoji`表情，还是很不方便的。如果可以直接在一种输入方案中加入`emoji`表情输入就更好了\n\n其实可以做到，你只需要这样\n\n```yaml\n# luna_pinyin.custom.yaml\n#\n# 在【朙月拼音】裏使用Emoji表情\n#\n# 保存到Rime用戶文件夾後，重新部署生效\n# ~/.config/ibus/rime  (linux)\n# ~/Library/Rime       (macos)\n# %APPDATA%\\Rime       (windows)\n#\n# 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分\n#\n\npatch:\n  schema/dependencies:\n    - emoji\n  reverse_lookup:\n    dictionary: emoji\n    enable_completion: false\n    prefix: \"`\"\n    tips: 〔表情〕\n```\n\n以上我们就完成了`emoji`表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧\n\n但是仅仅表情还不够，我们有时候需要输入形如`ⅺ`、`⑴`、`☁`之类的特殊符号，查看`symbols.yaml`我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？\n\n只需要在我们上面已经添加了`emoji`表情相关的配置文件末尾再加上如下配置即可\n\n```yaml\n  punctuator:\n    import_preset: symbols\n\n  recognizer:\n    import_preset: default\n    patterns:\n      reverse_lookup: \"`[a-z]*'?$\"\n      punct: \"^/([a-z]+|[0-9]0?)$\"\n```\n\n大功告成，重新部署之后使用`/lm`看看吧，更多符号输入方式请查看`symbols.yaml`\n\n<h2 id=\"synchronize\">同步</h2>\n\n做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？\n\n**当然可以！**\n\n`RIME`是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用**同步网盘**或者**U盘**来同步。\n\n推荐国内用户使用[坚果云](https://jianguoyun.com/)作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐[DropBox](https://www.dropbox.com/)\n\n### 1. 设定同步位置\n\n默认情况下，个人词库和配置都将备份到`RIME用户文件夹\\sync\\UUID`这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。\n\n直接編輯用戶文件夾下的`installation.yaml`，添加：\n\n```yaml\nsync_dir: 'D:\\Dropbox\\RimeSync'\n```\n\n又如 Mac 上添加：\n\n```yaml\nsync_dir: '/Users/fred/Dropbox/RimeSync'\n```\n\n又如使用 USB 存儲來同步：（真實案例）\n\n```yaml\nsync_dir: '/Volumes/USBDRIVE/RimeSync'\n```\n\n### 2. 同步标识\n\n默认情况下，`RIME`会为随机生成每一个`UUID`作为标识。这个`UUID`会被用来区分來自不同机器/系统的个人词库和设置。\n\n如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑`installation.yaml`中如下所示的内容即可\n\n```yaml\ninstallation_id: 'loshine-macbook'\n```\n\n**注意**：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线\n\n<h2 id=\"my product\">我的成品</h2>\n\n成品效果演示\n\n<video src=\"/assets/video/鼠须管演示.mov\" controls=\"controls\" width=\"600\">\nyour browser does not support the video tag\n</video>\n\n几个配置文件\n\n* squirrel.custom.yaml\n\n```yaml\n# 適用於【鼠鬚管】0.9.13+\n# 位置：~/Library/Rime/squirrel.custom.yaml\n# 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格\n\npatch:\n#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局\n  show_notifications_when: appropriate        # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）\n#  style/horizontal: true                     # 候選窗横向顯示\n#  style/inline_preedit: false                # 非內嵌編碼行\n#  style/font_face: \"PingFang SC,HanaMinA\"     # 我喜歡的字體名稱\n  style/font_point: 18                        # 字號\n  style/corner_radius: 2                      # 窗口圓角半徑\n  style/border_height: 7                      # 窗口邊界高度，大於圓角半徑才有效果\n  style/border_width: 7                       # 窗口邊界寬度，大於圓角半徑才有效果\n  style/color_scheme: luna                    # 選擇配色方案\n\n# 註：預設的配色方案及代碼（指定爲 style/color_scheme ）\n#   碧水 - aqua\n#   青天 - azure\n#   明月 - luna\n#   墨池 - ink\n#   孤寺 - lost_temple\n#   暗堂 - dark_temple\n#   星際我爭霸 - starcraft\n#   谷歌 - google\n  preset_color_schemes/textflow:\n    author: \"name <name@gmail.com>\"\n    back_color: 0xFFFFFF #背景\n    border_color: 0xE0B693 #边框\n    candidate_text_color: 0x000000 #非第一候选项\n    hilited_back_color: 0xEBECED #拼音串高亮背景\n    hilited_candidate_back_color: 0xFFFFFF #第一候选项背景\n    hilited_candidate_text_color: 0xF57C75 #第一候选项\n    hilited_text_color: 0xFF6666 #拼音串高亮\n    name: Textflow\n    text_color: 0x000000 #拼音串\n\n# Xcode\n  app_options/com.apple.Xcode:\n    ascii_mode: true\n# alfred\n  app_options/com.alfredapp.Alfred:\n    ascii_mode: true\n# Android Studio\n  app_options/com.google.android.studio:\n    ascii_mode: true\n# atom\n  app_options/com.github.atom:\n    ascii_mode: true\n```\n\n* default.custom.yaml\n\n```yaml\npatch:\n  schema_list:\n    - schema: luna_pinyin          # 朙月拼音\n    - schema: luna_pinyin_fluency  # 朙月拼音 语句流\n#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式\n#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式\n    - schema: terra_pinyin         # 地球拼音 dì qiú pīn yīn\n#    - schema: bopomofo             # 注音\n#    - schema: bopomofo_tw          # 注音 臺灣正體模式\n#    - schema: jyutping             # 粵拼\n#    - schema: cangjie5             # 倉頡五代\n#    - schema: cangjie5_express     # 倉頡 快打模式\n#    - schema: quick5               # 速成\n#    - schema: wubi86               # 五笔86\n    - schema: wubi_pinyin          # 五笔拼音混合輸入\n#    - schema: double_pinyin        # 自然碼雙拼\n#    - schema: double_pinyin_mspy   # 微軟雙拼\n#    - schema: double_pinyin_abc    # 智能ABC雙拼\n#    - schema: double_pinyin_flypy  # 小鶴雙拼\n#    - schema: wugniu        # 吳語上海話（新派）\n#    - schema: wugniu_lopha  # 吳語上海話（老派）\n#    - schema: sampheng      # 中古漢語三拼\n#    - schema: zyenpheng     # 中古漢語全拼\n#    - schema: ipa_xsampa    # X-SAMPA 國際音標\n    - schema: emoji         # emoji表情\n{% endhighlight %}\n* terra_pinyin.custom.yaml\n\n{% highlight yaml %}\n# luna_pinyin.custom.yaml\n#\n# 在【地球拼音】裏使用Emoji表情\n#\n# 保存到Rime用戶文件夾後，重新部署生效\n# ~/.config/ibus/rime  (linux)\n# ~/Library/Rime       (macos)\n# %APPDATA%\\Rime       (windows)\n#\n# 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分\n#\n\npatch:\n  schema/dependencies:\n    - emoji\n#  abc_segmentor/extra_tags:\n#    - reverse_lookup\n  reverse_lookup:\n    dictionary: emoji\n    enable_completion: false\n    prefix: \"`\"\n    tips: 〔表情〕\n\n  punctuator:\n    import_preset: symbols\n\n  recognizer:\n    import_preset: default\n    patterns:\n      reverse_lookup: \"`[a-z]*'?$\"\n      punct: \"^/([a-z]+|[0-9]0?)$\"\n```\n\n* installation.yaml\n\n```yaml\ndistribution_code_name: Squirrel\ndistribution_name: \"鼠鬚管\"\ndistribution_version: 0.9.26.1\ninstall_time: \"Mon Aug  3 15:24:12 2015\"\ninstallation_id: \"loshine-macbook\"\nrime_version: 1.2.9\nsync_dir: '/Users/Loshine/我的坚果云/RimeSync'\n```","source":"_posts/2015-09-12-打磨真正属于自己的输入法-RIME.md","raw":"---\ntitle: 打磨真正属于自己的输入法-RIME\ndate: 2015-09-12 12:59:57\ntags: [RIME]\n---\n很久之前就发现了RIME这个输入法，但因为在windows下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了mac作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。\n\n# 目录\n\n* [简介](#introduction)\n* [安装](#install)\n* [使用](#use)\n* [自定义](#custom)\n  * [输入方案](#input method)\n  * [外观](#show)\n  * [主题](#theme)\n  * [生僻字乱码](#garbled)\n  * [根据程序切换中英文](#auto switch)\n  * [emoji表情以及特殊符号](#emoji)\n  * [同步](#synchronize)\n  * [我的成品](#my product)\n\n<h1 id=\"introduction\">简介</h1>\n\nRIME，全称是**中州韵输入法引擎**，是由**佛振**先生开发的跨平台开源输入法。\n\n它在不同平台上有不同的名字：\n\n* **Windows**：小狼毫 Weasel\n* **Mac OS X**： 鼠须管 Squirrel\n* **Linux**：ibus-rime or fcitx-rime\n\n其内置的输入方案包括\n\n* 朙月拼音\n* 朙月拼音 语句流\n* 朙月拼音 简化字模式\n* 朙月拼音 臺灣正體模式\n* 地球拼音 dì qiú pīn yīn\n* 注音\n* 注音 臺灣正體模式\n* 粵拼\n* 倉頡五代\n* 倉頡 快打模式\n* 速成\n* 五笔86\n* 五笔拼音混合輸入\n* 自然碼雙拼\n* 微軟雙拼\n* 智能ABC雙拼\n* 小鶴雙拼\n* 吳語上海話（新派）\n* 吳語上海話（老派）\n* 中古漢語三拼\n* 中古漢語全拼\n* X-SAMPA 國際音標\n* emoji表情\n\n再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案\n\n* 英文\n* 日语\n* 山人全息码\n* ……\n\n它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。\n\n![配色主题](http://7xl94a.com1.z0.glb.clouddn.com/111.jpg)\n\n<h1 id=\"install\">安装</h1>\n\n前往[下载地址](http://rime.im/download/)选择对应的版本下载，Mac用户选择`鼠须管 Squirrel`即可。\n\n下载完成之后，解压zip压缩包，然后打开`Squirrel-versioncode.pkg`按步骤安装即可。\n\n<h1 id=\"use\">使用</h1>\n\n1. Mac用户在输入源中添加**鼠须管**\n2. 按`⌘ + Space`切换输入法到**鼠须管**\n3. 按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入\n4. Enjoy it！\n\n<h1 id=\"custom\">自定义</h1>\n\n点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的**配置文件**。鼠须管的配置文件都是`yaml`格式的，我们如果想要自定义，可以新建一个`*.custom.yaml`对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。\n\n<h2 id=\"input method\">输入方案</h2>\n\n新建一个`default.custom.yaml`文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记**重新部署**一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。\n\n```yaml\npatch:\n  schema_list:\n    - schema: luna_pinyin          # 朙月拼音\n    - schema: luna_pinyin_fluency  # 朙月拼音 语句流\n#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式\n#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式\n    - schema: terra_pinyin         # 地球拼音 dì qiú pīn yīn\n#    - schema: bopomofo             # 注音\n#    - schema: bopomofo_tw          # 注音 臺灣正體模式\n#    - schema: jyutping             # 粵拼\n#    - schema: cangjie5             # 倉頡五代\n#    - schema: cangjie5_express     # 倉頡 快打模式\n#    - schema: quick5               # 速成\n#    - schema: wubi86               # 五笔86\n    - schema: wubi_pinyin          # 五笔拼音混合輸入\n#    - schema: double_pinyin        # 自然碼雙拼\n#    - schema: double_pinyin_mspy   # 微軟雙拼\n#    - schema: double_pinyin_abc    # 智能ABC雙拼\n#    - schema: double_pinyin_flypy  # 小鶴雙拼\n#    - schema: wugniu        # 吳語上海話（新派）\n#    - schema: wugniu_lopha  # 吳語上海話（老派）\n#    - schema: sampheng      # 中古漢語三拼\n#    - schema: zyenpheng     # 中古漢語全拼\n#    - schema: ipa_xsampa    # X-SAMPA 國際音標\n    - schema: emoji         # emoji表情\n```\n\n<h2 id=\"show\">外观</h2>\n\n新建一个`squirrel.custom.yaml`文件，向其中写入如下内容，然后根据自己的需求修改。\n\n```yaml\n# 適用於【鼠鬚管】0.9.13+\n# 位置：~/Library/Rime/squirrel.custom.yaml\n# 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格\n\npatch:\n#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局\n#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）\n#  style/horizontal: true        # 候選窗横向顯示\n#  style/inline_preedit: false   # 非內嵌編碼行\n#  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱\n#  style/font_point: 21          # 字號\n#  style/corner_radius: 10       # 窗口圓角半徑\n#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果\n#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果\n#  style/color_scheme: luna      # 選擇配色方案\n\n# 註：預設的配色方案及代碼（指定爲 style/color_scheme ）\n#   碧水 - aqua\n#   青天 - azure\n#   明月 - luna\n#   墨池 - ink\n#   孤寺 - lost_temple\n#   暗堂 - dark_temple\n#   星際我爭霸 - starcraft\n#   谷歌 - google\n```\n\n<h2 id=\"theme\">主题</h2>\n\n如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。\n\n还是在`squirrel.custom.yaml`中，在刚刚加入的内容后面加入如下内容\n\n```yaml\n  preset_color_schemes/textflow:\n    author: \"name <name@gmail.com>\"\n    back_color: 0xFFFFFF #背景\n    border_color: 0xE0B693 #边框\n    candidate_text_color: 0x000000 #非第一候选项\n    hilited_back_color: 0xEBECED #拼音串高亮背景\n    hilited_candidate_back_color: 0xFFFFFF #第一候选项背景\n    hilited_candidate_text_color: 0xF57C75 #第一候选项\n    hilited_text_color: 0xFF6666 #拼音串高亮\n    name: Textflow\n    text_color: 0x000000 #拼音串\n```\n\n然后启用这个主题就可以了\n\n如果你想要更多的配色，可以参照[RIME吧：配色方案专帖](http://tieba.baidu.com/p/2445582839)\n\n<h2 id=\"garbled\">生僻字乱码</h2>\n\n生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。\n\n一般的选择是「[花园明朝](http://fonts.jp/hanazono/)」，下载下来安装好之后，将 [外观](#show) 这一步中的\n\n```yaml\n  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱\n```\n\n改为\n\n```yaml\n  style/font_face: \"PingFang SC,HanaMinA\"    # 我喜歡的字體名稱\n```\n\n然后重新部署即可\n\n<h2 id=\"auto switch\">根据程序切换中英文</h2>\n\n鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。\n\n如在\n\n* 终端 **Terminal**、**iTerm2**\n* 编辑器 **sublime**、**atom**\n* 启动工具 **QuickSilver**、**Alfred**\n\n中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入\n\n如果想要设置应用中输入法的初始状态，我们首先要查看应用的`Info.plist`文件得到该应用的`Bundle Identifier`，通常是形如`com.apple.Xcode`的字符串\n\n例如，要在`Xcode`中默认英文输入，又要在`Alfred`中恢复中文输入，可如下设定：\n\n```yaml\n# example squirrel.custom.yaml\npatch:\n  app_options/com.apple.Xcode:\n    ascii_mode: true\n  app_options/com.alfredapp.Alfred: {}\n```\n\n<h2 id=\"emoji\">emoji表情以及特殊符号</h2>\n\n有时候我们会有输入`emoji`表情的需求，但仅仅只是开启了`emoji`输入方案的话，我们每次都要切换输入方案才可以输入`emoji`表情，还是很不方便的。如果可以直接在一种输入方案中加入`emoji`表情输入就更好了\n\n其实可以做到，你只需要这样\n\n```yaml\n# luna_pinyin.custom.yaml\n#\n# 在【朙月拼音】裏使用Emoji表情\n#\n# 保存到Rime用戶文件夾後，重新部署生效\n# ~/.config/ibus/rime  (linux)\n# ~/Library/Rime       (macos)\n# %APPDATA%\\Rime       (windows)\n#\n# 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分\n#\n\npatch:\n  schema/dependencies:\n    - emoji\n  reverse_lookup:\n    dictionary: emoji\n    enable_completion: false\n    prefix: \"`\"\n    tips: 〔表情〕\n```\n\n以上我们就完成了`emoji`表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧\n\n但是仅仅表情还不够，我们有时候需要输入形如`ⅺ`、`⑴`、`☁`之类的特殊符号，查看`symbols.yaml`我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？\n\n只需要在我们上面已经添加了`emoji`表情相关的配置文件末尾再加上如下配置即可\n\n```yaml\n  punctuator:\n    import_preset: symbols\n\n  recognizer:\n    import_preset: default\n    patterns:\n      reverse_lookup: \"`[a-z]*'?$\"\n      punct: \"^/([a-z]+|[0-9]0?)$\"\n```\n\n大功告成，重新部署之后使用`/lm`看看吧，更多符号输入方式请查看`symbols.yaml`\n\n<h2 id=\"synchronize\">同步</h2>\n\n做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？\n\n**当然可以！**\n\n`RIME`是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用**同步网盘**或者**U盘**来同步。\n\n推荐国内用户使用[坚果云](https://jianguoyun.com/)作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐[DropBox](https://www.dropbox.com/)\n\n### 1. 设定同步位置\n\n默认情况下，个人词库和配置都将备份到`RIME用户文件夹\\sync\\UUID`这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。\n\n直接編輯用戶文件夾下的`installation.yaml`，添加：\n\n```yaml\nsync_dir: 'D:\\Dropbox\\RimeSync'\n```\n\n又如 Mac 上添加：\n\n```yaml\nsync_dir: '/Users/fred/Dropbox/RimeSync'\n```\n\n又如使用 USB 存儲來同步：（真實案例）\n\n```yaml\nsync_dir: '/Volumes/USBDRIVE/RimeSync'\n```\n\n### 2. 同步标识\n\n默认情况下，`RIME`会为随机生成每一个`UUID`作为标识。这个`UUID`会被用来区分來自不同机器/系统的个人词库和设置。\n\n如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑`installation.yaml`中如下所示的内容即可\n\n```yaml\ninstallation_id: 'loshine-macbook'\n```\n\n**注意**：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线\n\n<h2 id=\"my product\">我的成品</h2>\n\n成品效果演示\n\n<video src=\"/assets/video/鼠须管演示.mov\" controls=\"controls\" width=\"600\">\nyour browser does not support the video tag\n</video>\n\n几个配置文件\n\n* squirrel.custom.yaml\n\n```yaml\n# 適用於【鼠鬚管】0.9.13+\n# 位置：~/Library/Rime/squirrel.custom.yaml\n# 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格\n\npatch:\n#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局\n  show_notifications_when: appropriate        # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）\n#  style/horizontal: true                     # 候選窗横向顯示\n#  style/inline_preedit: false                # 非內嵌編碼行\n#  style/font_face: \"PingFang SC,HanaMinA\"     # 我喜歡的字體名稱\n  style/font_point: 18                        # 字號\n  style/corner_radius: 2                      # 窗口圓角半徑\n  style/border_height: 7                      # 窗口邊界高度，大於圓角半徑才有效果\n  style/border_width: 7                       # 窗口邊界寬度，大於圓角半徑才有效果\n  style/color_scheme: luna                    # 選擇配色方案\n\n# 註：預設的配色方案及代碼（指定爲 style/color_scheme ）\n#   碧水 - aqua\n#   青天 - azure\n#   明月 - luna\n#   墨池 - ink\n#   孤寺 - lost_temple\n#   暗堂 - dark_temple\n#   星際我爭霸 - starcraft\n#   谷歌 - google\n  preset_color_schemes/textflow:\n    author: \"name <name@gmail.com>\"\n    back_color: 0xFFFFFF #背景\n    border_color: 0xE0B693 #边框\n    candidate_text_color: 0x000000 #非第一候选项\n    hilited_back_color: 0xEBECED #拼音串高亮背景\n    hilited_candidate_back_color: 0xFFFFFF #第一候选项背景\n    hilited_candidate_text_color: 0xF57C75 #第一候选项\n    hilited_text_color: 0xFF6666 #拼音串高亮\n    name: Textflow\n    text_color: 0x000000 #拼音串\n\n# Xcode\n  app_options/com.apple.Xcode:\n    ascii_mode: true\n# alfred\n  app_options/com.alfredapp.Alfred:\n    ascii_mode: true\n# Android Studio\n  app_options/com.google.android.studio:\n    ascii_mode: true\n# atom\n  app_options/com.github.atom:\n    ascii_mode: true\n```\n\n* default.custom.yaml\n\n```yaml\npatch:\n  schema_list:\n    - schema: luna_pinyin          # 朙月拼音\n    - schema: luna_pinyin_fluency  # 朙月拼音 语句流\n#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式\n#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式\n    - schema: terra_pinyin         # 地球拼音 dì qiú pīn yīn\n#    - schema: bopomofo             # 注音\n#    - schema: bopomofo_tw          # 注音 臺灣正體模式\n#    - schema: jyutping             # 粵拼\n#    - schema: cangjie5             # 倉頡五代\n#    - schema: cangjie5_express     # 倉頡 快打模式\n#    - schema: quick5               # 速成\n#    - schema: wubi86               # 五笔86\n    - schema: wubi_pinyin          # 五笔拼音混合輸入\n#    - schema: double_pinyin        # 自然碼雙拼\n#    - schema: double_pinyin_mspy   # 微軟雙拼\n#    - schema: double_pinyin_abc    # 智能ABC雙拼\n#    - schema: double_pinyin_flypy  # 小鶴雙拼\n#    - schema: wugniu        # 吳語上海話（新派）\n#    - schema: wugniu_lopha  # 吳語上海話（老派）\n#    - schema: sampheng      # 中古漢語三拼\n#    - schema: zyenpheng     # 中古漢語全拼\n#    - schema: ipa_xsampa    # X-SAMPA 國際音標\n    - schema: emoji         # emoji表情\n{% endhighlight %}\n* terra_pinyin.custom.yaml\n\n{% highlight yaml %}\n# luna_pinyin.custom.yaml\n#\n# 在【地球拼音】裏使用Emoji表情\n#\n# 保存到Rime用戶文件夾後，重新部署生效\n# ~/.config/ibus/rime  (linux)\n# ~/Library/Rime       (macos)\n# %APPDATA%\\Rime       (windows)\n#\n# 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分\n#\n\npatch:\n  schema/dependencies:\n    - emoji\n#  abc_segmentor/extra_tags:\n#    - reverse_lookup\n  reverse_lookup:\n    dictionary: emoji\n    enable_completion: false\n    prefix: \"`\"\n    tips: 〔表情〕\n\n  punctuator:\n    import_preset: symbols\n\n  recognizer:\n    import_preset: default\n    patterns:\n      reverse_lookup: \"`[a-z]*'?$\"\n      punct: \"^/([a-z]+|[0-9]0?)$\"\n```\n\n* installation.yaml\n\n```yaml\ndistribution_code_name: Squirrel\ndistribution_name: \"鼠鬚管\"\ndistribution_version: 0.9.26.1\ninstall_time: \"Mon Aug  3 15:24:12 2015\"\ninstallation_id: \"loshine-macbook\"\nrime_version: 1.2.9\nsync_dir: '/Users/Loshine/我的坚果云/RimeSync'\n```","slug":"打磨真正属于自己的输入法-RIME","published":1,"updated":"2016-03-03T16:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcj3xml0009phe9us789ciy","content":"<p>很久之前就发现了RIME这个输入法，但因为在windows下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了mac作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#introduction\">简介</a></li>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#use\">使用</a></li>\n<li><a href=\"#custom\">自定义</a><ul>\n<li><a href=\"#input method\">输入方案</a></li>\n<li><a href=\"#show\">外观</a></li>\n<li><a href=\"#theme\">主题</a></li>\n<li><a href=\"#garbled\">生僻字乱码</a></li>\n<li><a href=\"#auto switch\">根据程序切换中英文</a></li>\n<li><a href=\"#emoji\">emoji表情以及特殊符号</a></li>\n<li><a href=\"#synchronize\">同步</a></li>\n<li><a href=\"#my product\">我的成品</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"introduction\">简介</h1>\n\n<p>RIME，全称是<strong>中州韵输入法引擎</strong>，是由<strong>佛振</strong>先生开发的跨平台开源输入法。</p>\n<p>它在不同平台上有不同的名字：</p>\n<ul>\n<li><strong>Windows</strong>：小狼毫 Weasel</li>\n<li><strong>Mac OS X</strong>： 鼠须管 Squirrel</li>\n<li><strong>Linux</strong>：ibus-rime or fcitx-rime</li>\n</ul>\n<p>其内置的输入方案包括</p>\n<ul>\n<li>朙月拼音</li>\n<li>朙月拼音 语句流</li>\n<li>朙月拼音 简化字模式</li>\n<li>朙月拼音 臺灣正體模式</li>\n<li>地球拼音 dì qiú pīn yīn</li>\n<li>注音</li>\n<li>注音 臺灣正體模式</li>\n<li>粵拼</li>\n<li>倉頡五代</li>\n<li>倉頡 快打模式</li>\n<li>速成</li>\n<li>五笔86</li>\n<li>五笔拼音混合輸入</li>\n<li>自然碼雙拼</li>\n<li>微軟雙拼</li>\n<li>智能ABC雙拼</li>\n<li>小鶴雙拼</li>\n<li>吳語上海話（新派）</li>\n<li>吳語上海話（老派）</li>\n<li>中古漢語三拼</li>\n<li>中古漢語全拼</li>\n<li>X-SAMPA 國際音標</li>\n<li>emoji表情</li>\n</ul>\n<p>再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案</p>\n<ul>\n<li>英文</li>\n<li>日语</li>\n<li>山人全息码</li>\n<li>……</li>\n</ul>\n<p>它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/111.jpg\" alt=\"配色主题\"></p>\n<h1 id=\"install\">安装</h1>\n\n<p>前往<a href=\"http://rime.im/download/\" target=\"_blank\" rel=\"external\">下载地址</a>选择对应的版本下载，Mac用户选择<code>鼠须管 Squirrel</code>即可。</p>\n<p>下载完成之后，解压zip压缩包，然后打开<code>Squirrel-versioncode.pkg</code>按步骤安装即可。</p>\n<h1 id=\"use\">使用</h1>\n\n<ol>\n<li>Mac用户在输入源中添加<strong>鼠须管</strong></li>\n<li>按<code>⌘ + Space</code>切换输入法到<strong>鼠须管</strong></li>\n<li>按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入</li>\n<li>Enjoy it！</li>\n</ol>\n<h1 id=\"custom\">自定义</h1>\n\n<p>点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的<strong>配置文件</strong>。鼠须管的配置文件都是<code>yaml</code>格式的，我们如果想要自定义，可以新建一个<code>*.custom.yaml</code>对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。</p>\n<h2 id=\"input method\">输入方案</h2>\n\n<p>新建一个<code>default.custom.yaml</code>文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记<strong>重新部署</strong>一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"attr\">  schema_list:</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin          <span class=\"comment\"># 朙月拼音</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin_fluency  <span class=\"comment\"># 朙月拼音 语句流</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> terra_pinyin         <span class=\"comment\"># 地球拼音 dì qiú pīn yīn</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: bopomofo             # 注音</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: jyutping             # 粵拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: cangjie5             # 倉頡五代</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: cangjie5_express     # 倉頡 快打模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: quick5               # 速成</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wubi86               # 五笔86</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> wubi_pinyin          <span class=\"comment\"># 五笔拼音混合輸入</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin        # 自然碼雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wugniu        # 吳語上海話（新派）</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: sampheng      # 中古漢語三拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: zyenpheng     # 中古漢語全拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> emoji         <span class=\"comment\"># emoji表情</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"show\">外观</h2>\n\n<p>新建一个<code>squirrel.custom.yaml</code>文件，向其中写入如下内容，然后根据自己的需求修改。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 適用於【鼠鬚管】0.9.13+</span></span><br><span class=\"line\"><span class=\"comment\"># 位置：~/Library/Rime/squirrel.custom.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"comment\">#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局</span></span><br><span class=\"line\"><span class=\"comment\">#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></span><br><span class=\"line\"><span class=\"comment\">#  style/horizontal: true        # 候選窗横向顯示</span></span><br><span class=\"line\"><span class=\"comment\">#  style/inline_preedit: false   # 非內嵌編碼行</span></span><br><span class=\"line\"><span class=\"comment\">#  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱</span></span><br><span class=\"line\"><span class=\"comment\">#  style/font_point: 21          # 字號</span></span><br><span class=\"line\"><span class=\"comment\">#  style/corner_radius: 10       # 窗口圓角半徑</span></span><br><span class=\"line\"><span class=\"comment\">#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果</span></span><br><span class=\"line\"><span class=\"comment\">#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果</span></span><br><span class=\"line\"><span class=\"comment\">#  style/color_scheme: luna      # 選擇配色方案</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></span><br><span class=\"line\"><span class=\"comment\">#   碧水 - aqua</span></span><br><span class=\"line\"><span class=\"comment\">#   青天 - azure</span></span><br><span class=\"line\"><span class=\"comment\">#   明月 - luna</span></span><br><span class=\"line\"><span class=\"comment\">#   墨池 - ink</span></span><br><span class=\"line\"><span class=\"comment\">#   孤寺 - lost_temple</span></span><br><span class=\"line\"><span class=\"comment\">#   暗堂 - dark_temple</span></span><br><span class=\"line\"><span class=\"comment\">#   星際我爭霸 - starcraft</span></span><br><span class=\"line\"><span class=\"comment\">#   谷歌 - google</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"theme\">主题</h2>\n\n<p>如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。</p>\n<p>还是在<code>squirrel.custom.yaml</code>中，在刚刚加入的内容后面加入如下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preset_color_schemes/textflow:</span><br><span class=\"line\"><span class=\"attr\">  author:</span> <span class=\"string\">\"name &lt;name@gmail.com&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">  back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#背景</span></span><br><span class=\"line\"><span class=\"attr\">  border_color:</span> <span class=\"number\">0xE0B693</span> <span class=\"comment\">#边框</span></span><br><span class=\"line\"><span class=\"attr\">  candidate_text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#非第一候选项</span></span><br><span class=\"line\"><span class=\"attr\">  hilited_back_color:</span> <span class=\"number\">0xEBECED</span> <span class=\"comment\">#拼音串高亮背景</span></span><br><span class=\"line\"><span class=\"attr\">  hilited_candidate_back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#第一候选项背景</span></span><br><span class=\"line\"><span class=\"attr\">  hilited_candidate_text_color:</span> <span class=\"number\">0xF57C75</span> <span class=\"comment\">#第一候选项</span></span><br><span class=\"line\"><span class=\"attr\">  hilited_text_color:</span> <span class=\"number\">0xFF6666</span> <span class=\"comment\">#拼音串高亮</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> Textflow</span><br><span class=\"line\"><span class=\"attr\">  text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#拼音串</span></span><br></pre></td></tr></table></figure>\n<p>然后启用这个主题就可以了</p>\n<p>如果你想要更多的配色，可以参照<a href=\"http://tieba.baidu.com/p/2445582839\" target=\"_blank\" rel=\"external\">RIME吧：配色方案专帖</a></p>\n<h2 id=\"garbled\">生僻字乱码</h2>\n\n<p>生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。</p>\n<p>一般的选择是「<a href=\"http://fonts.jp/hanazono/\" target=\"_blank\" rel=\"external\">花园明朝</a>」，下载下来安装好之后，将 <a href=\"#show\">外观</a> 这一步中的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">style/font_face: <span class=\"string\">\"儷黑 Pro\"</span>    <span class=\"comment\"># 我喜歡的字體名稱</span></span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">style/font_face: <span class=\"string\">\"PingFang SC,HanaMinA\"</span>    <span class=\"comment\"># 我喜歡的字體名稱</span></span><br></pre></td></tr></table></figure>\n<p>然后重新部署即可</p>\n<h2 id=\"auto switch\">根据程序切换中英文</h2>\n\n<p>鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。</p>\n<p>如在</p>\n<ul>\n<li>终端 <strong>Terminal</strong>、<strong>iTerm2</strong></li>\n<li>编辑器 <strong>sublime</strong>、<strong>atom</strong></li>\n<li>启动工具 <strong>QuickSilver</strong>、<strong>Alfred</strong></li>\n</ul>\n<p>中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入</p>\n<p>如果想要设置应用中输入法的初始状态，我们首先要查看应用的<code>Info.plist</code>文件得到该应用的<code>Bundle Identifier</code>，通常是形如<code>com.apple.Xcode</code>的字符串</p>\n<p>例如，要在<code>Xcode</code>中默认英文输入，又要在<code>Alfred</code>中恢复中文输入，可如下设定：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># example squirrel.custom.yaml</span></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\">  app_options/com.apple.Xcode:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  app_options/com.alfredapp.Alfred: &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"emoji\">emoji表情以及特殊符号</h2>\n\n<p>有时候我们会有输入<code>emoji</code>表情的需求，但仅仅只是开启了<code>emoji</code>输入方案的话，我们每次都要切换输入方案才可以输入<code>emoji</code>表情，还是很不方便的。如果可以直接在一种输入方案中加入<code>emoji</code>表情输入就更好了</p>\n<p>其实可以做到，你只需要这样</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># luna_pinyin.custom.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 在【朙月拼音】裏使用Emoji表情</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 保存到Rime用戶文件夾後，重新部署生效</span></span><br><span class=\"line\"><span class=\"comment\"># ~/.config/ibus/rime  (linux)</span></span><br><span class=\"line\"><span class=\"comment\"># ~/Library/Rime       (macos)</span></span><br><span class=\"line\"><span class=\"comment\"># %APPDATA%\\Rime       (windows)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\">  schema/dependencies:</span><br><span class=\"line\"><span class=\"bullet\">    -</span> emoji</span><br><span class=\"line\"><span class=\"attr\">  reverse_lookup:</span></span><br><span class=\"line\"><span class=\"attr\">    dictionary:</span> emoji</span><br><span class=\"line\"><span class=\"attr\">    enable_completion:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    prefix:</span> <span class=\"string\">\"`\"</span></span><br><span class=\"line\"><span class=\"attr\">    tips:</span> 〔表情〕</span><br></pre></td></tr></table></figure>\n<p>以上我们就完成了<code>emoji</code>表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧</p>\n<p>但是仅仅表情还不够，我们有时候需要输入形如<code>ⅺ</code>、<code>⑴</code>、<code>☁</code>之类的特殊符号，查看<code>symbols.yaml</code>我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？</p>\n<p>只需要在我们上面已经添加了<code>emoji</code>表情相关的配置文件末尾再加上如下配置即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">punctuator:</span></span><br><span class=\"line\"><span class=\"attr\">  import_preset:</span> symbols</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">recognizer:</span></span><br><span class=\"line\"><span class=\"attr\">  import_preset:</span> default</span><br><span class=\"line\"><span class=\"attr\">  patterns:</span></span><br><span class=\"line\"><span class=\"attr\">    reverse_lookup:</span> <span class=\"string\">\"`[a-z]*'?$\"</span></span><br><span class=\"line\"><span class=\"attr\">    punct:</span> <span class=\"string\">\"^/([a-z]+|[0-9]0?)$\"</span></span><br></pre></td></tr></table></figure>\n<p>大功告成，重新部署之后使用<code>/lm</code>看看吧，更多符号输入方式请查看<code>symbols.yaml</code></p>\n<h2 id=\"synchronize\">同步</h2>\n\n<p>做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？</p>\n<p><strong>当然可以！</strong></p>\n<p><code>RIME</code>是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用<strong>同步网盘</strong>或者<strong>U盘</strong>来同步。</p>\n<p>推荐国内用户使用<a href=\"https://jianguoyun.com/\" target=\"_blank\" rel=\"external\">坚果云</a>作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐<a href=\"https://www.dropbox.com/\" target=\"_blank\" rel=\"external\">DropBox</a></p>\n<h3 id=\"1-设定同步位置\"><a href=\"#1-设定同步位置\" class=\"headerlink\" title=\"1. 设定同步位置\"></a>1. 设定同步位置</h3><p>默认情况下，个人词库和配置都将备份到<code>RIME用户文件夹\\sync\\UUID</code>这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。</p>\n<p>直接編輯用戶文件夾下的<code>installation.yaml</code>，添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'D:\\Dropbox\\RimeSync'</span></span><br></pre></td></tr></table></figure>\n<p>又如 Mac 上添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Users/fred/Dropbox/RimeSync'</span></span><br></pre></td></tr></table></figure>\n<p>又如使用 USB 存儲來同步：（真實案例）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Volumes/USBDRIVE/RimeSync'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-同步标识\"><a href=\"#2-同步标识\" class=\"headerlink\" title=\"2. 同步标识\"></a>2. 同步标识</h3><p>默认情况下，<code>RIME</code>会为随机生成每一个<code>UUID</code>作为标识。这个<code>UUID</code>会被用来区分來自不同机器/系统的个人词库和设置。</p>\n<p>如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑<code>installation.yaml</code>中如下所示的内容即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">installation_id:</span> <span class=\"string\">'loshine-macbook'</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线</p>\n<h2 id=\"my product\">我的成品</h2>\n\n<p>成品效果演示</p>\n<video src=\"/assets/video/鼠须管演示.mov\" controls=\"controls\" width=\"600\"><br>your browser does not support the video tag<br></video>\n\n<p>几个配置文件</p>\n<ul>\n<li>squirrel.custom.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 適用於【鼠鬚管】0.9.13+</span></span><br><span class=\"line\"><span class=\"comment\"># 位置：~/Library/Rime/squirrel.custom.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"comment\">#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局</span></span><br><span class=\"line\"><span class=\"attr\">  show_notifications_when:</span> appropriate        <span class=\"comment\"># 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></span><br><span class=\"line\"><span class=\"comment\">#  style/horizontal: true                     # 候選窗横向顯示</span></span><br><span class=\"line\"><span class=\"comment\">#  style/inline_preedit: false                # 非內嵌編碼行</span></span><br><span class=\"line\"><span class=\"comment\">#  style/font_face: \"PingFang SC,HanaMinA\"     # 我喜歡的字體名稱</span></span><br><span class=\"line\">  style/font_point: <span class=\"number\">18</span>                        <span class=\"comment\"># 字號</span></span><br><span class=\"line\">  style/corner_radius: <span class=\"number\">2</span>                      <span class=\"comment\"># 窗口圓角半徑</span></span><br><span class=\"line\">  style/border_height: <span class=\"number\">7</span>                      <span class=\"comment\"># 窗口邊界高度，大於圓角半徑才有效果</span></span><br><span class=\"line\">  style/border_width: <span class=\"number\">7</span>                       <span class=\"comment\"># 窗口邊界寬度，大於圓角半徑才有效果</span></span><br><span class=\"line\">  style/color_scheme: luna                    <span class=\"comment\"># 選擇配色方案</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></span><br><span class=\"line\"><span class=\"comment\">#   碧水 - aqua</span></span><br><span class=\"line\"><span class=\"comment\">#   青天 - azure</span></span><br><span class=\"line\"><span class=\"comment\">#   明月 - luna</span></span><br><span class=\"line\"><span class=\"comment\">#   墨池 - ink</span></span><br><span class=\"line\"><span class=\"comment\">#   孤寺 - lost_temple</span></span><br><span class=\"line\"><span class=\"comment\">#   暗堂 - dark_temple</span></span><br><span class=\"line\"><span class=\"comment\">#   星際我爭霸 - starcraft</span></span><br><span class=\"line\"><span class=\"comment\">#   谷歌 - google</span></span><br><span class=\"line\">  preset_color_schemes/textflow:</span><br><span class=\"line\"><span class=\"attr\">    author:</span> <span class=\"string\">\"name &lt;name@gmail.com&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">    back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#背景</span></span><br><span class=\"line\"><span class=\"attr\">    border_color:</span> <span class=\"number\">0xE0B693</span> <span class=\"comment\">#边框</span></span><br><span class=\"line\"><span class=\"attr\">    candidate_text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#非第一候选项</span></span><br><span class=\"line\"><span class=\"attr\">    hilited_back_color:</span> <span class=\"number\">0xEBECED</span> <span class=\"comment\">#拼音串高亮背景</span></span><br><span class=\"line\"><span class=\"attr\">    hilited_candidate_back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#第一候选项背景</span></span><br><span class=\"line\"><span class=\"attr\">    hilited_candidate_text_color:</span> <span class=\"number\">0xF57C75</span> <span class=\"comment\">#第一候选项</span></span><br><span class=\"line\"><span class=\"attr\">    hilited_text_color:</span> <span class=\"number\">0xFF6666</span> <span class=\"comment\">#拼音串高亮</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> Textflow</span><br><span class=\"line\"><span class=\"attr\">    text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#拼音串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Xcode</span></span><br><span class=\"line\">  app_options/com.apple.Xcode:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># alfred</span></span><br><span class=\"line\">  app_options/com.alfredapp.Alfred:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># Android Studio</span></span><br><span class=\"line\">  app_options/com.google.android.studio:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># atom</span></span><br><span class=\"line\">  app_options/com.github.atom:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>default.custom.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"attr\">  schema_list:</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin          <span class=\"comment\"># 朙月拼音</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin_fluency  <span class=\"comment\"># 朙月拼音 语句流</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> terra_pinyin         <span class=\"comment\"># 地球拼音 dì qiú pīn yīn</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: bopomofo             # 注音</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: jyutping             # 粵拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: cangjie5             # 倉頡五代</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: cangjie5_express     # 倉頡 快打模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: quick5               # 速成</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wubi86               # 五笔86</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> wubi_pinyin          <span class=\"comment\"># 五笔拼音混合輸入</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin        # 自然碼雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wugniu        # 吳語上海話（新派）</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: sampheng      # 中古漢語三拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: zyenpheng     # 中古漢語全拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> emoji         <span class=\"comment\"># emoji表情</span></span><br><span class=\"line\">&#123;% endhighlight %&#125;</span><br><span class=\"line\">* terra_pinyin.custom.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% highlight yaml %&#125;</span><br><span class=\"line\"><span class=\"comment\"># luna_pinyin.custom.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 在【地球拼音】裏使用Emoji表情</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 保存到Rime用戶文件夾後，重新部署生效</span></span><br><span class=\"line\"><span class=\"comment\"># ~/.config/ibus/rime  (linux)</span></span><br><span class=\"line\"><span class=\"comment\"># ~/Library/Rime       (macos)</span></span><br><span class=\"line\"><span class=\"comment\"># %APPDATA%\\Rime       (windows)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\">  schema/dependencies:</span><br><span class=\"line\"><span class=\"bullet\">    -</span> emoji</span><br><span class=\"line\"><span class=\"comment\">#  abc_segmentor/extra_tags:</span></span><br><span class=\"line\"><span class=\"comment\">#    - reverse_lookup</span></span><br><span class=\"line\"><span class=\"attr\">  reverse_lookup:</span></span><br><span class=\"line\"><span class=\"attr\">    dictionary:</span> emoji</span><br><span class=\"line\"><span class=\"attr\">    enable_completion:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    prefix:</span> <span class=\"string\">\"`\"</span></span><br><span class=\"line\"><span class=\"attr\">    tips:</span> 〔表情〕</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  punctuator:</span></span><br><span class=\"line\"><span class=\"attr\">    import_preset:</span> symbols</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  recognizer:</span></span><br><span class=\"line\"><span class=\"attr\">    import_preset:</span> default</span><br><span class=\"line\"><span class=\"attr\">    patterns:</span></span><br><span class=\"line\"><span class=\"attr\">      reverse_lookup:</span> <span class=\"string\">\"`[a-z]*'?$\"</span></span><br><span class=\"line\"><span class=\"attr\">      punct:</span> <span class=\"string\">\"^/([a-z]+|[0-9]0?)$\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>installation.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">distribution_code_name:</span> Squirrel</span><br><span class=\"line\"><span class=\"attr\">distribution_name:</span> <span class=\"string\">\"鼠鬚管\"</span></span><br><span class=\"line\"><span class=\"attr\">distribution_version:</span> <span class=\"number\">0.9</span><span class=\"number\">.26</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">install_time:</span> <span class=\"string\">\"Mon Aug  3 15:24:12 2015\"</span></span><br><span class=\"line\"><span class=\"attr\">installation_id:</span> <span class=\"string\">\"loshine-macbook\"</span></span><br><span class=\"line\"><span class=\"attr\">rime_version:</span> <span class=\"number\">1.2</span><span class=\"number\">.9</span></span><br><span class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Users/Loshine/我的坚果云/RimeSync'</span></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>很久之前就发现了RIME这个输入法，但因为在windows下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了mac作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#introduction\">简介</a></li>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#use\">使用</a></li>\n<li><a href=\"#custom\">自定义</a><ul>\n<li><a href=\"#input method\">输入方案</a></li>\n<li><a href=\"#show\">外观</a></li>\n<li><a href=\"#theme\">主题</a></li>\n<li><a href=\"#garbled\">生僻字乱码</a></li>\n<li><a href=\"#auto switch\">根据程序切换中英文</a></li>\n<li><a href=\"#emoji\">emoji表情以及特殊符号</a></li>\n<li><a href=\"#synchronize\">同步</a></li>\n<li><a href=\"#my product\">我的成品</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"introduction\">简介</h1>\n\n<p>RIME，全称是<strong>中州韵输入法引擎</strong>，是由<strong>佛振</strong>先生开发的跨平台开源输入法。</p>\n<p>它在不同平台上有不同的名字：</p>\n<ul>\n<li><strong>Windows</strong>：小狼毫 Weasel</li>\n<li><strong>Mac OS X</strong>： 鼠须管 Squirrel</li>\n<li><strong>Linux</strong>：ibus-rime or fcitx-rime</li>\n</ul>\n<p>其内置的输入方案包括</p>\n<ul>\n<li>朙月拼音</li>\n<li>朙月拼音 语句流</li>\n<li>朙月拼音 简化字模式</li>\n<li>朙月拼音 臺灣正體模式</li>\n<li>地球拼音 dì qiú pīn yīn</li>\n<li>注音</li>\n<li>注音 臺灣正體模式</li>\n<li>粵拼</li>\n<li>倉頡五代</li>\n<li>倉頡 快打模式</li>\n<li>速成</li>\n<li>五笔86</li>\n<li>五笔拼音混合輸入</li>\n<li>自然碼雙拼</li>\n<li>微軟雙拼</li>\n<li>智能ABC雙拼</li>\n<li>小鶴雙拼</li>\n<li>吳語上海話（新派）</li>\n<li>吳語上海話（老派）</li>\n<li>中古漢語三拼</li>\n<li>中古漢語全拼</li>\n<li>X-SAMPA 國際音標</li>\n<li>emoji表情</li>\n</ul>\n<p>再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案</p>\n<ul>\n<li>英文</li>\n<li>日语</li>\n<li>山人全息码</li>\n<li>……</li>\n</ul>\n<p>它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。</p>\n<p><img src=\"http://7xl94a.com1.z0.glb.clouddn.com/111.jpg\" alt=\"配色主题\"></p>\n<h1 id=\"install\">安装</h1>\n\n<p>前往<a href=\"http://rime.im/download/\">下载地址</a>选择对应的版本下载，Mac用户选择<code>鼠须管 Squirrel</code>即可。</p>\n<p>下载完成之后，解压zip压缩包，然后打开<code>Squirrel-versioncode.pkg</code>按步骤安装即可。</p>\n<h1 id=\"use\">使用</h1>\n\n<ol>\n<li>Mac用户在输入源中添加<strong>鼠须管</strong></li>\n<li>按<code>⌘ + Space</code>切换输入法到<strong>鼠须管</strong></li>\n<li>按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入</li>\n<li>Enjoy it！</li>\n</ol>\n<h1 id=\"custom\">自定义</h1>\n\n<p>点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的<strong>配置文件</strong>。鼠须管的配置文件都是<code>yaml</code>格式的，我们如果想要自定义，可以新建一个<code>*.custom.yaml</code>对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。</p>\n<h2 id=\"input method\">输入方案</h2>\n\n<p>新建一个<code>default.custom.yaml</code>文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记<strong>重新部署</strong>一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"attr\">  schema_list:</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin          <span class=\"comment\"># 朙月拼音</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin_fluency  <span class=\"comment\"># 朙月拼音 语句流</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> terra_pinyin         <span class=\"comment\"># 地球拼音 dì qiú pīn yīn</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: bopomofo             # 注音</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: jyutping             # 粵拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: cangjie5             # 倉頡五代</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: cangjie5_express     # 倉頡 快打模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: quick5               # 速成</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wubi86               # 五笔86</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> wubi_pinyin          <span class=\"comment\"># 五笔拼音混合輸入</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin        # 自然碼雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wugniu        # 吳語上海話（新派）</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: sampheng      # 中古漢語三拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: zyenpheng     # 中古漢語全拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> emoji         <span class=\"comment\"># emoji表情</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"show\">外观</h2>\n\n<p>新建一个<code>squirrel.custom.yaml</code>文件，向其中写入如下内容，然后根据自己的需求修改。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 適用於【鼠鬚管】0.9.13+</span></span><br><span class=\"line\"><span class=\"comment\"># 位置：~/Library/Rime/squirrel.custom.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"comment\">#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局</span></span><br><span class=\"line\"><span class=\"comment\">#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></span><br><span class=\"line\"><span class=\"comment\">#  style/horizontal: true        # 候選窗横向顯示</span></span><br><span class=\"line\"><span class=\"comment\">#  style/inline_preedit: false   # 非內嵌編碼行</span></span><br><span class=\"line\"><span class=\"comment\">#  style/font_face: \"儷黑 Pro\"    # 我喜歡的字體名稱</span></span><br><span class=\"line\"><span class=\"comment\">#  style/font_point: 21          # 字號</span></span><br><span class=\"line\"><span class=\"comment\">#  style/corner_radius: 10       # 窗口圓角半徑</span></span><br><span class=\"line\"><span class=\"comment\">#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果</span></span><br><span class=\"line\"><span class=\"comment\">#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果</span></span><br><span class=\"line\"><span class=\"comment\">#  style/color_scheme: luna      # 選擇配色方案</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></span><br><span class=\"line\"><span class=\"comment\">#   碧水 - aqua</span></span><br><span class=\"line\"><span class=\"comment\">#   青天 - azure</span></span><br><span class=\"line\"><span class=\"comment\">#   明月 - luna</span></span><br><span class=\"line\"><span class=\"comment\">#   墨池 - ink</span></span><br><span class=\"line\"><span class=\"comment\">#   孤寺 - lost_temple</span></span><br><span class=\"line\"><span class=\"comment\">#   暗堂 - dark_temple</span></span><br><span class=\"line\"><span class=\"comment\">#   星際我爭霸 - starcraft</span></span><br><span class=\"line\"><span class=\"comment\">#   谷歌 - google</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"theme\">主题</h2>\n\n<p>如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。</p>\n<p>还是在<code>squirrel.custom.yaml</code>中，在刚刚加入的内容后面加入如下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preset_color_schemes/textflow:</span><br><span class=\"line\"><span class=\"attr\">  author:</span> <span class=\"string\">\"name &lt;name@gmail.com&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">  back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#背景</span></span><br><span class=\"line\"><span class=\"attr\">  border_color:</span> <span class=\"number\">0xE0B693</span> <span class=\"comment\">#边框</span></span><br><span class=\"line\"><span class=\"attr\">  candidate_text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#非第一候选项</span></span><br><span class=\"line\"><span class=\"attr\">  hilited_back_color:</span> <span class=\"number\">0xEBECED</span> <span class=\"comment\">#拼音串高亮背景</span></span><br><span class=\"line\"><span class=\"attr\">  hilited_candidate_back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#第一候选项背景</span></span><br><span class=\"line\"><span class=\"attr\">  hilited_candidate_text_color:</span> <span class=\"number\">0xF57C75</span> <span class=\"comment\">#第一候选项</span></span><br><span class=\"line\"><span class=\"attr\">  hilited_text_color:</span> <span class=\"number\">0xFF6666</span> <span class=\"comment\">#拼音串高亮</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> Textflow</span><br><span class=\"line\"><span class=\"attr\">  text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#拼音串</span></span><br></pre></td></tr></table></figure>\n<p>然后启用这个主题就可以了</p>\n<p>如果你想要更多的配色，可以参照<a href=\"http://tieba.baidu.com/p/2445582839\">RIME吧：配色方案专帖</a></p>\n<h2 id=\"garbled\">生僻字乱码</h2>\n\n<p>生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。</p>\n<p>一般的选择是「<a href=\"http://fonts.jp/hanazono/\">花园明朝</a>」，下载下来安装好之后，将 <a href=\"#show\">外观</a> 这一步中的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">style/font_face: <span class=\"string\">\"儷黑 Pro\"</span>    <span class=\"comment\"># 我喜歡的字體名稱</span></span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">style/font_face: <span class=\"string\">\"PingFang SC,HanaMinA\"</span>    <span class=\"comment\"># 我喜歡的字體名稱</span></span><br></pre></td></tr></table></figure>\n<p>然后重新部署即可</p>\n<h2 id=\"auto switch\">根据程序切换中英文</h2>\n\n<p>鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。</p>\n<p>如在</p>\n<ul>\n<li>终端 <strong>Terminal</strong>、<strong>iTerm2</strong></li>\n<li>编辑器 <strong>sublime</strong>、<strong>atom</strong></li>\n<li>启动工具 <strong>QuickSilver</strong>、<strong>Alfred</strong></li>\n</ul>\n<p>中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入</p>\n<p>如果想要设置应用中输入法的初始状态，我们首先要查看应用的<code>Info.plist</code>文件得到该应用的<code>Bundle Identifier</code>，通常是形如<code>com.apple.Xcode</code>的字符串</p>\n<p>例如，要在<code>Xcode</code>中默认英文输入，又要在<code>Alfred</code>中恢复中文输入，可如下设定：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># example squirrel.custom.yaml</span></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\">  app_options/com.apple.Xcode:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  app_options/com.alfredapp.Alfred: &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"emoji\">emoji表情以及特殊符号</h2>\n\n<p>有时候我们会有输入<code>emoji</code>表情的需求，但仅仅只是开启了<code>emoji</code>输入方案的话，我们每次都要切换输入方案才可以输入<code>emoji</code>表情，还是很不方便的。如果可以直接在一种输入方案中加入<code>emoji</code>表情输入就更好了</p>\n<p>其实可以做到，你只需要这样</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># luna_pinyin.custom.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 在【朙月拼音】裏使用Emoji表情</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 保存到Rime用戶文件夾後，重新部署生效</span></span><br><span class=\"line\"><span class=\"comment\"># ~/.config/ibus/rime  (linux)</span></span><br><span class=\"line\"><span class=\"comment\"># ~/Library/Rime       (macos)</span></span><br><span class=\"line\"><span class=\"comment\"># %APPDATA%\\Rime       (windows)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\">  schema/dependencies:</span><br><span class=\"line\"><span class=\"bullet\">    -</span> emoji</span><br><span class=\"line\"><span class=\"attr\">  reverse_lookup:</span></span><br><span class=\"line\"><span class=\"attr\">    dictionary:</span> emoji</span><br><span class=\"line\"><span class=\"attr\">    enable_completion:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    prefix:</span> <span class=\"string\">\"`\"</span></span><br><span class=\"line\"><span class=\"attr\">    tips:</span> 〔表情〕</span><br></pre></td></tr></table></figure>\n<p>以上我们就完成了<code>emoji</code>表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧</p>\n<p>但是仅仅表情还不够，我们有时候需要输入形如<code>ⅺ</code>、<code>⑴</code>、<code>☁</code>之类的特殊符号，查看<code>symbols.yaml</code>我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？</p>\n<p>只需要在我们上面已经添加了<code>emoji</code>表情相关的配置文件末尾再加上如下配置即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">punctuator:</span></span><br><span class=\"line\"><span class=\"attr\">  import_preset:</span> symbols</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">recognizer:</span></span><br><span class=\"line\"><span class=\"attr\">  import_preset:</span> default</span><br><span class=\"line\"><span class=\"attr\">  patterns:</span></span><br><span class=\"line\"><span class=\"attr\">    reverse_lookup:</span> <span class=\"string\">\"`[a-z]*'?$\"</span></span><br><span class=\"line\"><span class=\"attr\">    punct:</span> <span class=\"string\">\"^/([a-z]+|[0-9]0?)$\"</span></span><br></pre></td></tr></table></figure>\n<p>大功告成，重新部署之后使用<code>/lm</code>看看吧，更多符号输入方式请查看<code>symbols.yaml</code></p>\n<h2 id=\"synchronize\">同步</h2>\n\n<p>做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？</p>\n<p><strong>当然可以！</strong></p>\n<p><code>RIME</code>是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用<strong>同步网盘</strong>或者<strong>U盘</strong>来同步。</p>\n<p>推荐国内用户使用<a href=\"https://jianguoyun.com/\">坚果云</a>作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐<a href=\"https://www.dropbox.com/\">DropBox</a></p>\n<h3 id=\"1-设定同步位置\"><a href=\"#1-设定同步位置\" class=\"headerlink\" title=\"1. 设定同步位置\"></a>1. 设定同步位置</h3><p>默认情况下，个人词库和配置都将备份到<code>RIME用户文件夹\\sync\\UUID</code>这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。</p>\n<p>直接編輯用戶文件夾下的<code>installation.yaml</code>，添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'D:\\Dropbox\\RimeSync'</span></span><br></pre></td></tr></table></figure>\n<p>又如 Mac 上添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Users/fred/Dropbox/RimeSync'</span></span><br></pre></td></tr></table></figure>\n<p>又如使用 USB 存儲來同步：（真實案例）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Volumes/USBDRIVE/RimeSync'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-同步标识\"><a href=\"#2-同步标识\" class=\"headerlink\" title=\"2. 同步标识\"></a>2. 同步标识</h3><p>默认情况下，<code>RIME</code>会为随机生成每一个<code>UUID</code>作为标识。这个<code>UUID</code>会被用来区分來自不同机器/系统的个人词库和设置。</p>\n<p>如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑<code>installation.yaml</code>中如下所示的内容即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">installation_id:</span> <span class=\"string\">'loshine-macbook'</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线</p>\n<h2 id=\"my product\">我的成品</h2>\n\n<p>成品效果演示</p>\n<video src=\"/assets/video/鼠须管演示.mov\" controls=\"controls\" width=\"600\"><br>your browser does not support the video tag<br></video>\n\n<p>几个配置文件</p>\n<ul>\n<li>squirrel.custom.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 適用於【鼠鬚管】0.9.13+</span></span><br><span class=\"line\"><span class=\"comment\"># 位置：~/Library/Rime/squirrel.custom.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"comment\">#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局</span></span><br><span class=\"line\"><span class=\"attr\">  show_notifications_when:</span> appropriate        <span class=\"comment\"># 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></span><br><span class=\"line\"><span class=\"comment\">#  style/horizontal: true                     # 候選窗横向顯示</span></span><br><span class=\"line\"><span class=\"comment\">#  style/inline_preedit: false                # 非內嵌編碼行</span></span><br><span class=\"line\"><span class=\"comment\">#  style/font_face: \"PingFang SC,HanaMinA\"     # 我喜歡的字體名稱</span></span><br><span class=\"line\">  style/font_point: <span class=\"number\">18</span>                        <span class=\"comment\"># 字號</span></span><br><span class=\"line\">  style/corner_radius: <span class=\"number\">2</span>                      <span class=\"comment\"># 窗口圓角半徑</span></span><br><span class=\"line\">  style/border_height: <span class=\"number\">7</span>                      <span class=\"comment\"># 窗口邊界高度，大於圓角半徑才有效果</span></span><br><span class=\"line\">  style/border_width: <span class=\"number\">7</span>                       <span class=\"comment\"># 窗口邊界寬度，大於圓角半徑才有效果</span></span><br><span class=\"line\">  style/color_scheme: luna                    <span class=\"comment\"># 選擇配色方案</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></span><br><span class=\"line\"><span class=\"comment\">#   碧水 - aqua</span></span><br><span class=\"line\"><span class=\"comment\">#   青天 - azure</span></span><br><span class=\"line\"><span class=\"comment\">#   明月 - luna</span></span><br><span class=\"line\"><span class=\"comment\">#   墨池 - ink</span></span><br><span class=\"line\"><span class=\"comment\">#   孤寺 - lost_temple</span></span><br><span class=\"line\"><span class=\"comment\">#   暗堂 - dark_temple</span></span><br><span class=\"line\"><span class=\"comment\">#   星際我爭霸 - starcraft</span></span><br><span class=\"line\"><span class=\"comment\">#   谷歌 - google</span></span><br><span class=\"line\">  preset_color_schemes/textflow:</span><br><span class=\"line\"><span class=\"attr\">    author:</span> <span class=\"string\">\"name &lt;name@gmail.com&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">    back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#背景</span></span><br><span class=\"line\"><span class=\"attr\">    border_color:</span> <span class=\"number\">0xE0B693</span> <span class=\"comment\">#边框</span></span><br><span class=\"line\"><span class=\"attr\">    candidate_text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#非第一候选项</span></span><br><span class=\"line\"><span class=\"attr\">    hilited_back_color:</span> <span class=\"number\">0xEBECED</span> <span class=\"comment\">#拼音串高亮背景</span></span><br><span class=\"line\"><span class=\"attr\">    hilited_candidate_back_color:</span> <span class=\"number\">0xFFFFFF</span> <span class=\"comment\">#第一候选项背景</span></span><br><span class=\"line\"><span class=\"attr\">    hilited_candidate_text_color:</span> <span class=\"number\">0xF57C75</span> <span class=\"comment\">#第一候选项</span></span><br><span class=\"line\"><span class=\"attr\">    hilited_text_color:</span> <span class=\"number\">0xFF6666</span> <span class=\"comment\">#拼音串高亮</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> Textflow</span><br><span class=\"line\"><span class=\"attr\">    text_color:</span> <span class=\"number\">0x000000</span> <span class=\"comment\">#拼音串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Xcode</span></span><br><span class=\"line\">  app_options/com.apple.Xcode:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># alfred</span></span><br><span class=\"line\">  app_options/com.alfredapp.Alfred:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># Android Studio</span></span><br><span class=\"line\">  app_options/com.google.android.studio:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># atom</span></span><br><span class=\"line\">  app_options/com.github.atom:</span><br><span class=\"line\"><span class=\"attr\">    ascii_mode:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>default.custom.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"attr\">  schema_list:</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin          <span class=\"comment\"># 朙月拼音</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> luna_pinyin_fluency  <span class=\"comment\"># 朙月拼音 语句流</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> terra_pinyin         <span class=\"comment\"># 地球拼音 dì qiú pīn yīn</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: bopomofo             # 注音</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: jyutping             # 粵拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: cangjie5             # 倉頡五代</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: cangjie5_express     # 倉頡 快打模式</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: quick5               # 速成</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wubi86               # 五笔86</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> wubi_pinyin          <span class=\"comment\"># 五笔拼音混合輸入</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin        # 自然碼雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wugniu        # 吳語上海話（新派）</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: sampheng      # 中古漢語三拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: zyenpheng     # 中古漢語全拼</span></span><br><span class=\"line\"><span class=\"comment\">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></span><br><span class=\"line\"><span class=\"attr\">    - schema:</span> emoji         <span class=\"comment\"># emoji表情</span></span><br><span class=\"line\">&#123;% endhighlight %&#125;</span><br><span class=\"line\">* terra_pinyin.custom.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% highlight yaml %&#125;</span><br><span class=\"line\"><span class=\"comment\"># luna_pinyin.custom.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 在【地球拼音】裏使用Emoji表情</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 保存到Rime用戶文件夾後，重新部署生效</span></span><br><span class=\"line\"><span class=\"comment\"># ~/.config/ibus/rime  (linux)</span></span><br><span class=\"line\"><span class=\"comment\"># ~/Library/Rime       (macos)</span></span><br><span class=\"line\"><span class=\"comment\"># %APPDATA%\\Rime       (windows)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\">  schema/dependencies:</span><br><span class=\"line\"><span class=\"bullet\">    -</span> emoji</span><br><span class=\"line\"><span class=\"comment\">#  abc_segmentor/extra_tags:</span></span><br><span class=\"line\"><span class=\"comment\">#    - reverse_lookup</span></span><br><span class=\"line\"><span class=\"attr\">  reverse_lookup:</span></span><br><span class=\"line\"><span class=\"attr\">    dictionary:</span> emoji</span><br><span class=\"line\"><span class=\"attr\">    enable_completion:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    prefix:</span> <span class=\"string\">\"`\"</span></span><br><span class=\"line\"><span class=\"attr\">    tips:</span> 〔表情〕</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  punctuator:</span></span><br><span class=\"line\"><span class=\"attr\">    import_preset:</span> symbols</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  recognizer:</span></span><br><span class=\"line\"><span class=\"attr\">    import_preset:</span> default</span><br><span class=\"line\"><span class=\"attr\">    patterns:</span></span><br><span class=\"line\"><span class=\"attr\">      reverse_lookup:</span> <span class=\"string\">\"`[a-z]*'?$\"</span></span><br><span class=\"line\"><span class=\"attr\">      punct:</span> <span class=\"string\">\"^/([a-z]+|[0-9]0?)$\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>installation.yaml</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">distribution_code_name:</span> Squirrel</span><br><span class=\"line\"><span class=\"attr\">distribution_name:</span> <span class=\"string\">\"鼠鬚管\"</span></span><br><span class=\"line\"><span class=\"attr\">distribution_version:</span> <span class=\"number\">0.9</span><span class=\"number\">.26</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">install_time:</span> <span class=\"string\">\"Mon Aug  3 15:24:12 2015\"</span></span><br><span class=\"line\"><span class=\"attr\">installation_id:</span> <span class=\"string\">\"loshine-macbook\"</span></span><br><span class=\"line\"><span class=\"attr\">rime_version:</span> <span class=\"number\">1.2</span><span class=\"number\">.9</span></span><br><span class=\"line\"><span class=\"attr\">sync_dir:</span> <span class=\"string\">'/Users/Loshine/我的坚果云/RimeSync'</span></span><br></pre></td></tr></table></figure>"},{"title":"Kotlin中的委托属性","date":"2016-03-01T01:29:34.000Z","_content":"Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的**委托属性**这一特性。\n\n# 目录\n\n* [委托属性(Delegated Properties)](#what)\n* [如何使用](#how)\n* [实例讲解](#example)\n* [小结](#summary)\n\n<h1 id=\"what\">委托属性(Delegated Properties)</h1>\n\n我们先看看官网的定义：\n\n> 有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：\n> \n> - 延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。\n> - 可控性（observable properties）: 监听器得到关于这个特性变化的通知，\n> - 把所有特性储存在一个映射结构中，而不是分开每一条。\n> \n> 为了支持这些(或者其他)例子，Kotlin 采用 委托属性。\n\n简言之就是*简化手动实现的属性，将其抽象出一个库*。\n\n<h1 id=\"how\">如何使用</h1>\n\n## 定义一个委托\n\nKotlin 中有两种属性：用`var`修饰的可变属性和由`val`修饰的只读属性。由`val`修饰的只读属性使用的委托需要实现`ReadOnlyProperty`，而`var`修饰的可变属性则需要实现`ReadWriteProperty`\n\n在调用被委托的属性的`getter`和`setter`时，对应操作会被委托给`getValue()`以及`setValue()`。\n\n如实现一个最简单的委托`Delegate`：\n\n```kotlin\nclass Delegate {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n    }\n \n    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n        println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n    }\n}\n```\n\n## 使用定义好的委托属性\n\n语法为`val/var <property name>: <Type> by <expression>`\n\n```kotlin\nclass Example {\n    var p: String by Delegate()\n}\n```\n\n`by`后面的是委托表达式，我们调用这个对象并使用属性：\n\n```kotlin\nval e = Example()\nprintln(e.p)\n\ne.p = \"NEW\"\n```\n\n打印结果为：\n\n```bash\nExample@33a17727, thank you for delegating 'p' to me!\nNEW has been assigned to 'p' in Example@33a17727.\n```\n\n如上可知，`thisRef`对应的是拥有该被委托属性的对象实例，`property`则是属性，`value`是调用`setter`时的传入值。\n\n<h1 id=\"example\">实例讲解</h1>\n\n## lazy 懒加载\n\nKotlin 标准库自带的**懒加载委托**，在属性第一次被使用时才进行初始化。\n\n函数`lazy()`接受一个 lambda 然后返回一个可以作为委托`Lazy<T>` 实例来实现延迟属性: 第一个调用`getter`执行变量传递到`lazy()`并记录结果, 后来的`getter`调用只会返回记录的结果。\n\n```kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n\n其打印结果：\n\n```bash\ncomputed!   # 第一次使用时先初始化\nHello       # getter\nHello       # 后续都只会调用 getter\n```\n\n**懒加载委托**在实际编码中应用十分广泛，比如 Android 中我们可以把很多在`OnCreate`中需要进行的初始化操作使用**懒加载委托**来实现。\n\n## 使用委托操作 SharedPreferences\n\n本例出自《Kotlin for Android Developer》，使用了`when`表达式和委托属性巧妙地使得`SharedPrefences`的读写变得十分简便\n\n```kotlin\nclass Preference<T>(val context: Context, val name: String, val default: T) : ReadWriteProperty<Any?, T> {\n \n    val prefs by lazy { context.getSharedPreferences(\"default\", Context.MODE_PRIVATE) }\n \n    override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        return findPreference(name, default)\n    }\n \n    override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        putPreference(name, value)\n    }\n \n    private fun <U> findPreference(name: String, default: U): U = with(prefs) {\n        val res: Any = when (default) {\n            is Long -> getLong(name, default)\n            is String -> getString(name, default)\n            is Int -> getInt(name, default)\n            is Boolean -> getBoolean(name, default)\n            is Float -> getFloat(name, default)\n            else -> throw IllegalArgumentException(\"This type can be saved into Preferences\")\n        }\n \n        res as U\n    }\n \n    private fun <U> putPreference(name: String, value: U) = with(prefs.edit()) {\n        when (value) {\n            is Long -> putLong(name, value)\n            is String -> putString(name, value)\n            is Int -> putInt(name, value)\n            is Boolean -> putBoolean(name, value)\n            is Float -> putFloat(name, value)\n            else -> throw IllegalArgumentException(\"This type can be saved into Preferences\")\n        }.apply()\n    }\n}\n```\n\n在代码中我们可以如下使用\n\n```kotlin\nclass WhateverActivity : Activity() {\n    var aInt: Int by Preference(this, \"aInt\", 0)\n\n    fun whatever() {\n        println(aInt) // 会从 SharedPreference 取这个数据\n        aInt = 9 // 会将这个数据写入 SharedPreference\n    }\n}\n```\n\n从此操作`SharedPreferences`变得如此简单 ~\n\n## 简单实现一个 KotterKnife\n\nKotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。\n\nKotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能\n\n### 实现\n\n我们平时是这样初始化 View 的\n\n```kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    \n    val textView = findViewById(R.id.text_view) as TextView\n}\n```\n\n考虑到通常我们在`onCreate`方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。\n\n```kotlin\nval mTextView by lazy {\n    findViewById(R.id.text_view) as TextView\n}\n```\n\n对其抽取简化\n\n```kotlin\n@Suppress(\"UNCHECKED_CAST\")\nfun <V : View> Activity.bindView(id: Int): Lazy<V> = lazy {\n    viewFinder(id) as V\n}\n\nprivate val Activity.viewFinder: Activity.(Int) -> View?\n    get() = { findViewById(it) }\n```\n\n之后我们就可以在 Activity 中这样注入 View 了\n\n```kotlin\nval mTextView by bindView<TextView>(R.id.text_view)\n```\n\n如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 [KotterKnife源码](https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt)。\n\n<h1 id=\"summary\">小结</h1>\n\n本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的`getter`、`setter`直接绑定所以使用起来也十分灵活方便。\n\n总而言之：**这真是极好的**。\n","source":"_posts/2016-03-01-Kotlin中的委托属性.md","raw":"---\ntitle: Kotlin中的委托属性\ndate: 2016-03-01 09:29:34\ntags: [Kotlin,Android]\n---\nKotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的**委托属性**这一特性。\n\n# 目录\n\n* [委托属性(Delegated Properties)](#what)\n* [如何使用](#how)\n* [实例讲解](#example)\n* [小结](#summary)\n\n<h1 id=\"what\">委托属性(Delegated Properties)</h1>\n\n我们先看看官网的定义：\n\n> 有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：\n> \n> - 延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。\n> - 可控性（observable properties）: 监听器得到关于这个特性变化的通知，\n> - 把所有特性储存在一个映射结构中，而不是分开每一条。\n> \n> 为了支持这些(或者其他)例子，Kotlin 采用 委托属性。\n\n简言之就是*简化手动实现的属性，将其抽象出一个库*。\n\n<h1 id=\"how\">如何使用</h1>\n\n## 定义一个委托\n\nKotlin 中有两种属性：用`var`修饰的可变属性和由`val`修饰的只读属性。由`val`修饰的只读属性使用的委托需要实现`ReadOnlyProperty`，而`var`修饰的可变属性则需要实现`ReadWriteProperty`\n\n在调用被委托的属性的`getter`和`setter`时，对应操作会被委托给`getValue()`以及`setValue()`。\n\n如实现一个最简单的委托`Delegate`：\n\n```kotlin\nclass Delegate {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n    }\n \n    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n        println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n    }\n}\n```\n\n## 使用定义好的委托属性\n\n语法为`val/var <property name>: <Type> by <expression>`\n\n```kotlin\nclass Example {\n    var p: String by Delegate()\n}\n```\n\n`by`后面的是委托表达式，我们调用这个对象并使用属性：\n\n```kotlin\nval e = Example()\nprintln(e.p)\n\ne.p = \"NEW\"\n```\n\n打印结果为：\n\n```bash\nExample@33a17727, thank you for delegating 'p' to me!\nNEW has been assigned to 'p' in Example@33a17727.\n```\n\n如上可知，`thisRef`对应的是拥有该被委托属性的对象实例，`property`则是属性，`value`是调用`setter`时的传入值。\n\n<h1 id=\"example\">实例讲解</h1>\n\n## lazy 懒加载\n\nKotlin 标准库自带的**懒加载委托**，在属性第一次被使用时才进行初始化。\n\n函数`lazy()`接受一个 lambda 然后返回一个可以作为委托`Lazy<T>` 实例来实现延迟属性: 第一个调用`getter`执行变量传递到`lazy()`并记录结果, 后来的`getter`调用只会返回记录的结果。\n\n```kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n\n其打印结果：\n\n```bash\ncomputed!   # 第一次使用时先初始化\nHello       # getter\nHello       # 后续都只会调用 getter\n```\n\n**懒加载委托**在实际编码中应用十分广泛，比如 Android 中我们可以把很多在`OnCreate`中需要进行的初始化操作使用**懒加载委托**来实现。\n\n## 使用委托操作 SharedPreferences\n\n本例出自《Kotlin for Android Developer》，使用了`when`表达式和委托属性巧妙地使得`SharedPrefences`的读写变得十分简便\n\n```kotlin\nclass Preference<T>(val context: Context, val name: String, val default: T) : ReadWriteProperty<Any?, T> {\n \n    val prefs by lazy { context.getSharedPreferences(\"default\", Context.MODE_PRIVATE) }\n \n    override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        return findPreference(name, default)\n    }\n \n    override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        putPreference(name, value)\n    }\n \n    private fun <U> findPreference(name: String, default: U): U = with(prefs) {\n        val res: Any = when (default) {\n            is Long -> getLong(name, default)\n            is String -> getString(name, default)\n            is Int -> getInt(name, default)\n            is Boolean -> getBoolean(name, default)\n            is Float -> getFloat(name, default)\n            else -> throw IllegalArgumentException(\"This type can be saved into Preferences\")\n        }\n \n        res as U\n    }\n \n    private fun <U> putPreference(name: String, value: U) = with(prefs.edit()) {\n        when (value) {\n            is Long -> putLong(name, value)\n            is String -> putString(name, value)\n            is Int -> putInt(name, value)\n            is Boolean -> putBoolean(name, value)\n            is Float -> putFloat(name, value)\n            else -> throw IllegalArgumentException(\"This type can be saved into Preferences\")\n        }.apply()\n    }\n}\n```\n\n在代码中我们可以如下使用\n\n```kotlin\nclass WhateverActivity : Activity() {\n    var aInt: Int by Preference(this, \"aInt\", 0)\n\n    fun whatever() {\n        println(aInt) // 会从 SharedPreference 取这个数据\n        aInt = 9 // 会将这个数据写入 SharedPreference\n    }\n}\n```\n\n从此操作`SharedPreferences`变得如此简单 ~\n\n## 简单实现一个 KotterKnife\n\nKotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。\n\nKotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能\n\n### 实现\n\n我们平时是这样初始化 View 的\n\n```kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    \n    val textView = findViewById(R.id.text_view) as TextView\n}\n```\n\n考虑到通常我们在`onCreate`方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。\n\n```kotlin\nval mTextView by lazy {\n    findViewById(R.id.text_view) as TextView\n}\n```\n\n对其抽取简化\n\n```kotlin\n@Suppress(\"UNCHECKED_CAST\")\nfun <V : View> Activity.bindView(id: Int): Lazy<V> = lazy {\n    viewFinder(id) as V\n}\n\nprivate val Activity.viewFinder: Activity.(Int) -> View?\n    get() = { findViewById(it) }\n```\n\n之后我们就可以在 Activity 中这样注入 View 了\n\n```kotlin\nval mTextView by bindView<TextView>(R.id.text_view)\n```\n\n如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 [KotterKnife源码](https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt)。\n\n<h1 id=\"summary\">小结</h1>\n\n本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的`getter`、`setter`直接绑定所以使用起来也十分灵活方便。\n\n总而言之：**这真是极好的**。\n","slug":"Kotlin中的委托属性","published":1,"updated":"2016-03-03T16:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilcj3xmo000bphe9u9idbp51","content":"<p>Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的<strong>委托属性</strong>这一特性。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#what\">委托属性(Delegated Properties)</a></li>\n<li><a href=\"#how\">如何使用</a></li>\n<li><a href=\"#example\">实例讲解</a></li>\n<li><a href=\"#summary\">小结</a></li>\n</ul>\n<h1 id=\"what\">委托属性(Delegated Properties)</h1>\n\n<p>我们先看看官网的定义：</p>\n<blockquote>\n<p>有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：</p>\n<ul>\n<li>延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。</li>\n<li>可控性（observable properties）: 监听器得到关于这个特性变化的通知，</li>\n<li>把所有特性储存在一个映射结构中，而不是分开每一条。</li>\n</ul>\n<p>为了支持这些(或者其他)例子，Kotlin 采用 委托属性。</p>\n</blockquote>\n<p>简言之就是<em>简化手动实现的属性，将其抽象出一个库</em>。</p>\n<h1 id=\"how\">如何使用</h1>\n\n<h2 id=\"定义一个委托\"><a href=\"#定义一个委托\" class=\"headerlink\" title=\"定义一个委托\"></a>定义一个委托</h2><p>Kotlin 中有两种属性：用<code>var</code>修饰的可变属性和由<code>val</code>修饰的只读属性。由<code>val</code>修饰的只读属性使用的委托需要实现<code>ReadOnlyProperty</code>，而<code>var</code>修饰的可变属性则需要实现<code>ReadWriteProperty</code></p>\n<p>在调用被委托的属性的<code>getter</code>和<code>setter</code>时，对应操作会被委托给<code>getValue()</code>以及<code>setValue()</code>。</p>\n<p>如实现一个最简单的委托<code>Delegate</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Delegate</span> </span>&#123;</span><br><span class=\"line\">    operator <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any?, property: KProperty&lt;*&gt;</span>)</span>: String &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"$thisRef, thank you for delegating '$&#123;property.name&#125;' to me!\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    operator <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any?, property: KProperty&lt;*&gt;, value: String</span>)</span> &#123;</span></span><br><span class=\"line\">        println(<span class=\"string\">\"$value has been assigned to '$&#123;property.name&#125; in $thisRef.'\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用定义好的委托属性\"><a href=\"#使用定义好的委托属性\" class=\"headerlink\" title=\"使用定义好的委托属性\"></a>使用定义好的委托属性</h2><p>语法为<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\"><span class=\"keyword\">var</span> p</span>: String by Delegate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>by</code>后面的是委托表达式，我们调用这个对象并使用属性：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">val</span> e</span> = Example()</span><br><span class=\"line\">println(e.p)</span><br><span class=\"line\"></span><br><span class=\"line\">e.p = <span class=\"string\">\"NEW\"</span></span><br></pre></td></tr></table></figure>\n<p>打印结果为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example@33a17727, thank you <span class=\"keyword\">for</span> delegating <span class=\"string\">'p'</span> to me!</span><br><span class=\"line\">NEW has been assigned to <span class=\"string\">'p'</span> <span class=\"keyword\">in</span> Example@33a17727.</span><br></pre></td></tr></table></figure>\n<p>如上可知，<code>thisRef</code>对应的是拥有该被委托属性的对象实例，<code>property</code>则是属性，<code>value</code>是调用<code>setter</code>时的传入值。</p>\n<h1 id=\"example\">实例讲解</h1>\n\n<h2 id=\"lazy-懒加载\"><a href=\"#lazy-懒加载\" class=\"headerlink\" title=\"lazy 懒加载\"></a>lazy 懒加载</h2><p>Kotlin 标准库自带的<strong>懒加载委托</strong>，在属性第一次被使用时才进行初始化。</p>\n<p>函数<code>lazy()</code>接受一个 lambda 然后返回一个可以作为委托<code>Lazy&lt;T&gt;</code> 实例来实现延迟属性: 第一个调用<code>getter</code>执行变量传递到<code>lazy()</code>并记录结果, 后来的<code>getter</code>调用只会返回记录的结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">val</span> lazyValue</span>: String by lazy &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"computed!\"</span>)</span><br><span class=\"line\">    <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array&lt;String&gt;</span>)</span> &#123;</span></span><br><span class=\"line\">    println(lazyValue)</span><br><span class=\"line\">    println(lazyValue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其打印结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed!   <span class=\"comment\"># 第一次使用时先初始化</span></span><br><span class=\"line\">Hello       <span class=\"comment\"># getter</span></span><br><span class=\"line\">Hello       <span class=\"comment\"># 后续都只会调用 getter</span></span><br></pre></td></tr></table></figure>\n<p><strong>懒加载委托</strong>在实际编码中应用十分广泛，比如 Android 中我们可以把很多在<code>OnCreate</code>中需要进行的初始化操作使用<strong>懒加载委托</strong>来实现。</p>\n<h2 id=\"使用委托操作-SharedPreferences\"><a href=\"#使用委托操作-SharedPreferences\" class=\"headerlink\" title=\"使用委托操作 SharedPreferences\"></a>使用委托操作 SharedPreferences</h2><p>本例出自《Kotlin for Android Developer》，使用了<code>when</code>表达式和委托属性巧妙地使得<code>SharedPrefences</code>的读写变得十分简便</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preference</span>&lt;<span class=\"type\">T</span>&gt;</span>(<span class=\"variable\"><span class=\"keyword\">val</span> context</span>: Context, <span class=\"variable\"><span class=\"keyword\">val</span> name</span>: String, <span class=\"variable\"><span class=\"keyword\">val</span> default</span>: T) : ReadWriteProperty<span class=\"type\">&lt;Any?, T&gt;</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable\"><span class=\"keyword\">val</span> prefs by lazy &#123; context.getSharedPreferences(\"default\", Context.MODE_PRIVATE) &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    override fun getValue(thisRef</span>: Any?, property: KProperty<span class=\"type\">&lt;*&gt;</span>): T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findPreference(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any?, property: KProperty&lt;*&gt;, value: T</span>)</span> &#123;</span></span><br><span class=\"line\">        putPreference(name, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;U&gt;</span> <span class=\"title\">findPreference</span><span class=\"params\">(name: <span class=\"type\">String, default: U</span>)</span>: U = <span class=\"title\">with</span><span class=\"params\">(prefs)</span> &#123;</span></span><br><span class=\"line\">        <span class=\"variable\"><span class=\"keyword\">val</span> res</span>: Any = <span class=\"keyword\">when</span> (<span class=\"keyword\">default</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Long</span> -&gt; getLong(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> String -&gt; getString(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Int</span> -&gt; getInt(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Boolean</span> -&gt; getBoolean(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Float</span> -&gt; getFloat(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"This type can be saved into Preferences\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        res <span class=\"keyword\">as</span> U</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;U&gt;</span> <span class=\"title\">putPreference</span><span class=\"params\">(name: <span class=\"type\">String, value: U</span>)</span> = <span class=\"title\">with</span><span class=\"params\">(prefs.edit()</span>) &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">when</span> (value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Long</span> -&gt; putLong(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> String -&gt; putString(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Int</span> -&gt; putInt(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Boolean</span> -&gt; putBoolean(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Float</span> -&gt; putFloat(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"This type can be saved into Preferences\"</span>)</span><br><span class=\"line\">        &#125;.apply()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码中我们可以如下使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhateverActivity</span> : <span class=\"type\">Activity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"variable\"><span class=\"keyword\">var</span> aInt</span>: <span class=\"keyword\">Int</span> by Preference(this, <span class=\"string\">\"aInt\"</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whatever</span><span class=\"params\">()</span> &#123;</span></span><br><span class=\"line\">        println(aInt) <span class=\"comment\">// 会从 SharedPreference 取这个数据</span></span><br><span class=\"line\">        aInt = <span class=\"number\">9</span> <span class=\"comment\">// 会将这个数据写入 SharedPreference</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从此操作<code>SharedPreferences</code>变得如此简单 ~</p>\n<h2 id=\"简单实现一个-KotterKnife\"><a href=\"#简单实现一个-KotterKnife\" class=\"headerlink\" title=\"简单实现一个 KotterKnife\"></a>简单实现一个 KotterKnife</h2><p>KotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。</p>\n<p>KotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>我们平时是这样初始化 View 的</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle?</span>)</span> &#123;</span></span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable\"><span class=\"keyword\">val</span> textView</span> = findViewById(R.id.text_view) <span class=\"keyword\">as</span> TextView</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到通常我们在<code>onCreate</code>方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">val</span> mTextView by lazy &#123;</span><br><span class=\"line\">    findViewById(R.id.text_view) as TextView</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>对其抽取简化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Suppress(<span class=\"string\">\"UNCHECKED_CAST\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;V : View&gt;</span> Activity.<span class=\"title\">bindView</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span>: Lazy<span class=\"type\">&lt;V&gt;</span> = lazy &#123;</span></span><br><span class=\"line\">    viewFinder(id) <span class=\"keyword\">as</span> V</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"variable\"><span class=\"keyword\">val</span> Activity.viewFinder</span>: Activity.(<span class=\"keyword\">Int</span>) -&gt; View?</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() = &#123; findViewById(it) &#125;</span><br></pre></td></tr></table></figure>\n<p>之后我们就可以在 Activity 中这样注入 View 了</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">val</span> mTextView by bindView&lt;TextView&gt;(R.id.text_view)</span></span><br></pre></td></tr></table></figure>\n<p>如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 <a href=\"https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt\" target=\"_blank\" rel=\"external\">KotterKnife源码</a>。</p>\n<h1 id=\"summary\">小结</h1>\n\n<p>本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的<code>getter</code>、<code>setter</code>直接绑定所以使用起来也十分灵活方便。</p>\n<p>总而言之：<strong>这真是极好的</strong>。</p>\n","excerpt":"","more":"<p>Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的<strong>委托属性</strong>这一特性。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#what\">委托属性(Delegated Properties)</a></li>\n<li><a href=\"#how\">如何使用</a></li>\n<li><a href=\"#example\">实例讲解</a></li>\n<li><a href=\"#summary\">小结</a></li>\n</ul>\n<h1 id=\"what\">委托属性(Delegated Properties)</h1>\n\n<p>我们先看看官网的定义：</p>\n<blockquote>\n<p>有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：</p>\n<ul>\n<li>延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。</li>\n<li>可控性（observable properties）: 监听器得到关于这个特性变化的通知，</li>\n<li>把所有特性储存在一个映射结构中，而不是分开每一条。</li>\n</ul>\n<p>为了支持这些(或者其他)例子，Kotlin 采用 委托属性。</p>\n</blockquote>\n<p>简言之就是<em>简化手动实现的属性，将其抽象出一个库</em>。</p>\n<h1 id=\"how\">如何使用</h1>\n\n<h2 id=\"定义一个委托\"><a href=\"#定义一个委托\" class=\"headerlink\" title=\"定义一个委托\"></a>定义一个委托</h2><p>Kotlin 中有两种属性：用<code>var</code>修饰的可变属性和由<code>val</code>修饰的只读属性。由<code>val</code>修饰的只读属性使用的委托需要实现<code>ReadOnlyProperty</code>，而<code>var</code>修饰的可变属性则需要实现<code>ReadWriteProperty</code></p>\n<p>在调用被委托的属性的<code>getter</code>和<code>setter</code>时，对应操作会被委托给<code>getValue()</code>以及<code>setValue()</code>。</p>\n<p>如实现一个最简单的委托<code>Delegate</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Delegate</span> </span>&#123;</span><br><span class=\"line\">    operator <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any?, property: KProperty&lt;*&gt;</span>)</span>: String &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"$thisRef, thank you for delegating '$&#123;property.name&#125;' to me!\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    operator <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any?, property: KProperty&lt;*&gt;, value: String</span>)</span> &#123;</span></span><br><span class=\"line\">        println(<span class=\"string\">\"$value has been assigned to '$&#123;property.name&#125; in $thisRef.'\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用定义好的委托属性\"><a href=\"#使用定义好的委托属性\" class=\"headerlink\" title=\"使用定义好的委托属性\"></a>使用定义好的委托属性</h2><p>语法为<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\"><span class=\"keyword\">var</span> p</span>: String by Delegate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>by</code>后面的是委托表达式，我们调用这个对象并使用属性：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">val</span> e</span> = Example()</span><br><span class=\"line\">println(e.p)</span><br><span class=\"line\"></span><br><span class=\"line\">e.p = <span class=\"string\">\"NEW\"</span></span><br></pre></td></tr></table></figure>\n<p>打印结果为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example@33a17727, thank you <span class=\"keyword\">for</span> delegating <span class=\"string\">'p'</span> to me!</span><br><span class=\"line\">NEW has been assigned to <span class=\"string\">'p'</span> <span class=\"keyword\">in</span> Example@33a17727.</span><br></pre></td></tr></table></figure>\n<p>如上可知，<code>thisRef</code>对应的是拥有该被委托属性的对象实例，<code>property</code>则是属性，<code>value</code>是调用<code>setter</code>时的传入值。</p>\n<h1 id=\"example\">实例讲解</h1>\n\n<h2 id=\"lazy-懒加载\"><a href=\"#lazy-懒加载\" class=\"headerlink\" title=\"lazy 懒加载\"></a>lazy 懒加载</h2><p>Kotlin 标准库自带的<strong>懒加载委托</strong>，在属性第一次被使用时才进行初始化。</p>\n<p>函数<code>lazy()</code>接受一个 lambda 然后返回一个可以作为委托<code>Lazy&lt;T&gt;</code> 实例来实现延迟属性: 第一个调用<code>getter</code>执行变量传递到<code>lazy()</code>并记录结果, 后来的<code>getter</code>调用只会返回记录的结果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">val</span> lazyValue</span>: String by lazy &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"computed!\"</span>)</span><br><span class=\"line\">    <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array&lt;String&gt;</span>)</span> &#123;</span></span><br><span class=\"line\">    println(lazyValue)</span><br><span class=\"line\">    println(lazyValue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其打印结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed!   <span class=\"comment\"># 第一次使用时先初始化</span></span><br><span class=\"line\">Hello       <span class=\"comment\"># getter</span></span><br><span class=\"line\">Hello       <span class=\"comment\"># 后续都只会调用 getter</span></span><br></pre></td></tr></table></figure>\n<p><strong>懒加载委托</strong>在实际编码中应用十分广泛，比如 Android 中我们可以把很多在<code>OnCreate</code>中需要进行的初始化操作使用<strong>懒加载委托</strong>来实现。</p>\n<h2 id=\"使用委托操作-SharedPreferences\"><a href=\"#使用委托操作-SharedPreferences\" class=\"headerlink\" title=\"使用委托操作 SharedPreferences\"></a>使用委托操作 SharedPreferences</h2><p>本例出自《Kotlin for Android Developer》，使用了<code>when</code>表达式和委托属性巧妙地使得<code>SharedPrefences</code>的读写变得十分简便</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preference</span>&lt;<span class=\"type\">T</span>&gt;</span>(<span class=\"variable\"><span class=\"keyword\">val</span> context</span>: Context, <span class=\"variable\"><span class=\"keyword\">val</span> name</span>: String, <span class=\"variable\"><span class=\"keyword\">val</span> default</span>: T) : ReadWriteProperty<span class=\"type\">&lt;Any?, T&gt;</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable\"><span class=\"keyword\">val</span> prefs by lazy &#123; context.getSharedPreferences(\"default\", Context.MODE_PRIVATE) &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    override fun getValue(thisRef</span>: Any?, property: KProperty<span class=\"type\">&lt;*&gt;</span>): T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findPreference(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(thisRef: <span class=\"type\">Any?, property: KProperty&lt;*&gt;, value: T</span>)</span> &#123;</span></span><br><span class=\"line\">        putPreference(name, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;U&gt;</span> <span class=\"title\">findPreference</span><span class=\"params\">(name: <span class=\"type\">String, default: U</span>)</span>: U = <span class=\"title\">with</span><span class=\"params\">(prefs)</span> &#123;</span></span><br><span class=\"line\">        <span class=\"variable\"><span class=\"keyword\">val</span> res</span>: Any = <span class=\"keyword\">when</span> (<span class=\"keyword\">default</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Long</span> -&gt; getLong(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> String -&gt; getString(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Int</span> -&gt; getInt(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Boolean</span> -&gt; getBoolean(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Float</span> -&gt; getFloat(name, <span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"This type can be saved into Preferences\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        res <span class=\"keyword\">as</span> U</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;U&gt;</span> <span class=\"title\">putPreference</span><span class=\"params\">(name: <span class=\"type\">String, value: U</span>)</span> = <span class=\"title\">with</span><span class=\"params\">(prefs.edit()</span>) &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">when</span> (value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Long</span> -&gt; putLong(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> String -&gt; putString(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Int</span> -&gt; putInt(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Boolean</span> -&gt; putBoolean(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"keyword\">Float</span> -&gt; putFloat(name, value)</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"This type can be saved into Preferences\"</span>)</span><br><span class=\"line\">        &#125;.apply()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码中我们可以如下使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhateverActivity</span> : <span class=\"type\">Activity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"variable\"><span class=\"keyword\">var</span> aInt</span>: <span class=\"keyword\">Int</span> by Preference(this, <span class=\"string\">\"aInt\"</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">whatever</span><span class=\"params\">()</span> &#123;</span></span><br><span class=\"line\">        println(aInt) <span class=\"comment\">// 会从 SharedPreference 取这个数据</span></span><br><span class=\"line\">        aInt = <span class=\"number\">9</span> <span class=\"comment\">// 会将这个数据写入 SharedPreference</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从此操作<code>SharedPreferences</code>变得如此简单 ~</p>\n<h2 id=\"简单实现一个-KotterKnife\"><a href=\"#简单实现一个-KotterKnife\" class=\"headerlink\" title=\"简单实现一个 KotterKnife\"></a>简单实现一个 KotterKnife</h2><p>KotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。</p>\n<p>KotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>我们平时是这样初始化 View 的</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle?</span>)</span> &#123;</span></span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable\"><span class=\"keyword\">val</span> textView</span> = findViewById(R.id.text_view) <span class=\"keyword\">as</span> TextView</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到通常我们在<code>onCreate</code>方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">val</span> mTextView by lazy &#123;</span><br><span class=\"line\">    findViewById(R.id.text_view) as TextView</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>对其抽取简化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Suppress(<span class=\"string\">\"UNCHECKED_CAST\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;V : View&gt;</span> Activity.<span class=\"title\">bindView</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span>: Lazy<span class=\"type\">&lt;V&gt;</span> = lazy &#123;</span></span><br><span class=\"line\">    viewFinder(id) <span class=\"keyword\">as</span> V</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"variable\"><span class=\"keyword\">val</span> Activity.viewFinder</span>: Activity.(<span class=\"keyword\">Int</span>) -&gt; View?</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() = &#123; findViewById(it) &#125;</span><br></pre></td></tr></table></figure>\n<p>之后我们就可以在 Activity 中这样注入 View 了</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">val</span> mTextView by bindView&lt;TextView&gt;(R.id.text_view)</span></span><br></pre></td></tr></table></figure>\n<p>如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 <a href=\"https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt\">KotterKnife源码</a>。</p>\n<h1 id=\"summary\">小结</h1>\n\n<p>本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的<code>getter</code>、<code>setter</code>直接绑定所以使用起来也十分灵活方便。</p>\n<p>总而言之：<strong>这真是极好的</strong>。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cilcj3xm30000phe9ecmsmozq","tag_id":"cilcj3xma0002phe9w45oga3n","_id":"cilcj3xmi0007phe9gzapkp37"},{"post_id":"cilcj3xm70001phe9z4eb9gu6","tag_id":"cilcj3xmg0005phe9r6jystgy","_id":"cilcj3xmq000dphe96i06kdep"},{"post_id":"cilcj3xm70001phe9z4eb9gu6","tag_id":"cilcj3xmo000aphe9vt80b8li","_id":"cilcj3xmr000ephe900jwl0n2"},{"post_id":"cilcj3xmd0003phe9uv40sg01","tag_id":"cilcj3xmq000cphe93msjfiyt","_id":"cilcj3xmt000hphe9icsz12cx"},{"post_id":"cilcj3xmd0003phe9uv40sg01","tag_id":"cilcj3xmr000fphe97mwojps7","_id":"cilcj3xmt000iphe9l8tn494g"},{"post_id":"cilcj3xme0004phe90ke2v133","tag_id":"cilcj3xmo000aphe9vt80b8li","_id":"cilcj3xmu000lphe93mqvw1yx"},{"post_id":"cilcj3xme0004phe90ke2v133","tag_id":"cilcj3xmg0005phe9r6jystgy","_id":"cilcj3xmu000mphe9vb76us60"},{"post_id":"cilcj3xmh0006phe9caobovqn","tag_id":"cilcj3xmr000fphe97mwojps7","_id":"cilcj3xmu000pphe9u96ipi8m"},{"post_id":"cilcj3xmh0006phe9caobovqn","tag_id":"cilcj3xmu000nphe9wuv5aone","_id":"cilcj3xmu000qphe9ovelw8sl"},{"post_id":"cilcj3xmi0008phe9o9kg4pmm","tag_id":"cilcj3xmr000fphe97mwojps7","_id":"cilcj3xmv000sphe9nn2hxhtv"},{"post_id":"cilcj3xml0009phe9us789ciy","tag_id":"cilcj3xmv000rphe9y3f356xg","_id":"cilcj3xmw000uphe9cyih8qs5"},{"post_id":"cilcj3xmo000bphe9u9idbp51","tag_id":"cilcj3xmv000tphe9ngsixnp6","_id":"cilcj3xmx000wphe9q9novh69"},{"post_id":"cilcj3xmo000bphe9u9idbp51","tag_id":"cilcj3xmr000fphe97mwojps7","_id":"cilcj3xmx000xphe9w91cko06"}],"Tag":[{"name":"jekyll, github, github-page","_id":"cilcj3xma0002phe9w45oga3n"},{"name":"设计模式","_id":"cilcj3xmg0005phe9r6jystgy"},{"name":"Java","_id":"cilcj3xmo000aphe9vt80b8li"},{"name":"Android Studio","_id":"cilcj3xmq000cphe93msjfiyt"},{"name":"Android","_id":"cilcj3xmr000fphe97mwojps7"},{"name":"Volley","_id":"cilcj3xmu000nphe9wuv5aone"},{"name":"RIME","_id":"cilcj3xmv000rphe9y3f356xg"},{"name":"Kotlin","_id":"cilcj3xmv000tphe9ngsixnp6"}]}}