<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饭窝</title>
  <subtitle>活捉一只 Android 狗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://loshine.me/"/>
  <updated>2016-11-16T16:56:21.000Z</updated>
  <id>https://loshine.me/</id>
  
  <author>
    <name>Loshine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Yarn 下一代 Node 包管理器</title>
    <link href="https://loshine.me/2016/10/22/yarn-next-generation-node-package-manager/"/>
    <id>https://loshine.me/2016/10/22/yarn-next-generation-node-package-manager/</id>
    <published>2016-10-21T17:22:47.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近前端圈子里最热的话题应该就是 Facebook 新出的包管理器—— Yarn 了，它解决了前端工程师构建项目中许多痛点，类比到 Java 圈子大概就是从 Maven 切换到 Gradle 的爽快吧。</p>
<a id="more"></a>
<p>截止到10月22日，Yarn 发布短短十多天就已经达到了让人惊叹的 star 数量</p>
<p><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f90dx6pkytj30mk02qq34.jpg" alt=""></p>
<p>这成绩简直吓死人了，那么接下来就稍微介绍一下它为什么好，为什么这么多人想要用它替换掉 NPM，以及我们该如何使用它吧。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>简介还用怎么说呢，你只需要知道它是用来替换 NPM 的就可以了。</p>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><p>类似 <strong>Gradle</strong>，<strong>Yarn</strong> 会把使用过的模块在本地缓存一份，如果下次还要用到相同版本的模块，那么将会直接使用本地的而不是访问网络重新获取一份。</p>
<p>这个特性碾压 <strong>NPM</strong> 了啊有木有！我之前使用 <strong>NPM</strong> 的时候一直想吐槽这个来着，如果全局安装项目就会依赖环境，如果不全局安装那么每个项目都要重新下载一次包，浪费时间和资源。</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>安装之前会验证文件完整性，所以不用担心安装到损坏的文件啦</p>
<h2 id="可靠"><a href="#可靠" class="headerlink" title="可靠"></a>可靠</h2><p><strong>Facebook</strong> 都把它用在生产环境中了，<strong>Google</strong> 也要参与维护了，<strong>Github</strong> 上那么多的 star，绝壁可靠了吧</p>
<h2 id="更优雅的命令"><a href="#更优雅的命令" class="headerlink" title="更优雅的命令"></a>更优雅的命令</h2><p>命令相比起 <strong>NPM</strong> 更容易理解，默认的设置足够贴心，感觉要起飞了</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>说了这么多也心动了，那么我们就开始安装 <strong>Yarn</strong> 吧。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>笔者使用的是 Mac，所以只会介绍 Mac 的安装方法，其它方式请参照 <a href="https://yarnpkg.com/en/docs/install" target="_blank" rel="external">Installation Guide</a></p>
</blockquote>
<p>Mac 上有三种安装方式，推荐使用 <strong>Homebrew</strong> 安装。</p>
<h3 id="Homebrew安装"><a href="#Homebrew安装" class="headerlink" title="Homebrew安装"></a>Homebrew安装</h3><p>输入以下命令即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install yarn</div></pre></td></tr></table></figure>
<p>如果使用 <strong>NVM</strong> 的话，可以删除依赖中的 node：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall node</div></pre></td></tr></table></figure>
<h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><p>下载官网提供的安装脚本来安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- -L https://yarnpkg.com/install.sh | bash</div></pre></td></tr></table></figure>
<h3 id="npm-安装"><a href="#npm-安装" class="headerlink" title="npm 安装"></a>npm 安装</h3><p>这是最不推荐的一个方式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --global yarn</div></pre></td></tr></table></figure>
<h3 id="验证安装成功"><a href="#验证安装成功" class="headerlink" title="验证安装成功"></a>验证安装成功</h3><p>选择以上三个方法之中的任意一种安装成功之后，运行如下命令检测是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn --version</div></pre></td></tr></table></figure>
<p>如果提示没有命令，去修改<code>.zshrc</code>（或<code>.profile</code>, <code>.bashrc</code>）添加如下语句</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.yarn/bin"</span></div></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>安装完毕了，那么就要使用它了，下面是一些常用命令和 <strong>NPM</strong> 对应命令的对照表</p>
<table>
<thead>
<tr>
<th>作用</th>
<th>NPM 命令</th>
<th>Yarn 命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>安装</td>
<td>npm install</td>
<td>yarn</td>
</tr>
<tr>
<td>安装某个包</td>
<td>npm install xxx —save</td>
<td>yarn add xxx</td>
</tr>
<tr>
<td>删除某个包</td>
<td>npm uninstall xxx —save</td>
<td>yarn remove xxx</td>
</tr>
<tr>
<td>开发模式下安装某个包</td>
<td>npm install xxx —save-dev</td>
<td>yarn add xxx —dev</td>
</tr>
<tr>
<td>更新</td>
<td>npm update —save</td>
<td>yarn upgrade</td>
</tr>
<tr>
<td>全局安装</td>
<td>npm install xxx –global</td>
<td>yarn global add xxx</td>
</tr>
</tbody>
</table>
<p>还有一些包发布者才会用到的命令就不作详细讲解了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>yarn 目前来说已经可以做到替换 npm 了，赶紧使用它换取更高的工作效率吧，Enjoy it~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近前端圈子里最热的话题应该就是 Facebook 新出的包管理器—— Yarn 了，它解决了前端工程师构建项目中许多痛点，类比到 Java 圈子大概就是从 Maven 切换到 Gradle 的爽快吧。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Node" scheme="https://loshine.me/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>集成友盟分析和推送的一些坑</title>
    <link href="https://loshine.me/2016/10/11/umeng-analitics-and-push-service/"/>
    <id>https://loshine.me/2016/10/11/umeng-analitics-and-push-service/</id>
    <published>2016-10-10T17:22:47.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近公司的项目用到了友盟的统计和推送，在集成的过程中遇到了一点小坑，这里记录一下方便以后查阅。</p>
</blockquote>
<a id="more"></a>
<h1 id="集成统计"><a href="#集成统计" class="headerlink" title="集成统计"></a>集成统计</h1><h2 id="获得-Appkey"><a href="#获得-Appkey" class="headerlink" title="获得 Appkey"></a>获得 Appkey</h2><p>在集成友盟的统计 SDK 之前肯定要先注册帐号，添加新应用并获取 Appkey。</p>
<p><img src="http://dev.umeng.com/system/images/W1siZiIsIjIwMTQvMDEvMTcvMTNfNTJfMzBfMjI4X2RldjUucG5nIl1d/dev5.png" alt="app_key"></p>
<h2 id="导入-SDK"><a href="#导入-SDK" class="headerlink" title="导入 SDK"></a>导入 SDK</h2><p>官网提供了两种导入方式：</p>
<ol>
<li>下载集成</li>
<li>使用 Gradle 集成</li>
</ol>
<p>在这里建议使用 Android Studio 并且使用 Gradle 集成，非常简单方便，只需要添加如下依赖即可：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">   <span class="keyword">compile</span> <span class="string">'com.umeng.analytics:analytics:latest.integration'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>latest.integration</code>代表友盟统计的最新版本，笔者使用时最新版本为<code>6.0.0</code></p>
</blockquote>
<h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><p>接下来修改<code>AndroidManifest.xml</code>文件添加权限，填写 <strong>Appkey</strong> 以及填写<strong>渠道 id</strong> ：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest……</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">application</span> ……&gt;</span></div><div class="line">        ……</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> ……/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:value</span>=<span class="string">"YOUR_APP_KEY"</span> <span class="attr">android:name</span>=<span class="string">"UMENG_APPKEY"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:value</span>=<span class="string">"Channel ID"</span> <span class="attr">android:name</span>=<span class="string">"UMENG_CHANNEL"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>以上需要把<code>UMENG_APPKEY</code>替换成自己的应用的 <strong>Appkey</strong>，<code>UMENG_CHANNEL</code>替换成对应渠道的渠道号。多渠道打包可以参考美团的多渠道打包方案。</p>
</blockquote>
<h2 id="统计页面访问"><a href="#统计页面访问" class="headerlink" title="统计页面访问"></a>统计页面访问</h2><p>我司的应用界面全部由 Fragment 呈现，Activity 只用作管理 Fragment。</p>
<p>按照文档首先在 Application 类中调用<code>MobclickAgent.openActivityDurationTrack(false)</code> 禁止默认的页面统计方式，这样将不会再自动统计Activity。</p>
<p>然后封装一下 <strong>BaseActivity</strong> 以统计时长：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        MobclickAgent.onResume(<span class="keyword">this</span>);       <span class="comment">//统计时长</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        MobclickAgent.onPause(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>封装 <strong>BaseFragment</strong> 以统计具体页面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="comment">// 统计页面</span></div><div class="line">        MobclickAgent.onPageStart(getPageName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        MobclickAgent.onPageEnd(getPageName()); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 默认页面名是类名，可以给子类重写</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPageName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass().getName();</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="帐号统计"><a href="#帐号统计" class="headerlink" title="帐号统计"></a>帐号统计</h2><p>暂时还未使用，之后补充。</p>
<h2 id="混淆配置"><a href="#混淆配置" class="headerlink" title="混淆配置"></a>混淆配置</h2><p>按官方文档配置混淆，以免混淆之后的错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-keepclassmembers class * &#123;</div><div class="line">    public &lt;init&gt; (org.json.JSONObject);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keep public class [您的应用包名].R$*&#123;</div><div class="line">    public static final int *;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers enum * &#123;</div><div class="line">    public static **[] values();</div><div class="line">    public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用集成测试"><a href="#使用集成测试" class="headerlink" title="使用集成测试"></a>使用集成测试</h2><p>首先在 <strong>Application</strong> 中打开测试模式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MobclickAgent.setDebugMode(BuildConfig.DEBUG);</div></pre></td></tr></table></figure>
<p>然后<a href="http://mobile.umeng.com/test_devices?ticket=ST-1450072700rPWK4t4q46xw-qpBXzk" target="_blank" rel="external">添加测试设备</a></p>
<p>这样所有测试数据不会进入应用正式的统计后台，只能在 <strong>管理–集成测试–实时日志</strong> 里查看，测试数据的数据就不会污染生产环境数据了。</p>
<h1 id="推送服务"><a href="#推送服务" class="headerlink" title="推送服务"></a>推送服务</h1><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>首先需要<a href="[http://push.umeng.com](http://push.umeng.com/">创建应用</a> )，获取应用对应的 <strong>AppKey</strong> 和 <strong>Umeng Message Secret</strong>。</p>
<p>因为之前使用了<strong>友盟统计</strong>，我们需要<strong>从已有应用中添加</strong>以保证 <strong>AppKey</strong> 的唯一。</p>
<h2 id="导入-PushSDK"><a href="#导入-PushSDK" class="headerlink" title="导入 PushSDK"></a>导入 PushSDK</h2><ol>
<li><p>把下载的 zip 文件解压缩（解压后的文件路径不能有中文）</p>
</li>
<li><p>把解压缩后得到的目录下的 <strong>PushSDK</strong> 当做 <strong>Module</strong> 导入到自己的工程</p>
</li>
<li><p>在之前的<code>AndroidManifest.xml</code>的基础上添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"UMENG_MESSAGE_SECRET"</span></div><div class="line">    <span class="attr">android:value</span>=<span class="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>build.gradle</code>添加模块</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':PushSDK'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h2><p>若主工程的<code>targetSdkVersion</code>为 23 及以上，需要运行时申请<strong>存储权限</strong>（<code>WRITE_EXTERNAL_STORAGE</code>），否则在 Android 6.0 及以上机型可能出现无法选举宿主的情况。</p>
<h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><p>在工程的 <strong>Application</strong> 类的<code>onCreate()</code> 方法中注册推送服务，无论推送是否开启都需要调用此方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PushAgent mPushAgent = PushAgent.getInstance(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// 注册推送服务，每次调用 register 方法都会回调该接口</span></div><div class="line">mPushAgent.register(<span class="keyword">new</span> IUmengRegisterCallback() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String deviceToken)</span> </span>&#123;</div><div class="line">        <span class="comment">// 注册成功会返回 device token</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String s, String s1)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在 <strong>BaseActivity</strong> 的<code>onCreate</code>方法中添加如下代码启动<strong>推送统计</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PushAgent.getInstance(context).onAppStart();</div></pre></td></tr></table></figure>
<h2 id="混淆配置-1"><a href="#混淆配置-1" class="headerlink" title="混淆配置"></a>混淆配置</h2><p>按照文档配置混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-dontwarn com.taobao.**</div><div class="line">-dontwarn anet.channel.**</div><div class="line">-dontwarn anetwork.channel.**</div><div class="line">-dontwarn org.android.**</div><div class="line">-dontwarn org.apache.thrift.**</div><div class="line">-dontwarn com.xiaomi.**</div><div class="line">-dontwarn com.huawei.**</div><div class="line"></div><div class="line">-keepattributes *Annotation*</div><div class="line"></div><div class="line">-keep class com.taobao.** &#123;*;&#125;</div><div class="line">-keep class org.android.** &#123;*;&#125;</div><div class="line">-keep class anet.channel.** &#123;*;&#125;</div><div class="line">-keep class com.umeng.** &#123;*;&#125;</div><div class="line">-keep class com.xiaomi.** &#123;*;&#125;</div><div class="line">-keep class com.huawei.** &#123;*;&#125;</div><div class="line">-keep class org.apache.thrift.** &#123;*;&#125;</div><div class="line"></div><div class="line">-keep public class **.R$*&#123;</div><div class="line">    public static final int *;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="集成推送中的一些坑"><a href="#集成推送中的一些坑" class="headerlink" title="集成推送中的一些坑"></a>集成推送中的一些坑</h2><h3 id="UnsatisfiedLinkError"><a href="#UnsatisfiedLinkError" class="headerlink" title="UnsatisfiedLinkError"></a>UnsatisfiedLinkError</h3><p>按照如上设置之后运行项目发现会如下报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.UnsatisfiedLinkError: dlopen failed: &quot;/data/data/应用包名/files/libtnet-3.1.7bk1.so&quot; is 32-bit instead of 64-bit</div></pre></td></tr></table></figure>
<p>需要在项目根目录的<code>build.gradle</code>中如下设置解决：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">       ndk &#123;</div><div class="line">           abiFilters <span class="string">"armeabi"</span>, <span class="string">"x86"</span></div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-BuildTypes-修改包名的错误"><a href="#使用-BuildTypes-修改包名的错误" class="headerlink" title="使用 BuildTypes 修改包名的错误"></a>使用 BuildTypes 修改包名的错误</h3><p>因为友盟使用 <strong>ApplicationId</strong> 作为包名利用反射获取资源文件，而当 <strong>BuildTypes</strong> 中的 <strong>ApplicationId</strong> 改变了导致应用包名和 Java 包名不一致的时候就会导致错误。此时需要在注册推送服务之前重新设置包名：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">PushAgent mPushAgent = PushAgent.getInstance(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// 首先重新设置包名</span></div><div class="line">mPushAgent.setResourcePackageName(R.class.getPackage().getName());</div><div class="line"><span class="comment">// 注册推送服务，每次调用 register 方法都会回调该接口</span></div><div class="line">mPushAgent.register(<span class="keyword">new</span> IUmengRegisterCallback() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String deviceToken)</span> </span>&#123;</div><div class="line">        <span class="comment">// 注册成功会返回 device token</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String s, String s1)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是实际项目中集成友盟统计和推送的方法了，查阅资料解决了一些官方文档没有提及的东西，希望可以给后来者一个参考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近公司的项目用到了友盟的统计和推送，在集成的过程中遇到了一点小坑，这里记录一下方便以后查阅。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
      <category term="友盟" scheme="https://loshine.me/tags/%E5%8F%8B%E7%9B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android开发最佳实践——2.使用Kotlin开发Android</title>
    <link href="https://loshine.me/2016/09/06/android-best-practice-p2-language/"/>
    <id>https://loshine.me/2016/09/06/android-best-practice-p2-language/</id>
    <published>2016-09-05T16:30:21.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引"><a href="#引" class="headerlink" title="引"></a>引</h1><p>Android 的官方开发语言是 Java，那为什么我们不继续使用 Java 开发 Android 呢？可能有人会说出很多理由，如：</p>
<ul>
<li>没有函数式的支持</li>
<li>Android 上只能用到 Java 6</li>
<li>令人烦躁的 NullPointException</li>
<li>……</li>
</ul>
<p>但实际上我觉得让我们选择 Kotlin 而不是 Java 的原因只有一个：<em>Kotlin 拥有更高的生产力</em>。</p>
<p>下面我就介绍一下 Kotlin 这个语言和它的好处，以及如何使用它编写 Android 程序。</p>
<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p><a href="https://kotlinlang.org/" target="_blank" rel="external">Kotlin</a> 是公司 <a href="https://www.jetbrains.com/" target="_blank" rel="external">JetBrains</a> 研发的语言（他们家代表产品有 IntellJ Idea、Android Studio 等）。他们的网站上，他们是这样描述 Kotlin 的：</p>
<blockquote>
<p>为 JVM、Android 和浏览器而生的静态编程语言。</p>
</blockquote>
<p>相比起其它 JVM 上的语言，它拥有无数的优点：</p>
<ul>
<li>为 Java 作扩展而不是重写 Java，所以它的方法数相比 Groovy 和 Scala 少了很多</li>
<li>和 Java 可以无缝调用，完美利用 JVM 生态</li>
<li>面向对象和函数式的结合，支持多种范式</li>
<li>现代化的语法，解决了 Java 无数痛点（如 NullPointException）</li>
<li>……</li>
</ul>
<h1 id="Kotlin-习语"><a href="#Kotlin-习语" class="headerlink" title="Kotlin 习语"></a>Kotlin 习语</h1><p>下面简单介绍一些 Kotlin 的习语，看看 Kotlin 是如何简化我们的编码的。</p>
<h2 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h2><p>Kotlin 中创建数据类非常简单，我们只需要如下编写代码即可：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> email: String)</div></pre></td></tr></table></figure>
<p>使用了<code>data class</code>关键词之后，Kotlin 会自动帮我们生成<code>getter</code>(如果属性是使用<code>var</code>声明的则还会生成<code>setter</code>)、<code>equals()</code>、<code>hashCode()</code>、<code>toString()</code>、<code>copy()</code>等常用方法。</p>
<p>而在 Java 中写一个 JavaBean，我们需要一个个声明属性并写出它们对应的<code>getter</code>、<code>setter</code>以及其它代码，相比之下 Kotlin 的代码量小了一大半。</p>
<h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><p>因为历史原因我们还在使用 Java6 编写 Android 代码，无法使用到 Java8 的新特性之 Lambda 表达式。而使用 Kotlin 的话是天生支持 Lambda 的，可以大大减少代码量。</p>
<p>Java ver:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mTextView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">// todo ...</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Kotlin ver:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mTextView.setOnClickListener &#123; v -&gt; <span class="comment">// todo...&#125;</span></div></pre></td></tr></table></figure>
<h2 id="默认非空"><a href="#默认非空" class="headerlink" title="默认非空"></a>默认非空</h2><p>Kotlin 里声明的类型都是默认非空的，可空的类型必须要在声明类型的时候在类型后面加一个<code>?</code>，而 Kotlin 也提供了语法糖来搞定<code>null</code>判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Student aStudent</div><div class="line"></div><div class="line">println(aStudent.name)</div></pre></td></tr></table></figure>
<p>该<code>aStudent</code>永远不会为空</p>
<p>而如果是一个可空的 Student</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Student? bStudent</div><div class="line"></div><div class="line">println(bStudent?.name)</div></pre></td></tr></table></figure>
<p>因为声明类型的时候添加了一个<code>?</code>表示可空，所以<code>bStudent</code>是可能为<code>null</code>的。但 Kotlin 提供的语法糖在使用的时候<code>bStudent?.name</code>不会产生 <strong>NullPointException</strong>。</p>
<h2 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h2><p>Java 中格式化字符串是这样的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String.format(Locale.getDefault(), <span class="string">"Name: %s"</span>, student.getName());</div></pre></td></tr></table></figure>
<p>Kotlin 中我们可以这样:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Name: <span class="subst">$&#123;student.name&#125;</span>"</span></div></pre></td></tr></table></figure>
<h2 id="when-表达式"><a href="#when-表达式" class="headerlink" title="when 表达式"></a>when 表达式</h2><p>Kotlin 里的 when 表达式非常强大，可以替换掉<code>if-elseif-else</code></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">when</span> (x) &#123;</div><div class="line">    <span class="keyword">is</span> Foo -&gt; ...</div><div class="line">    <span class="keyword">is</span> Bar -&gt; ...</div><div class="line">    <span class="keyword">else</span>   -&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面讲了一些常用的 Kotlin 特性，还有更多没有写出的如：<code>不可变集合</code>,<code>扩展函数</code>,<code>参数默认值</code>等。</p>
<p>我个人的体验是使用 Kotlin 可以大大减少模版代码，让 Coding 更加愉悦。推荐在没有历史包袱的项目中使用。</p>
<p>但如果是有历史包袱的项目或者项目组成员不愿意去另外学习一门语言的话，那可能就无法享受到 Kotlin 的好处了，大家酌情选择即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h1&gt;&lt;p&gt;Android 的官方开发语言是 Java，那为什么我们不继续使用 Java 开发 Android 呢？可能有人会说出很多理由，如：&lt;/p&gt;
&lt;ul
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发最佳实践——1.接口设计</title>
    <link href="https://loshine.me/2016/09/01/android-best-practice-p1-interface-design/"/>
    <id>https://loshine.me/2016/09/01/android-best-practice-p1-interface-design/</id>
    <published>2016-09-01T01:51:21.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个项目刚开始的时候，最需要确认的就是接口设计了：数据如何传递，使用什么格式什么协议乃至如何保证安全性。如果一个项目的接口设计不合理——比如没有考虑到安全性，后期为了增加安全验证又要对部分 API 推倒重做，那么前端（泛指 Android、iOS 以及 Web）就必须对整个项目进行改动，甚至可能导致之前发布的版本无法使用的囧事。</p>
<p>那么本文就谈谈我认为的一个好的接口应该是如何设计的。</p>
<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>使用 RESTful 风格的 API 设计。</p>
<h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p>使用 HTTPS 协议，保证 HTTP 的方便的同时保证一定的安全性。</p>
<h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><p>尽量部署在专属域名下，如 github：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.github.com/</div></pre></td></tr></table></figure>
<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>应该把版本号放到 URL 中，如 API 有改版的时候，应保证老版的 API 持续提供服务一段时间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.example.com/v1/</div></pre></td></tr></table></figure>
<h1 id="路径和资源"><a href="#路径和资源" class="headerlink" title="路径和资源"></a>路径和资源</h1><p>在 Restful 风格的 API 中，每个路径都代表着互联网中的一个资源。所以 URL 地址中应该使用名词，并且因为大多是资源集合，所以应该使用复数形式。如果是有从属关系的资源，应该服从从属关系，下面给出几个例子：`</p>
<ul>
<li><code>https://api.example.com/v1/posts</code></li>
<li><code>https://api.example.com/v1/posts/{postId}</code></li>
<li><code>https://api.example.com/v1/posts/{postId}/comments</code></li>
</ul>
<h1 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h1><p>HTTP 动词可以完美对应数据库的增删查改操作，于是我们就把 HTTP 动词和我们的增删查改操作对应起来：</p>
<ul>
<li>GET：查询数据</li>
<li>POST：增加数据</li>
<li>PUT：更新数据(客户端提供改变后的完整资源)</li>
<li>PATCH：更新数据(客户端更新某几条属性)</li>
<li>DELETE：删除数据</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面是结合 HTTP 动词和路径提供一些示例：</p>
<ul>
<li>GET <code>/posts</code> ：获取所有文章</li>
<li>POST <code>/posts</code> ：创建一篇文章</li>
<li>GET <code>/posts/{postId}</code> ：获取指定 Id 的文章信息</li>
<li>PUT <code>/posts/{postId}</code> ：修改指定 Id 的文章信息(客户端需要提供全部属性)</li>
<li>PATCH <code>/post/{postId}</code> ：修改指定 Id 的文章信息(客户端提供需要修改的部分属性)</li>
<li>DELETE <code>/post/{postId}</code> ：删除指定 Id 的文章</li>
<li>GET <code>/posts/{postId}/comments</code> ：获取指定 Id 文章的所有评论</li>
<li>POST <code>/posts/{postId}/comments</code> ：在指定 Id 文章下创建一条评论</li>
</ul>
<h1 id="Query-查询"><a href="#Query-查询" class="headerlink" title="Query 查询"></a>Query 查询</h1><p>在 GET 查询的时候我们不可能一次性获取所有资源，那么我们需要提供一些查询条件。</p>
<p>下面是一些常用的查询：</p>
<ul>
<li><p><code>?index=2&amp;size=20</code> ：第二页每页20条</p>
</li>
<li><p><code>?sortby=name&amp;order=asc</code> ：按指定规则与顺序排序</p>
<p>……</p>
</li>
</ul>
<h1 id="全局信息"><a href="#全局信息" class="headerlink" title="全局信息"></a>全局信息</h1><p>全局通用信息应该放在请求头里，避免使用 Query 拼接，如：</p>
<ul>
<li>APPID（Android/iOS/H5）</li>
<li>APPVER（版本号）</li>
<li>CHANNEL（渠道号）</li>
<li>APP-BUILD-NUM（内部小版本号）</li>
<li>TOKEN</li>
<li>NETWORK（网络环境）</li>
<li>LANGUAGE（语言）</li>
</ul>
<p>等</p>
<h1 id="传输数据"><a href="#传输数据" class="headerlink" title="传输数据"></a>传输数据</h1><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>使用 json 格式传输数据，如果需要上传文件则使用表单的形式提交。</p>
<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>使用 json 格式传输数据，<code>Content-Type</code>一致设定为<code>application/json</code>。</p>
<p>响应格式应该统一，下面给出一个例子：</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>code</td>
<td>int</td>
<td>状态码</td>
</tr>
<tr>
<td>message</td>
<td>String</td>
<td>状态信息</td>
</tr>
<tr>
<td>data</td>
<td>List or Object</td>
<td>数据</td>
</tr>
<tr>
<td>time</td>
<td>long</td>
<td>时间戳</td>
</tr>
</tbody>
</table>
<p>具体的响应如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  'code': 0,</div><div class="line">  'message': '获取成功',</div><div class="line">  'data': [&#123;&#125;, &#123;&#125;, &#123;&#125;], // 返回一个集合</div><div class="line">  'time': 1472435695000</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者返回某一个数据：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  'code': 0,</div><div class="line">  'message': '获取成功',</div><div class="line">  'data': &#123;&#125;, // 返回一个对象</div><div class="line">  'time': 1472435695000</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>为了保证客户端与服务端通信的安全，我们使用 HTTPS 协议。</p>
<p>在身份认证上使用 Oauth 2.0 协议，用户登录之后在客户端保存一份 token，避免在客户端持久化存储用户名和密码。之后每次访问需要身份认证的 API 时，必须携带 token 访问。</p>
<h1 id="避免空指针"><a href="#避免空指针" class="headerlink" title="避免空指针"></a>避免空指针</h1><p>API 设计的时候应该合理帮助前端避免空指针异常，在一些字段或者属性为空的时候应该返回默认值：如 String 返回<code>&quot;&quot;</code>, int 返回<code>0</code>, Object 返回 <code>{}</code>, Array or List 返回 <code>[]</code>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.zhaiyifan.cn/2016/07/23/android-new-project-from-0-p9/" target="_blank" rel="external">从零开始的Android新项目9 - 前端用后台接口设计</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      一个好的接口设计可以给前后端减少无数的麻烦并让大家都感受到 coding 的快乐，本文就讲讲我认为的好的接口设计是怎样的。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView.Adapter：全能notify解决方案</title>
    <link href="https://loshine.me/2016/08/25/a-universal-solution-of-recyclerview-adapter-notify/"/>
    <id>https://loshine.me/2016/08/25/a-universal-solution-of-recyclerview-adapter-notify/</id>
    <published>2016-08-25T01:51:21.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前我们用 ListView 或者 GridView 的时候，通知适配器刷新是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adapter.notifyDataSetChanged();</div></pre></td></tr></table></figure>
<p>但是当我们使用了更强大的 RecyclerView 之后，如果直接这样通知适配器刷新将不会显示动画效果。它会直接将所有的 item 重新绘制。</p>
<p>我们需要使用如下的方法来通知适配器刷新，这样 RecyclerView 才会显示对应的动画效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">adapter.notifyItemInserted();</div><div class="line">adapter.notifyItemChanged();</div><div class="line">adapter.notifyItemMoved();</div><div class="line">adapter.notifyItemRemoved();</div><div class="line">adapter.notifyItemRangeChanged();</div><div class="line">adapter.notifyItemRangeInserted();</div><div class="line">adapter.notifyItemRangeRemoved();</div></pre></td></tr></table></figure>
<p>在这次更新的 Support Library 24.2.0 中添加了一个新的工具类，可以用来方便快捷的处理 RecyclerView.Adapter 的通知刷新。</p>
<h1 id="DiffUtil"><a href="#DiffUtil" class="headerlink" title="DiffUtil"></a>DiffUtil</h1><p>DifUtil 就是这次引入的工具类，它会找出 Adapter 中每一个 Item 对应发生的变化，然后对每一个变化给予对应的刷新。</p>
<p>最重要的就是如下的两个重载方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DifUtil.calculateDiff(Callback cb, boolean detectMoves);</div><div class="line">DifUtil.calculateDiff(Callback cb);</div></pre></td></tr></table></figure>
<p>其中<code>DifUtil.calculateDiff(Callback cb);</code>实际上就是<code>DifUtil.calculateDiff(callback, true);</code>所以我们着重研究第一个方法即可。</p>
<p>该方法会接收两个参数，其中第二个参数是一个 boolean 值，查看源码注释我们知道这个参数有如下作用：</p>
<blockquote>
<p>True if DiffUtil should try to detect moved items, false otherwise.</p>
<p>如果 DiffUtil 尝试检测移动的项目就设为 true，否则设为 false。</p>
</blockquote>
<p>这个参数实际上是指定是否需要项目移动的检测，如果设为 false ，那么一个项目移动了会先判定为 remove，再判定为 insert。</p>
<p>而<code>Callback</code>是一个抽象类，它有四个方法需要实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 旧的数据源的大小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 新的数据源的大小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 该方法用于判断两个 Object 是否是相同的 Item，比如有唯一标识的时候应该比较唯一标识是否相等</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当 areItemsTheSame 返回 true 时调用该方法，返回显示的 Item 的内容是否一致</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所述，我们四个需要实现的方法的作用都在注释中写出了。前两个方法都很好理解，需要重点说明的是后两个</p>
<ul>
<li><code>areItemsTheSame</code>：这个方法用来判断两个 Object 是否是相同的 Item，此处最好不要简单的用<code>equals</code>方法判断，我们可以根据 Object 的唯一标识或者自己指定一个规则来判断两个 Object 是否是展示的相同的 Item。</li>
<li><code>areContentsTheSame</code>：该方法只有在<code>areItemsTheSame</code>返回<code>true</code>之后才会被调用，我们在重写该方法的时候，只需要判断两个 Object 显示的元素是否一致即可。如我们有两个 Object，它们可能拥有很多属性，但是其中只有两个属性需要被显示出来，那只要这两个属性一致我们这个方法就要返回<code>true</code>。</li>
</ul>
<h1 id="使用-DiffUtils-通知刷新"><a href="#使用-DiffUtils-通知刷新" class="headerlink" title="使用 DiffUtils 通知刷新"></a>使用 DiffUtils 通知刷新</h1><p>下面我们写一个简单的例子来学习使用 DiffUtil</p>
<p>首先我们来一个 Item 对应的数据类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String id; <span class="comment">// 学号是唯一的</span></div><div class="line">    <span class="keyword">public</span> String name; <span class="comment">// 名字可能重复</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后写一个 Adapter：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Student&gt; datas;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;Student&gt; datas)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.datas = datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext())</div><div class="line">                .inflate(R.layout.item_recycler, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        holder.setData(datas.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> datas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">            TextView textView = (TextView) <span class="keyword">this</span>.itemView.findViewById(R.id.text);</div><div class="line">            textView.setText(student.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其对应的布局文件就是一个简单的 TextView：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">          <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">          <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">          <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">          <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">          <span class="attr">android:padding</span>=<span class="string">"10dp"</span></div><div class="line">          <span class="attr">tools:text</span>=<span class="string">"content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>然后我们在 Activity 里使用它们并显示出来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        mRandom = <span class="keyword">new</span> Random();</div><div class="line">        datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            datas.add(<span class="keyword">new</span> Student(mRandom.nextInt(<span class="number">3000</span>) + <span class="string">""</span>, <span class="string">"Students: "</span> + i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</div><div class="line">        mAdapter = <span class="keyword">new</span> MyAdapter(datas);</div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们就获得了一个简单的展示学生数据的 RecyclerView 了。</p>
<p>然后我们对 Adapter 的数据源进行更改，并通知刷新：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">mFab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                <span class="comment">// 创建一个原来的 List 的副本</span></div><div class="line">                <span class="keyword">final</span> ArrayList&lt;Student&gt; oldTemp = <span class="keyword">new</span> ArrayList&lt;&gt;(datas);</div><div class="line">                <span class="comment">// 更改原数据源</span></div><div class="line">                datas.remove(mRandom.nextInt(mAdapter.getItemCount()));</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mRandom.nextInt(<span class="number">3</span>); i++) &#123;</div><div class="line">                    datas.add(mRandom.nextInt(mAdapter.getItemCount() - <span class="number">1</span>),</div><div class="line">                            <span class="keyword">new</span> Student(mRandom.nextInt(<span class="number">3000</span>) + <span class="string">""</span>, <span class="string">"Students: "</span> + mRandom.nextDouble()));</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 实现 Callback</span></div><div class="line">                DiffUtil.Callback callback = <span class="keyword">new</span> DiffUtil.Callback() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> oldTemp.size();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> datas.size();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> oldTemp.get(oldItemPosition).id.equals(datas.get(newItemPosition).id);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> oldTemp.get(oldItemPosition).name.equals(datas.get(newItemPosition).name);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(callback);</div><div class="line">                <span class="comment">// 把结果应用到 adapter</span></div><div class="line">                diffResult.dispatchUpdatesTo(mAdapter);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/GIF_20160825_093648.gif" alt=""></p>
<p>DiffUtil 的使用就是这样，根据 DiffUtil.Callback 计算出 Result，然后应用更新到 Adapter。</p>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>有的人可能说了，这样其实并不好用啊，我们原来数据的改变就直接使用对应的方法就可以了，你这里每次还要写得这么麻烦。那么我们就使用 DiffUtil 和 Adapter 结合再进行一次封装吧。</p>
<p>我们抽取一个 BaseAdapter 出来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAdapter</span>&lt;<span class="title">T</span>, <span class="title">V</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt;</span></div><div class="line">        <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">V</span>&gt;&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> List&lt;T&gt; temp; <span class="comment">// 用于保存修改之前的数据源的副本</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> List&lt;T&gt; datas; <span class="comment">// 数据源</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseAdapter</span><span class="params">(List&lt;T&gt; datas)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.datas = datas;</div><div class="line">        temp = <span class="keyword">new</span> ArrayList&lt;&gt;(datas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(T oldItem, T newItem)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(T oldItem, T newItem)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> datas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyDiff</span><span class="params">()</span> </span>&#123;</div><div class="line">        DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffUtil.Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> temp.size();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> datas.size();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 判断是否是同一个 item</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> BaseAdapter.<span class="keyword">this</span>.areItemsTheSame(temp.get(oldItemPosition), datas.get(newItemPosition));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 如果是同一个 item 判断内容是否相同</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> BaseAdapter.<span class="keyword">this</span>.areContentsTheSame(temp.get(oldItemPosition), datas.get(newItemPosition));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        diffResult.dispatchUpdatesTo(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// 通知刷新了之后，要更新副本数据到最新</span></div><div class="line">        temp.clear();</div><div class="line">        temp.addAll(datas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们只需要令 Adapter 实现 BaseAdapter即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span>&lt;<span class="title">Student</span>, <span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;Student&gt; datas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(datas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext())</div><div class="line">                .inflate(R.layout.item_recycler, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        holder.setData(datas.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(Student oldItem, Student newItem)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> oldItem.id.equals(newItem.id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(Student oldItem, Student newItem)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> oldItem.name.equals(newItem.name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">            TextView textView = (TextView) <span class="keyword">this</span>.itemView.findViewById(R.id.text);</div><div class="line">            textView.setText(student.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后我们如果数据源 List 中的数据有任何改动，我们只需要调用<code>notifyDiff()</code>就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mFab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                datas.remove(mRandom.nextInt(mAdapter.getItemCount()));</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mRandom.nextInt(<span class="number">3</span>); i++) &#123;</div><div class="line">                    datas.add(mRandom.nextInt(mAdapter.getItemCount() - <span class="number">1</span>),</div><div class="line">                            <span class="keyword">new</span> Student(mRandom.nextInt(<span class="number">3000</span>) + <span class="string">""</span>, <span class="string">"Students: "</span> + mRandom.nextDouble()));</div><div class="line">                &#125;</div><div class="line">                mAdapter.notifyDiff();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最新 Support 包中的 DiffUtil 类给我们带来了一个对 RecyclerView 的不同数据变化的统一处理方案，可以对所有数据变化之后的通知刷新简化，非常好用，强烈推荐使用。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/Fndroid/p/5789470.html" target="_blank" rel="external">Android开发学习之路-DiffUtil使用教程</a></p>
]]></content>
    
    <summary type="html">
    
      Support Library 24.2.0 中添加了一个新的工具类，可以用来方便快捷的处理 RecyclerView.Adapter 的通知刷新。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>自定义View之自定义属性</title>
    <link href="https://loshine.me/2016/08/13/custom-view-attrs/"/>
    <id>https://loshine.me/2016/08/13/custom-view-attrs/</id>
    <published>2016-08-13T14:32:31.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义一个控件"><a href="#定义一个控件" class="headerlink" title="定义一个控件"></a>定义一个控件</h1><p>我们先画一个简单的圆形 View，在<code>onDraw</code>中绘制。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        canvas.drawCircle(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在布局文件中使用：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">io.github.loshine.customview.view.CircleView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<p>然后我们就可以在 preview 窗口中看到效果了</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/blog-attr-circle-1.png" alt=""></p>
<p>一个很简单的黑色的圆形</p>
<h1 id="定义需要的属性"><a href="#定义需要的属性" class="headerlink" title="定义需要的属性"></a>定义需要的属性</h1><p>现在我觉得黑色不好看了，我想给它换个颜色，那么一般来说可以用<code>Paint.setColor(int color)</code>来修改为其它的颜色。但这会让所有的 CircleView 都变成另一个颜色。</p>
<p>但我可能希望在一个 Activity 里的 CircleView 是红色，但在另一个中的是蓝色。</p>
<p>此时我们就需要给该 View 自定义属性了。</p>
<p>自定义属性就类似 TextView 的<code>android:text=&quot;xxx&quot;</code>，ImageView 的<code>android:src=&quot;@drawable/xxx&quot;</code>，可以给相同类型的 View 设置不同的属性展示不同的效果。</p>
<p>这里我们定义一个 color 属性。</p>
<h2 id="声明属性名称"><a href="#声明属性名称" class="headerlink" title="声明属性名称"></a>声明属性名称</h2><p>在<code>res/values</code>文件夹下新建一个资源文件，叫 attrs.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CircleView"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"circle_color"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样就完成了属性名称的声明。</p>
<p><code>declare-styleable</code>的 name 可以任意命名，只要不重复即可，但一般我们会使用自定义控件的类名方便管理。<code>attr</code>标签中定义的就是需要自定义的属性名称和类型。</p>
<p>我们有这几种类型：</p>
<ul>
<li>boolean</li>
<li>color</li>
<li>dimension</li>
<li>enum</li>
<li>flag</li>
<li>float</li>
<li>fraction</li>
<li>integer</li>
<li>reference</li>
<li>string</li>
</ul>
<p>声明完成之后就可以在代码中根据对应的方法获取布局中使用的自定义属性了。</p>
<h1 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>我们在自定义 View 的时候 IDE 通常会提醒我们需要拥有构造函数，然后我们使用其智能提醒会发现有四个构造函数供我们选择：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, AttributeSet attrs)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span></span></div></pre></td></tr></table></figure>
<p>查看源码注释，我们知道这四个方法分别对应不同方式创建 View：</p>
<ul>
<li><code>View(context)</code>：直接在代码中 new 出来</li>
<li><code>View(context, attrs)</code>：当 View 是从布局文件 inflate 出来的时候会调用这个构造方法，使用默认的 style 和 theme。</li>
<li><code>View(context, attrs, defStyleAttr)</code>：该方法不会被系统直接调用，我们需要手动调用。该方法相比第二个方法多了一个默认 style 的参数，它的作用就是为 View 提供一个基本的样式。</li>
<li><code>View(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)</code>：将资源文件中定义的某个样式作为默认样式。</li>
</ul>
<p>我们在实现自定义 View 的时候，通常至少有两个构造方法（至于为什么我们后文再说），分别是<code>View(Context context)</code>以及<code>View(Context context, AttrbuteSet attires)</code>，这样我们才可以在 Java 代码中以及在布局文件中（或使用 Inflater）实例化它们。</p>
<h2 id="obtainStyledAttributes"><a href="#obtainStyledAttributes" class="headerlink" title="obtainStyledAttributes"></a>obtainStyledAttributes</h2><p>看过了 View 的构造方法，我们现在就要在构造方法里获取 View 的参数了。<code>Context</code>这个类为我们提供了以下几个方法来获取属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obtainAttributes(AttributeSet set, <span class="keyword">int</span>[] attrs) <span class="comment">// 从 layout 设置的属性集中获取 attrs 中的属性</span></div><div class="line">obtainStyledAttributes(<span class="keyword">int</span>[] attrs) <span class="comment">// 从系统主题中获取 attrs 中的属性</span></div><div class="line">obtainStyledAttributes(<span class="keyword">int</span> resId, <span class="keyword">int</span>[] attrs) <span class="comment">// 从资源文件定义的 style 中读取属性</span></div><div class="line">obtainStyledAttributes(AttributeSet set, <span class="keyword">int</span>[] attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes) <span class="comment">// 后面详细说这个方法</span></div></pre></td></tr></table></figure>
<p>我们了解一下这几个 API 的参数，然后就可以很方便的获取自定义属性了。</p>
<h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><h4 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h4><p>就是我们需要获取属性集中的哪些属性，通常我们会定义一个<code>&lt;styleable&gt;</code>来管理所有的<code>&lt;attr&gt;</code>，然后我们就可以用<code>R.styleable.someAttrs</code>来使用这个参数了。</p>
<h4 id="AttrbuteSet"><a href="#AttrbuteSet" class="headerlink" title="AttrbuteSet"></a>AttrbuteSet</h4><p>即我们在 xml 中定义的属性的集合，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/dial_button"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@string/dial"</span> /&gt;</div></pre></td></tr></table></figure>
<p>这里我们的每一条属性都会放到 AttrbuteSet 中去，当然自定义属性也不例外。需要注意的是，<code>style=&quot;@style/somestyle&quot;</code>这样添加的属性也是会放进去的。</p>
<blockquote>
<p>这也是我们必须要实现<code>View(Context context, AttrbuteSet attr)</code>的原因，因为我们需要把布局文件中定义的参数传进来处理。</p>
</blockquote>
<h4 id="defStyleAttrs"><a href="#defStyleAttrs" class="headerlink" title="defStyleAttrs"></a>defStyleAttrs</h4><p>这是自定义属性中可以让其在 Theme 中配置的关键，使用它作为参数会从当前 Theme 中去获取参数。</p>
<h4 id="resId-defStyleRes"><a href="#resId-defStyleRes" class="headerlink" title="resId/defStyleRes"></a>resId/defStyleRes</h4><p>直接从资源文件中定义的某个样式中读取。</p>
<h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p>注意到我们有一个方法只需要<code>attrs</code>作为参数，那它的属性从哪里来呢？其实是我们可以直接在 Theme 中指定属性并且用这个方法获取属性。</p>
<h4 id="四个参数"><a href="#四个参数" class="headerlink" title="四个参数"></a>四个参数</h4><p><code>obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)</code>这个方法有四个参数，我们获取到的属性可能从四个地方来：布局文件(set), defStyleAttr(主题可配置样式), defStyleRes(默认样式), NULL(主题中直接获取)</p>
<p>如果一个属性在多个地方都被定义了，那么它们的优先级如下：</p>
<p><code>set</code>&gt;<code>defStyleAttr</code>&gt;<code>defStyleRes</code>&gt;<code>NULL</code></p>
<h2 id="TypedArray"><a href="#TypedArray" class="headerlink" title="TypedArray"></a>TypedArray</h2><p>通过<code>obtainStyledAttributes()</code>我们就拿到了 TypedArray，我们需要的属性都存在里面。然后我们可以对应声明的时候的类型，使用对应的<code>getXXX()</code>方法来获取自定义属性，之后我们就可以使用自定义属性来绘图了。</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>我们将上述的圆形控件修改为五种不同颜色的同心圆，然后使用上面的不同定义属性的方式来定义一遍并且使用。</p>
<p>首先我们的圆形 View 改成这样了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor1 = Color.BLACK;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor2 = Color.BLACK;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor3 = Color.BLACK;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor4 = Color.BLACK;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor5 = Color.BLACK;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleView,</div><div class="line">                defStyleAttr, R.style.default_style);</div><div class="line">        mColor1 = typedArray.getColor(R.styleable.CircleView_circle_color1, Color.BLACK);</div><div class="line">        mColor2 = typedArray.getColor(R.styleable.CircleView_circle_color2, Color.BLACK);</div><div class="line">        mColor3 = typedArray.getColor(R.styleable.CircleView_circle_color3, Color.BLACK);</div><div class="line">        mColor4 = typedArray.getColor(R.styleable.CircleView_circle_color4, Color.BLACK);</div><div class="line">        mColor5 = typedArray.getColor(R.styleable.CircleView_circle_color5, Color.BLACK);</div><div class="line">        typedArray.recycle();</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        mPaint.setColor(mColor1);</div><div class="line">        canvas.drawCircle(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, mPaint);</div><div class="line">        mPaint.setColor(mColor2);</div><div class="line">        canvas.drawCircle(<span class="number">100</span>, <span class="number">100</span>, <span class="number">80</span>, mPaint);</div><div class="line">        mPaint.setColor(mColor3);</div><div class="line">        canvas.drawCircle(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, mPaint);</div><div class="line">        mPaint.setColor(mColor4);</div><div class="line">        canvas.drawCircle(<span class="number">100</span>, <span class="number">100</span>, <span class="number">40</span>, mPaint);</div><div class="line">        mPaint.setColor(mColor5);</div><div class="line">        canvas.drawCircle(<span class="number">100</span>, <span class="number">100</span>, <span class="number">20</span>, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在<code>attrs.xml</code>中如下定义：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CircleView"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对应五个同心圆的颜色 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"circle_color1"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"circle_color2"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"circle_color3"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"circle_color4"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"circle_color5"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 定义 theme 可配置 style --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"circle_style"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后我们的<code>style.xml</code>中是这样的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置style --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_style"</span>&gt;</span>@style/custom_theme<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 直接在主题中指定 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color1"</span>&gt;</span>#ffff00ff<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color2"</span>&gt;</span>#ffff00ff<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color3"</span>&gt;</span>#ffff00ff<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color4"</span>&gt;</span>#ffff00ff<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color5"</span>&gt;</span>#ffff00ff<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 主题中配置的style --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"custom_theme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color1"</span>&gt;</span>#ffff0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color2"</span>&gt;</span>#ffff0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color3"</span>&gt;</span>#ffff0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 直接在layout文件中引用的style，最后会被放到set中 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"myStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color1"</span>&gt;</span>#ff00ff00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color2"</span>&gt;</span>#ff00ff00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"default_style"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color1"</span>&gt;</span>#ffffff00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color2"</span>&gt;</span>#ffffff00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color3"</span>&gt;</span>#ffffff00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"circle_color4"</span>&gt;</span>#ffffff00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在布局中我们是这样使用的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">io.github.loshine.customview.view.CircleView</span></span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/myStyle"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">app:circle_color1</span>=<span class="string">"#ff00ffff"</span>/&gt;</div></pre></td></tr></table></figure>
<p>如上配置，我们效果如图所示：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/custom_attr.png" alt=""></p>
<p>可以看出我们的 color4 没有起效果，这是因为使用了 defStyle，这个时候默认 Style 就不会起作用了。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.jianshu.com/p/61b79e7f88fc" target="_blank" rel="external">深入理解Android 自定义attr Style styleable以及其应用</a></p>
]]></content>
    
    <summary type="html">
    
      在之前我们学会了自定义 View 的测量和绘制，那么接下来我们需要在布局文件中给它设置一些自定义属性以个性化控件——如我希望第一个该控件是蓝色的，但希望另一个是红色的。这个时候我们就需要在布局文件中定义属性了，本文就记录一下如何获取并使用自定义属性。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>夜间模式初探</title>
    <link href="https://loshine.me/2016/06/01/night-mode-in-android/"/>
    <id>https://loshine.me/2016/06/01/night-mode-in-android/</id>
    <published>2016-06-01T14:19:13.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Android Support Library 23.2.0 版为我们带来了官方的夜间模式，现在我们可以很容易地为 App 开发夜间模式了。</p>
</blockquote>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>使用起来非常简单，我们只需要将主题继承其即可</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- parent 为 Theme.AppCompat.DayNight --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.DayNight"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="comment">&lt;!-- Blah blah --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="应用全局主题"><a href="#应用全局主题" class="headerlink" title="应用全局主题"></a>应用全局主题</h2><p>然后我们在程序中调用方法设置模式即可，推荐在 Application 的<code>onCreate()</code>中进行设置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppCompatDelegate.setDefaultNightMode(<span class="keyword">int</span> mode);</div></pre></td></tr></table></figure>
<p>它有四个可选值，分别是：</p>
<ul>
<li><code>MODE_NIGHT_NO</code>： 使用亮色(light)主题</li>
<li><code>MODE_NIGHT_YES</code>：使用暗色(dark)主题</li>
<li><code>MODE_NIGHT_AUTO</code>：根据当前时间自动切换 亮色(light)/暗色(dark)主题</li>
<li><code>MODE_NIGHT_FOLLOW_SYSTEM</code>(默认选项)：设置为跟随系统，通常为 MODE_NIGHT_NO</li>
</ul>
<h2 id="组件主题"><a href="#组件主题" class="headerlink" title="组件主题"></a>组件主题</h2><p>我们也可以为某一个组件设置主题，通过<code>getDelegate().setLocalNightMode(int mode);</code>即可。注意如果改变了 Activity 的主题，我们需要调用<code>recreate()</code>重启来显示改变后的效果。</p>
<h1 id="获取当前主题"><a href="#获取当前主题" class="headerlink" title="获取当前主题"></a>获取当前主题</h1><h2 id="应用全局主题-1"><a href="#应用全局主题-1" class="headerlink" title="应用全局主题"></a>应用全局主题</h2><p>和设置相对应，非常简单</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppCompatDelegate.getDefaultNightMode();</div></pre></td></tr></table></figure>
<h2 id="组件主题-1"><a href="#组件主题-1" class="headerlink" title="组件主题"></a>组件主题</h2><p>如果没有为组件单独设置主题，那么将会获取全局主题，否则获取到组件的主题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> currentNightMode = getResources().getConfiguration().uiMode</div><div class="line">        &amp; Configuration.UI_MODE_NIGHT_MASK;</div><div class="line"><span class="keyword">switch</span> (currentNightMode) &#123;</div><div class="line">    <span class="keyword">case</span> Configuration.UI_MODE_NIGHT_NO:</div><div class="line">        <span class="comment">// Night mode is not active, we're in day time</span></div><div class="line">    <span class="keyword">case</span> Configuration.UI_MODE_NIGHT_YES:</div><div class="line">        <span class="comment">// Night mode is active, we're at night!</span></div><div class="line">    <span class="keyword">case</span> Configuration.UI_MODE_NIGHT_UNDEFINED:</div><div class="line">        <span class="comment">// We don't know what mode we're in, assume notnight</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="属性和资源"><a href="#属性和资源" class="headerlink" title="属性和资源"></a>属性和资源</h1><p>对应夜间模式，我们会需要在不同的模式下使用不同的资源文件或不同的属性，此时我们可以新建一个带<code>-night</code>后缀的资源文件夹，然后再创建对应的资源文件即可，比如：<code>drawable-night</code>、<code>values-night</code>等。</p>
<p>此时如果应用切换到了夜间模式，将会自动使用<code>-night</code>后缀中对应的资源。</p>
<p>非夜间模式的后缀是<code>-notnight</code>，但是因为不是夜间模式就不会使用<code>-night</code>里的资源所以一般我们没必要使用这个后缀。</p>
<h1 id="主题适配"><a href="#主题适配" class="headerlink" title="主题适配"></a>主题适配</h1><p>按照如上设置了之后还可能会出现一些问题如夜间模式下文字颜色还是黑色的所以看不清了（直接给 TextView 设置了<code>textColor=&quot;@color/xxx&quot;</code>，而比较建议的是直接引用主题属性或者给不同模式设置不同的资源。</p>
<p>如字体颜色一般使用<code>?android:attr/textColorPrimary</code>，图标颜色一般使用<code>?attr/colorControlNormal</code>等。</p>
<h1 id="WebView-的主题适配"><a href="#WebView-的主题适配" class="headerlink" title="WebView 的主题适配"></a>WebView 的主题适配</h1><p>WebView 因为没有特别的处理，所以我们需要通过加载特殊的 css 来完成夜间模式的适配。通过判断现在处于哪种主题然后切换对应的 css 即可。</p>
]]></content>
    
    <summary type="html">
    
      Android Support Library 23.2.0 版为我们带来了官方的夜间模式，现在我们可以很容易地为 App 开发夜间模式了。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Anroid中的自定义View测量</title>
    <link href="https://loshine.me/2016/04/22/measure-custom-view-in-android/"/>
    <id>https://loshine.me/2016/04/22/measure-custom-view-in-android/</id>
    <published>2016-04-21T16:51:22.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前已经讲过了 Android 中 View 的绘制流程，上次主要讲的是<code>onDraw</code>方法，这次主要讲的就是在<code>onMeasure</code>方法中对 View 的大小进行测量。</p>
</blockquote>
<h1 id="理解-MeasureSpec"><a href="#理解-MeasureSpec" class="headerlink" title="理解 MeasureSpec"></a>理解 MeasureSpec</h1><p>要了解如何在<code>onMeasure</code>方法中对 View 进行测量，我们首先需要了解的就是<code>onMeasure</code>方法传入的两个 int 值：<strong>widthMeasureSpec</strong> 和 <strong>heightMeasureSpec</strong>。</p>
<p>它们都是32位的 int 值，高2位代表 SpecMode(测量模式)，低30位代表 SpecSize(对应模式下的测量大小)。通过以下的代码我们可以了解到 MeasureSpec 的原理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>; <span class="comment">// Mode 的移位(高2位也就是左移30位)</span></div><div class="line"><span class="comment">// 以下四个都是 Mode 常量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY = <span class="number">1</span> &lt;&lt; MODE_SHIFT;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST = <span class="number">2</span> &lt;&lt; MODE_SHIFT;</div><div class="line"></div><div class="line"><span class="comment">// 该方法用于组装 MeasureSpec，其中 sUseBrokenMakeMeasureSpec 是一个兼容参数，如果为 true 时可能会出错(sdk19之后默认走底下的逻辑)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> mode)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class="line">		<span class="keyword">return</span> size + mode;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取 Mode</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取 Size</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (size &amp; ~MODE_MASK);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>因为 Android 中会有大量的 View 存在，所以必然会有很多 MeasureSpec，如果将 MeasureSpec 封装成一个对象必然会造成大量的对象内存分配，这也不难理解为什么要将其包装成一个 int 了。</p>
</blockquote>
<h2 id="SpecMode"><a href="#SpecMode" class="headerlink" title="SpecMode"></a>SpecMode</h2><p>SpecMode 有三类，我们在前面的代码定义中看到了有五个常量，其中两个是作为工具存在的（MODE_SHIFT 和 MODE_MASK），另外三个就是 SpecMode 了。</p>
<h3 id="UNSPECIFIED"><a href="#UNSPECIFIED" class="headerlink" title="UNSPECIFIED"></a>UNSPECIFIED</h3><p>该模式下父容器不对 View 的大小有任何限制，一般不做处理。</p>
<h3 id="EXACTLY"><a href="#EXACTLY" class="headerlink" title="EXACTLY"></a>EXACTLY</h3><p>父容器已经检测出 View 所需要的精确大小，此时 View 的最终大小就是 SpecSize 指定的大小。</p>
<p>对应 LayoutParams 中<code>match_parent</code>以及具体数值。</p>
<h3 id="AT-MOST"><a href="#AT-MOST" class="headerlink" title="AT_MOST"></a>AT_MOST</h3><p>父容器指定了一个 SpecSize，View 不能大于这个值。</p>
<p>它对应于 LayoutParams 中的<code>wrap_content</code>。</p>
<h1 id="与-Layout-Params-的关系"><a href="#与-Layout-Params-的关系" class="headerlink" title="与 Layout_Params 的关系"></a>与 Layout_Params 的关系</h1><p>在 View 测量的时候，会将 Layout_Params 在父容器的约束下转换成对应的 MeasureSpec，然后根据这个 MeasureSpec 确认 View 测量后的宽高。一旦 MeasureSpec 确认了，在<code>onMesure</code>中就可以确认 View 的测量宽高了。</p>
<ul>
<li>match_parent: 对应 EXACTLY</li>
<li>精确值: 对应 EXACTLY</li>
<li>wrap_content: 对应 AT_MOST</li>
</ul>
<h1 id="measure-过程"><a href="#measure-过程" class="headerlink" title="measure 过程"></a>measure 过程</h1><p>measure 过程要分为 View 和 ViewGroup，它们的测量是不同的</p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>由其<code>measure</code>方法完成，该方法是<code>final</code>关键字修饰的，无法重写。但<code>measure</code>会调用<code>onMeasure</code>，所以只需要看<code>onMeasure</code>如何实现即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">	setMeasureDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), getDefaultSize(getSuggestedMinimumHeight(), HeightMeasureSpec));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> result = size;</div><div class="line">	<span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class="line">	<span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line">	</div><div class="line">	<span class="keyword">switch</span> (specMode) &#123;</div><div class="line">		<span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">			result = size;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> MeasureSpec.ATMOST:</div><div class="line">		<span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">			result = specSize;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (mBackground ==  <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (mBackground ==  <span class="keyword">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其逻辑很简单，<code>getDefaultSize</code>方法中可以看出，View 的宽高由 SpecSize 决定。于是我们知道：直接继承 View 的自定义控件需要重写<code>onMeasure</code>方法并设置<code>wrap_content</code>时的自身大小，否则使用<code>wrap_content</code>属性是无效的(等同于<code>match_parent</code>)。</p>
<p>所以我们可以这样实现来使得<code>wrap_content</code>生效：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> realWidth = widthSpecMode == MeasureSpec.AT_MOST ? mWidth : widthSpecSize;</div><div class="line">    <span class="keyword">int</span> realHeight = heightSpecMode == MeasureSpec.AT_MOST ? mHeight : heightSpecSize;</div><div class="line"></div><div class="line">    setMeasuredDimension(realWidth, realHeight);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在如上代码中我们只需要指定默认最小时的<code>mWidth</code>,<code>mHeight</code>即可(<code>wrap_content</code>的默认宽高)，其它模式下交给系统测量即可。</p>
<blockquote>
<p>需要注意的是<code>onMeasure</code>方法中获取到的测量宽高并不一定就是控件的最终宽高，比如 RelativeLayout 中的控件会有多次测量，LinearLayout 中的子控件如果设置了<code>weight</code>也会有多次测量，那么第一次<code>onMeasure</code>的就不会准了。</p>
</blockquote>
<h2 id="ViewGroup"><a href="#ViewGroup" class="headerlink" title="ViewGroup"></a>ViewGroup</h2><p>其实就是在测量自己的宽高之后还会调用<code>measureChildren</code>来遍历子控件并且测量子控件的大小。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</div><div class="line">	<span class="keyword">final</span> View[] children = mChildren;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">		<span class="keyword">final</span> View child = children[i];</div><div class="line">		<span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class="line">			measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,  </span></span></div><div class="line">         <span class="keyword">int</span> parentHeightMeasureSpec) &#123;  </div><div class="line">	<span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</div><div class="line">	</div><div class="line">	<span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, </div><div class="line">			mPaddingLeft + mPaddingRight, lp.width);  </div><div class="line">	<span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, </div><div class="line">			mPaddingTop + mPaddingBottom, lp.height);</div><div class="line">	</div><div class="line">	child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewGroup 是一个抽象类，其<code>onMeasure</code>方法是没有具体实现的，所以我们继承 ViewGroup 必须重写<code>onMeasure</code>，重写该方法需要进行的步骤如下：</p>
<ol>
<li>调用<code>super.onMeasure(widthMeasureSpec, heightMeasureSpec)</code>处理非<code>wrap_content</code>的情况</li>
<li>单独处理<code>wrap_content</code>，即 SpecMode 为<code>AT_MOST</code>的情况</li>
<li>遍历子 View，并测量子 View</li>
</ol>
<p>测量子 View 我们可以使用这几个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用子view自身的测量方法</span></div><div class="line">subView.measure(<span class="keyword">int</span> wSpec, <span class="keyword">int</span> hSpec);</div><div class="line"></div><div class="line"><span class="comment">// ViewGroup 的测量子 View 方法</span></div><div class="line"><span class="comment">// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值</span></div><div class="line">measureChild(subView, <span class="keyword">int</span> wSpec, <span class="keyword">int</span> hSpec); </div><div class="line"><span class="comment">// 所有子view 都是 多宽，多高, 内部调用了 measureChild 方法</span></div><div class="line">measureChildren(<span class="keyword">int</span> wSpec, <span class="keyword">int</span> hSpec);</div><div class="line"><span class="comment">// 某一个子view，多宽，多高, 内部加上了 viewGroup 的 padding 值、margin 值和传入的宽高 wUsed、hUsed</span></div><div class="line">measureChildWithMargins(subView, intwSpec, <span class="keyword">int</span> wUsed, <span class="keyword">int</span> hSpec, <span class="keyword">int</span> hUsed);</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>View 的测量基本就是如上所述了，自定义 View 需要重写<code>onMeasure</code>方法并对<code>wrap_content</code>进行特殊处理，其实说起来需要做的并不多，但原理还是满复杂的，全部了解了之后还是觉得学到了不少东西。</p>
]]></content>
    
    <summary type="html">
    
      在《Android中的自定义View绘制》中，我们了解了如何使用 Paint、Cavans 等类来绘制 View，但当时的例子中，所有的自定义 View 如果不指定为特定的大小，都是直接占满父容器的。那么我们这篇文章就主要讲解如何测量自定义 View 的大小并对 wrap_content 进行处理。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>背景色渐变的引导页</title>
    <link href="https://loshine.me/2016/04/01/guide-with-gradual-background/"/>
    <id>https://loshine.me/2016/04/01/guide-with-gradual-background/</id>
    <published>2016-03-31T18:03:33.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用什么实现"><a href="#使用什么实现" class="headerlink" title="使用什么实现"></a>使用什么实现</h1><p>还用问么，ViewPager 以及 Fragment 呀，非常简单。</p>
<h1 id="关键-API"><a href="#关键-API" class="headerlink" title="关键 API"></a>关键 API</h1><p>下面的 API 可以根据初始颜色和结束颜色计算中间值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object ArgbEvaluator.evaluate(<span class="keyword">float</span> fraction, Object startValue, Object endValue);</div></pre></td></tr></table></figure>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul>
<li>activity_main.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"me.loshine.guidedemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/view_pager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="处理滑动背景色"><a href="#处理滑动背景色" class="headerlink" title="处理滑动背景色"></a>处理滑动背景色</h2><ul>
<li>MainActivity.xml</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">OnPageChangeListener</span> </span>&#123;</div><div class="line"></div><div class="line">    ViewPager mViewPager;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] colors;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state = ViewPager.SCROLL_STATE_IDLE; <span class="comment">// 初始位于停止滑动状态</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArgbEvaluator mArgbEvaluator;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initColors();</div><div class="line">        initViewPager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化 ViewPager</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.view_pager);</div><div class="line">        <span class="keyword">if</span> (mViewPager != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 初始颜色</span></div><div class="line">            mViewPager.setBackgroundColor(colors[<span class="number">0</span>]);</div><div class="line">            mViewPager.setAdapter(<span class="keyword">new</span> FragmentStatePagerAdapter(getSupportFragmentManager()) &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> GuideBaseFragment.newInstance(position);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            mViewPager.addOnPageChangeListener(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化颜色</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initColors</span><span class="params">()</span> </span>&#123;</div><div class="line">        colors = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</div><div class="line">        colors[<span class="number">0</span>] = getResources().getColor(R.color.guideBackgroundColor1);</div><div class="line">        colors[<span class="number">1</span>] = getResources().getColor(R.color.guideBackgroundColor2);</div><div class="line">        colors[<span class="number">2</span>] = getResources().getColor(R.color.guideBackgroundColor3);</div><div class="line">        colors[<span class="number">3</span>] = getResources().getColor(R.color.guideBackgroundColor4);</div><div class="line"></div><div class="line">        mArgbEvaluator = <span class="keyword">new</span> ArgbEvaluator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">        <span class="comment">// 只要不是滑动停止状态就计算颜色</span></div><div class="line">        <span class="keyword">if</span> (state != ViewPager.SCROLL_STATE_IDLE) &#123;</div><div class="line">            <span class="keyword">if</span> (positionOffset &gt; <span class="number">0</span> &amp;&amp; position &lt; <span class="number">4</span>) &#123;</div><div class="line">                <span class="keyword">int</span> evaluatePreColor = (<span class="keyword">int</span>) mArgbEvaluator</div><div class="line">                        .evaluate(positionOffset, colors[position], colors[position + <span class="number">1</span>]);</div><div class="line">                mViewPager.setBackgroundColor(evaluatePreColor);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (positionOffset &lt; <span class="number">0</span> &amp;&amp; position &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">int</span> evaluateNextColor = (<span class="keyword">int</span>) mArgbEvaluator</div><div class="line">                        .evaluate(-positionOffset, colors[position], colors[position - <span class="number">1</span>]);</div><div class="line">                mViewPager.setBackgroundColor(evaluateNextColor);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实实现方式并不复杂，监听 ViewPager 的滚动然后计算中间值即可，重要的是又学习到酷炫的新东西了。</p>
]]></content>
    
    <summary type="html">
    
      Google 的不少 App 都已经使用了背景色渐变的引导页，我也跟风实现一个
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
      <category term="Java" scheme="https://loshine.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在Android开发中使用Lambda表达式</title>
    <link href="https://loshine.me/2016/03/30/use-lambda-in-android/"/>
    <id>https://loshine.me/2016/03/30/use-lambda-in-android/</id>
    <published>2016-03-30T15:33:11.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>由于三体人对我们的科技封锁，我们无法在 Android 开发中启用 Java 1.8 的重要特性——Lambda 表达式。但现在我们可以通过一些工具启用它，然后使用 Lambda 表达式替换没有什么实际意义的单方法匿名内部类。</p>
</blockquote>
<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>可能有些人还不太清楚到底什么是 Lambda 表达式，这里先对 Lambda 表达式进行一个简单的介绍。</p>
<p>Lambda 表达式是<strong>函数式编程语言</strong>的特性，它简单的说就是一个<strong>匿名函数</strong>。</p>
<p>我们先看一个 Groovy 的例子：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].asList().forEach &#123; x -&gt; println x &#125;</div></pre></td></tr></table></figure>
<p>在这个例子中，我们使用<code>foreach</code>来遍历一个<code>List</code>并打印每一个值。我们传入了一个 Lambda 表达式：<code>{ x -&gt; println x }</code>，这个表达式就是我们对每一个值进行的操作，在本例中就是打印它们。</p>
<p>在这里 Lambda 表达式是一个映射函数，<code>foreach</code>接受了它作为参数，然后对<code>List</code>中的每一个值进行遍历。</p>
<p>在函数式编程语言中，函数是<strong>一等公民</strong>（first class）。它们也可以作为变量或者参数被传递而且它们也是一个类。</p>
<p>但在 Java 中函数并不是一等公民，如果我们需要传递一个方法，必须要有一个对象包含这个方法，然后把这个对象传递过去。</p>
<p>所以我们经常会见到类似这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">		<span class="comment">// do what you want...</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>但是实际上，我们需要的只是<code>onClick</code>这个方法里面的内容，其它的部分（new OnClickListener）实在是没有什么实际的意义，只是一个必须的语法而已。</p>
<p>所以 Java 1.8 也引入了部分函数式编程的特性——Lambda 表达式。</p>
<p>如果使用 Lambda 表达式，上面那个例子可以被简化为这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">textView.setOnClickListener(v -&gt; &#123;</div><div class="line">	<span class="comment">// do what you want...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果只有一行代码我们还可以省略大括号</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">textView.setOnClickListener(v -&gt; doSomething());</div></pre></td></tr></table></figure>
<p>当啷啷~ 是不是省略了很多代码，有没有很爽的感觉。</p>
<p>有了 Lambda 表达式，从此我们的代码可以清爽简洁，而且看起来也很好理解：箭头的左边是形参，右边是函数体，整个 Lambda 表达式就是一个函数（就是数学中的函数）。</p>
<p>更多 Lambda 表达式的信息可以查看<a href="http://www.liaoxuefeng.com/article/001411306573093ce6ebcdd67624db98acedb2a905c8ea4000" target="_blank" rel="external">《Java 8新特性：lambda表达式》——廖雪峰</a>。</p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>安利了这么多 Lambda 表达式的优点，但由于众所周知的某些原因，Android 中的 Java 版本被限定在了 1.6 以下，所以也就没办法使用那么好的 Lambda 表达式了。</p>
<p>但 Lambda 表达式这么好，你不让我用我就不用了么？我偏要用！</p>
<p>好的，有以下两种方式都可以为我们开启 Lambda 表达式，我们只需要任选其一就可以了。</p>
<h2 id="RetroLambda"><a href="#RetroLambda" class="headerlink" title="RetroLambda"></a>RetroLambda</h2><p>RetroLambda 的 Gradle 插件让我们可以在 Android 中使用 Lambda 表达式，那么我们看看如何使用它吧。</p>
<h3 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h3><p>我们需要在项目目录下的<code>build.gradle</code>中加入它的<code>classpath</code></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.1.0-alpha4'</span></div><div class="line">     <span class="keyword">classpath</span> <span class="string">'me.tatarka:gradle-retrolambda:3.2.5'</span></div><div class="line"></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>dependencies</code>中加入<code>classpath &#39;me.tatarka:gradle-retrolambda:3.2.5&#39;</code></p>
<h3 id="app-module"><a href="#app-module" class="headerlink" title="app module"></a>app module</h3><p>编辑<code>build.gradle</code>启用插件，并把 Java 语法调整到 1.8</p>
<ol>
<li><p>在顶部启用插件</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'me.tatarka.retrolambda'</span></div></pre></td></tr></table></figure>
</li>
<li><p>在<code>android</code>中加入以下代码段启用 1.8 的语法</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compileOptions &#123;</div><div class="line">    <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">    <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Enjoy it !~</p>
<h2 id="jack"><a href="#jack" class="headerlink" title="jack"></a>jack</h2><p>jack 是 Java Android Compile Kit 的缩写，它是 Google 为 Android 推出的一个<strong>编译工具包</strong>，它的原理在这里就不详述了。它有一个特点就是可以使用 Lambda 表达式，而且配置十分简单。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>使用 jack 我们必须要把<code>buildTools</code>升级到<strong>24以上</strong>，我已经升级到了<code>24 RC</code>。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>编辑 app 模块中的<code>build.gradle</code>，在<code>defaultConfig</code>中加一行<code>useJack true</code>，然后在<code>android</code>中添加如下一段代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compileOptions &#123;</div><div class="line">    <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">    <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就好了，是不是非常简单呢~</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在 Java 1.8 中的 Lambda 表达式实际上只是一个语法糖，它可以帮助我们简化代码，并且表述地更佳清晰。但 Java 目前来说并不是一门有函数式特性的编程语言，而且短期内不会加入函数式特性。如果你想使用一门拥有函数式特性的语言来写 Android Application 的话，可以考虑一下 Kotlin。</p>
]]></content>
    
    <summary type="html">
    
      由于三体人对我们的科技封锁，我们无法在 Android 开发中启用 Java 1.8 的重要特性——Lambda 表达式。但现在我们可以通过一些工具启用它，然后使用 Lambda 表达式替换没有什么实际意义的单方法匿名内部类。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
      <category term="Java" scheme="https://loshine.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Anroid中的自定义View绘制</title>
    <link href="https://loshine.me/2016/03/26/custom-view-in-android/"/>
    <id>https://loshine.me/2016/03/26/custom-view-in-android/</id>
    <published>2016-03-25T16:09:00.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>虽然我们在开发中基本可以用 Android 自带的各种控件实现绝大多数的功能，但难以避免还是有一些需求是自带的控件无法实现的。这个时候我们通常会想到去 Github 上寻找开源控件，但有的东西是有成熟的实现如：ViewPager 的 Indicator。而有的就没那么容易找到了。</p>
<p>还有就是虽然我们平时的一些需求可以使用图片资源代替，但过多的图片资源不仅会使得应用体积增大，还会使得加载的过程中消耗不少的系统资源（内存以及 CPU）—— 我曾经就这么干过，至少这种方法做东西很快（但也很坑）。</p>
<p>这个时候我们就应该想到自定义 View 了，下面就讲讲我在学习自定义 View 的一些心得体会吧。</p>
</blockquote>
<h1 id="View绘制流程"><a href="#View绘制流程" class="headerlink" title="View绘制流程"></a>View绘制流程</h1><p>View 的绘制是从 ViewRoot 的<code>performTraversals()</code>方法开始的，其执行过程可简单概括为根据之前所有设置好的状态，判断是否需要计算视图大小（measure）、是否需要重新安置视图的位置（layout），以及是否需要重绘（draw）视图，其流程图如下所示：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-flow.png" alt="流程图"></p>
<p>而我们今天讲的自定义 View 的绘制，主要就是在是否需要重新 draw 这一步来实现。</p>
<h1 id="三个绘图工具类简介"><a href="#三个绘图工具类简介" class="headerlink" title="三个绘图工具类简介"></a>三个绘图工具类简介</h1><p>要在自定义 View 中进行重新绘制，我们首先需要了解一下 Android 中的三个重要的绘图工具类，它们就是<code>Paint</code>(画笔)、<code>Canvas</code>(画布)以及<code>Path</code>(路径)。当然其实不仅仅只有这三个可以作用于画图和图像处理，但它们是最基础的。</p>
<h2 id="Paint"><a href="#Paint" class="headerlink" title="Paint"></a>Paint</h2><p>Paint 就是画笔，在 Android 图形绘制的时候，我们就好像真的有一个人拿着画笔把图像画出来一样，所以画笔这个类也给了我们和现实世界作画的时候一样的一些设定。</p>
<p>我们可以通过 Paint 来设定线宽(就像现实中画笔的粗细)、颜色(颜料)、透明度以及填充风格等。</p>
<p>我们可以通过它的构造函数来新建一个画笔</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Paint paint = <span class="keyword">new</span> Paint();</div></pre></td></tr></table></figure>
<p>然后对它进行一些设定</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">paint.setARGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 设置 ARGB 颜色 int</span></div><div class="line">paint.setAlpha(<span class="number">0</span>); <span class="comment">// 设置透明度 int</span></div><div class="line">paint.setColor(getResources().getColor(android.R.color.black)); <span class="comment">// 设置颜色</span></div><div class="line">paint.setAntiAlias(<span class="keyword">true</span>); <span class="comment">// 开启抗锯齿</span></div><div class="line">paint.setDither(<span class="keyword">true</span>); <span class="comment">// 开启抖动处理，使得绘制的图形更清晰</span></div><div class="line">paint.setFilterBitmap(<span class="keyword">true</span>); <span class="comment">// 滤掉对Bitmap图像的优化操作,加快显示速度</span></div><div class="line">paint.setMaskFilter(maskFilter); <span class="comment">// 添加滤镜</span></div><div class="line">paint.setColorFilter(colorFilter); <span class="comment">// 设置颜色过滤器</span></div><div class="line">paint.setPathEffect(pathEffect); <span class="comment">// 设置路径效果(如虚线等)</span></div><div class="line">paint.setShader(shader); <span class="comment">// 设置渐变效果</span></div><div class="line">paint.setShadowLayer(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, Color.GRAY); <span class="comment">// 半径2,x,y 距离为2，颜色灰色的阴影</span></div><div class="line">paint.setStyle(Paint.Style.FILL_AND_STROKE); <span class="comment">// 画笔样式(内部、边框还是both，画封闭图形的时候比较重要)</span></div><div class="line">paint.setStrokeCap(Paint.Cap.SQUARE); <span class="comment">// 方形笔刷</span></div><div class="line">paint.setStrokeJoin(Paint.Join.MITER); <span class="comment">// 各图形的结合方式</span></div><div class="line">paint.setStrokeWidth(<span class="number">2</span>); <span class="comment">// 画笔粗细</span></div><div class="line">paint.setXfermode(xfermode); <span class="comment">// 图形重叠时的处理方式</span></div><div class="line">paint.setFakeBoldText(<span class="keyword">true</span>); <span class="comment">// 模拟粗体</span></div><div class="line">paint.setSubpixelText(<span class="keyword">true</span>); <span class="comment">// 提升文字在 LCD 的显示效果</span></div><div class="line">paint.setTextAlign(Paint.Align.CENTER); <span class="comment">// 文字对齐方向</span></div><div class="line">paint.setTextScaleX(<span class="number">0.5</span>); <span class="comment">// 文字 X 轴缩放</span></div><div class="line">paint.setTextSize(<span class="number">40</span>); <span class="comment">// 文字大小</span></div><div class="line">paint.setTextSkewX(<span class="number">30</span>); <span class="comment">// 文字倾斜度</span></div><div class="line">paint.setTypeface(Typeface.SANS_SERIF); <span class="comment">// 字体风格</span></div><div class="line">paint.setUnderlineText(<span class="keyword">true</span>); <span class="comment">// 下划线</span></div><div class="line">paint.setStrikeThruText(<span class="keyword">true</span>); <span class="comment">// 删除线</span></div><div class="line">paint.setStrokeJoin(Paint.Join.ROUND); <span class="comment">// 结合处风格</span></div><div class="line">paint.setStrokeMiter(<span class="number">30</span>); <span class="comment">// 画笔倾斜度</span></div><div class="line">paint.setStrokeCap(Paint.Cap.ROUND); <span class="comment">// 拐角处风格</span></div><div class="line">paint.ascent(); <span class="comment">// baseline之上至字符最高处的距离</span></div><div class="line">paint.descent(); <span class="comment">// baseline之下至字符最低处的距离</span></div><div class="line">paint.clearShadowLayer(); <span class="comment">// 清除阴影</span></div><div class="line"><span class="comment">// 等等</span></div></pre></td></tr></table></figure>
<p>但我们光有画笔还是不够的，我们至少还需要画布(Canvas)才可以真正开始作画呢。</p>
<h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><p>Canvas 就是画布，我们有了画笔和画布就可以开始作画(图形绘制)了。</p>
<p>我们有两种创建 Canvas 的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Canvas canvas = <span class="keyword">new</span> Canvas();</div><div class="line">Canvas canvasByBitmap = <span class="keyword">new</span> Canvas(bitmap);</div></pre></td></tr></table></figure>
<p>其中传入 Bitmap 的方法会将 Bitmap 作为画布的背景。</p>
<p>下面是常用的<code>drawXXX()</code>方法，它们被用于绘制不同的图形</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">canvas.drawRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>), mPaint); <span class="comment">// 绘制一个方形</span></div><div class="line">canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, mPaint); <span class="comment">// 绘制一个方形</span></div><div class="line">canvas.drawPath(path, paint); <span class="comment">// 绘制一个路径</span></div><div class="line">canvas.drawBitmap(bitmap, src, dst, mPaint); <span class="comment">// 第二和第三个参数是 Rect</span></div><div class="line">canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, mPaint); <span class="comment">// 画线</span></div><div class="line">canvas.drawPoint(<span class="number">100</span>, <span class="number">20</span>, mPaint); <span class="comment">// 画点</span></div><div class="line">canvas.drawText(<span class="string">"这是一段文字"</span>, <span class="number">0</span>, <span class="number">0</span>, mPaint); <span class="comment">// 画文字</span></div><div class="line">canvas.drawOval(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>), mPaint); <span class="comment">// 画方形的内切椭圆</span></div><div class="line">canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>, mPaint); <span class="comment">// 画圆</span></div><div class="line">canvas.drawArc(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>), <span class="number">0</span>, <span class="number">30</span>, <span class="keyword">true</span>, mPaint); <span class="comment">// 一个矩形内的扇形</span></div></pre></td></tr></table></figure>
<p>还有<code>clipXXX()</code>方法，它们是裁剪一块新的区域用于绘图，这里就不详细说明了。</p>
<p><code>save()</code>和<code>restore()</code>方法用来保存和恢复 Canvas 的状态，简单而言就是一个存档，一个恢复存档。</p>
<p>还有就是三个变换方法：<code>translate</code>(平移)、<code>scale</code>(缩放)以及<code>rotate</code>(旋转)了，它们可以控制画布的一些动作，就好像我们真实世界中作画的时候对画布的一些动作一样(除了缩放，2333)。</p>
<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>其实在有了上面两个类之后我们就已经可以开始绘制了，但还是先把 Path 也介绍完毕之后再开始真实案例吧。</p>
<p>Path 就是路径，有点像我们在初中数学中学习函数的时候，可以根据几个点确认画出一个函数的图形。</p>
<p>下面是一些常用的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">path.addArc(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>), <span class="number">0</span>, <span class="number">30</span>); <span class="comment">// 添加一段圆弧</span></div><div class="line">path.addCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>, Path.Direction.CW); <span class="comment">// 顺时针圆</span></div><div class="line">path.addOval(rectF, Path.Direction.CCW); <span class="comment">// 逆时针椭圆</span></div><div class="line">path.addRect(rectF, Path.Direction.CW); <span class="comment">// 添加矩形</span></div><div class="line">path.addRoundRect(rectF, &#123;<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>&#125;, path.Direction.CW); <span class="comment">// 添加圆角矩形</span></div><div class="line">path.isEmpty(); <span class="comment">// 是否无路径</span></div><div class="line">path.transform(matrix); <span class="comment">// 矩阵变换</span></div><div class="line">path.moveTo(<span class="number">100</span>, <span class="number">100</span>); <span class="comment">// 移动画笔而不绘制</span></div><div class="line">path.lineTo(<span class="number">300</span>, <span class="number">300</span>); <span class="comment">// 默认从(0，0)开始绘制,可以用 moveTo 移动起始点,调用 canvas.drawPath(path, paint) 绘制</span></div><div class="line">path.quadTo(x1, y1, x2, y2); <span class="comment">// 绘制贝塞尔曲线,三点(起始点默认(0, 0))确认</span></div><div class="line">path.rCubicTo(x1, y1, x2, y2, x3, y3); <span class="comment">// 多一个控制点的贝塞尔曲线</span></div><div class="line">path.arcTo(rectF, <span class="number">0</span>, <span class="number">50</span>); <span class="comment">// 圆弧</span></div></pre></td></tr></table></figure>
<h1 id="开始绘制"><a href="#开始绘制" class="headerlink" title="开始绘制"></a>开始绘制</h1><p>介绍完了三个绘制 UI 的基础类，那么我们现在来动手试试吧。难度从低到高，循序渐进完成自定义 View 中复杂图形的绘制。</p>
<p>我们自定义一个 View 并且要重新绘制的话，我们只需要新建一个类<strong>继承</strong> View 并且实现<code>onDraw(Canvas canvas)</code>即可，View 会调用子类实现的<code>onDraw</code>完成绘制。</p>
<p>那么我们接下来的示例就只列出<code>onDraw</code>方法和对应的效果图了。</p>
<h2 id="简单图形"><a href="#简单图形" class="headerlink" title="简单图形"></a>简单图形</h2><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    <span class="comment">// 在构造函数中初始化画笔并设置为黑色</span></div><div class="line">    canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-1.png" alt="黑色矩形"></p>
<h3 id="线段"><a href="#线段" class="headerlink" title="线段"></a>线段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-2.png" alt="线段"></p>
<h3 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    canvas.drawCircle(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-3.png" alt="圆形"></p>
<h3 id="画布底色"><a href="#画布底色" class="headerlink" title="画布底色"></a>画布底色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    canvas.drawColor(getResources().getColor(android.R.color.darker_gray));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/blod-pic-custom-view-4.png" alt="画布底色"></p>
<h2 id="复杂图形"><a href="#复杂图形" class="headerlink" title="复杂图形"></a>复杂图形</h2><h3 id="刻度尺"><a href="#刻度尺" class="headerlink" title="刻度尺"></a>刻度尺</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    <span class="comment">// 防止数字0出界</span></div><div class="line">    canvas.translate(<span class="number">0</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 带有数字的长刻度</span></div><div class="line">            canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">70</span>, <span class="number">0</span>, mPaint);</div><div class="line">            <span class="comment">// 画文字</span></div><div class="line">            canvas.drawText(String.format(Locale.CHINESE, <span class="string">"%d"</span>, i / <span class="number">10</span>), <span class="number">100</span>, <span class="number">10</span>, mPaint);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 每隔5的中等长度的刻度</span></div><div class="line">            canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, mPaint);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 其它小刻度</span></div><div class="line">            canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>, mPaint);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 每个刻度画完之后位移</span></div><div class="line">        canvas.translate(<span class="number">0</span>, <span class="number">15</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-5.png" alt="刻度尺"></p>
<h3 id="手表表盘"><a href="#手表表盘" class="headerlink" title="手表表盘"></a>手表表盘</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    <span class="comment">// 绘制外圈圆</span></div><div class="line">    canvas.drawCircle(<span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, mPaint);</div><div class="line"></div><div class="line">    <span class="comment">// 绘制分针和时针</span></div><div class="line">    canvas.drawLine(<span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">200</span>, mPaint);</div><div class="line">    canvas.drawLine(<span class="number">400</span>, <span class="number">400</span>, <span class="number">550</span>, <span class="number">400</span>, mPaint);</div><div class="line"></div><div class="line">    <span class="comment">// 绘制刻度和文字</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</div><div class="line">        canvas.drawLine(<span class="number">400</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">10</span>, mPaint);</div><div class="line">        canvas.drawText(String.format(Locale.CHINESE, <span class="string">"%d"</span>, i == <span class="number">0</span> ? <span class="number">12</span> : i),</div><div class="line">                <span class="number">400</span>, <span class="number">100</span>, mTextPaint);</div><div class="line">        <span class="comment">// 旋转画布</span></div><div class="line">        canvas.rotate(<span class="number">30</span>, <span class="number">400</span>, <span class="number">400</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/blog-pic-custom-view-6.png" alt="表盘"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实 Android 中的图形绘制基本就是靠这三个类扩展变化而来，掌握了它们的使用方式我们也就可以定义各种各样的好看的自定义控件了。</p>
<p>那么我们掌握了绘制之后，我们还要考虑的就是自定义 View 的测量了，我会在之后再写一篇博文来总结我学习自定义 View 的测量的一些经验，感谢观看（虽然并不会有多少人看……）。</p>
]]></content>
    
    <summary type="html">
    
      在 Android 中，自定义 View 几乎是每一个开发者都需要去实现的，本文就简单讲解一下我在学习自定义 View 的一些心得和体会。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移到 Hexo</title>
    <link href="https://loshine.me/2016/03/22/migrate-blog-to-hexo/"/>
    <id>https://loshine.me/2016/03/22/migrate-blog-to-hexo/</id>
    <published>2016-03-22T09:09:00.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Github Pages 服务的 Jekyll 升级了，干脆我就趁着这次机会把博客迁移到 Hexo 好了。</p>
<p>Hexo 是 Node.js 的一个静态博客系统，相比起 Ruby 实现的 Jekyll，它生成的速度更快而且更加现代化。当然最重要的就是对前端工程师更友好啦，毕竟是用 javascript 写的嘛</p>
<p>使用 Hexo 和 Jekyll 的不同点在于 Hexo 是生成静态文件后上传到 Github Pages 服务上，而 Jekyll 是上传源码然后在服务器上生成静态文件。</p>
</blockquote>
<h1 id="如何使用Hexo"><a href="#如何使用Hexo" class="headerlink" title="如何使用Hexo"></a>如何使用Hexo</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol>
<li>安装 Node.js</li>
<li>安装 Hexo <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="生成静态博客项目"><a href="#生成静态博客项目" class="headerlink" title="生成静态博客项目"></a>生成静态博客项目</h2><p>只需要输入以下命令就会生成一个静态博客项目</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>然后等待 npm 安装完成</p>
<h2 id="运行博客"><a href="#运行博客" class="headerlink" title="运行博客"></a>运行博客</h2><p>输入以下命令，然后就可以在浏览器地址栏中输入<code>http://localhost:4000/</code>打开博客</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<h2 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h2><p>在<code>source/_posts</code>文件夹下放入对应格式的 markdown 文件，hexo 就会根据模板将其渲染为对应格式的 html 静态文件。</p>
<h1 id="从Jekyll迁移"><a href="#从Jekyll迁移" class="headerlink" title="从Jekyll迁移"></a>从Jekyll迁移</h1><h2 id="迁移文章"><a href="#迁移文章" class="headerlink" title="迁移文章"></a>迁移文章</h2><p>把<code>_posts</code>文件夹内的所有文件复制到<code>source/_posts</code>文件夹，并在<code>_config.yml</code>中修改<code>new_post_name</code>参数。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">new_post_name:</span> :year-:month-:day-:title.md</div></pre></td></tr></table></figure>
<h2 id="文章格式修改"><a href="#文章格式修改" class="headerlink" title="文章格式修改"></a>文章格式修改</h2><p>Jekyll 特定的<code>Front-matter</code>需要删掉并且替换为对应的 Hexo 的<code>Front-matter</code>，并且文章的 markdown 格式可能需要修改</p>
<h1 id="部署到-Github-Pages"><a href="#部署到-Github-Pages" class="headerlink" title="部署到 Github Pages"></a>部署到 Github Pages</h1><p>和 Jekyll 类似，我们还是需要一个<code>username.github.io</code>的项目。但和 Jekyll 不同的是我们需要把生成的静态文件部署上去而不是将 markdown 文件部署上去。</p>
<p>在本地输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line"><span class="comment"># 或者</span></div><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>即可在本地生成静态页面，然后打开<code>config.yml</code>，修改为自己的项目信息就可以了</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> git@github.com:loshine/loshine.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div></pre></td></tr></table></figure>
<h1 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p><code>config.yml</code>文件有许多的可配置选项，可以参照<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">这里</a>设置</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>默认情况下使用的是 landscape 主题，我们也可以在<a href="https://hexo.io/themes/" target="_blank" rel="external">这里</a>挑选主题</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实博客迁移完毕已经挺久了，我终于在今天（2016-03-22）想起来把这个过程记录下来了，也可以给其他需要迁移的人一个参考吧。</p>
]]></content>
    
    <summary type="html">
    
      Github Pages 服务的 Jekyll 升级了，干脆我就趁着这次机会把博客迁移到 Hexo 好了。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="github" scheme="https://loshine.me/tags/github/"/>
    
      <category term="github-pages" scheme="https://loshine.me/tags/github-pages/"/>
    
      <category term="Hexo" scheme="https://loshine.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin与DataBinding协作</title>
    <link href="https://loshine.me/2016/03/08/android-databinding-with-kotlin/"/>
    <id>https://loshine.me/2016/03/08/android-databinding-with-kotlin/</id>
    <published>2016-03-08T13:23:10.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>DataBinding 是 Google 爹地为我们这群苦逼的 Android 开发者推出的 MVVM 框架。本文解决 Kotlin 和 DataBindin 共用时报错的问题。</p>
<h1 id="如下修改即可"><a href="#如下修改即可" class="headerlink" title="如下修改即可"></a>如下修改即可</h1><p>app 的 build.gradle 中添加如下部分</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">	kapt <span class="string">'com.android.databinding:compiler:1.0-rc5'</span><span class="comment">//改为对应版本</span></div><div class="line">&#125;</div><div class="line">kapt &#123;</div><div class="line">	generateStubs = <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      DataBinding 是 Google 爹地为我们这群苦逼的 Android 开发者推出的 MVVM 框架。本文解决 Kotlin 和 DataBindin 共用时报错的问题。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://loshine.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin中的委托属性</title>
    <link href="https://loshine.me/2016/03/01/delegated-properties-in-kotlin/"/>
    <id>https://loshine.me/2016/03/01/delegated-properties-in-kotlin/</id>
    <published>2016-03-01T01:29:34.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的<strong>委托属性</strong>这一特性。</p>
</blockquote>
<h1 id="委托属性-Delegated-Properties"><a href="#委托属性-Delegated-Properties" class="headerlink" title="委托属性(Delegated Properties)"></a>委托属性(Delegated Properties)</h1><p>我们先看看官网的定义：</p>
<blockquote>
<p>有一些种类的属性，虽然我们可以在每次需要的时候手动实现它们，但是如果能够把他们之实现一次 并放入一个库同时又能够一直使用它们那会更好。例如：</p>
<ul>
<li>延迟属性（lazy properties）: 数值只在第一次被访问的时候计算。</li>
<li>可控性（observable properties）: 监听器得到关于这个特性变化的通知，</li>
<li>把所有特性储存在一个映射结构中，而不是分开每一条。</li>
</ul>
<p>为了支持这些(或者其他)例子，Kotlin 采用 委托属性。</p>
</blockquote>
<p>简言之就是<em>简化手动实现的属性，将其抽象出一个库</em>。</p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="定义一个委托"><a href="#定义一个委托" class="headerlink" title="定义一个委托"></a>定义一个委托</h2><p>Kotlin 中有两种属性：用<code>var</code>修饰的可变属性和由<code>val</code>修饰的只读属性。由<code>val</code>修饰的只读属性使用的委托需要实现<code>ReadOnlyProperty</code>，而<code>var</code>修饰的可变属性则需要实现<code>ReadWriteProperty</code></p>
<p>在调用被委托的属性的<code>getter</code>和<code>setter</code>时，对应操作会被委托给<code>getValue()</code>以及<code>setValue()</code>。</p>
<p>如实现一个最简单的委托<code>Delegate</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span> </span>&#123;</div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"<span class="subst">$thisRef</span>, thank you for delegating '<span class="subst">$&#123;property.name&#125;</span>' to me!"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">String</span>)</span></span> &#123;</div><div class="line">        println(<span class="string">"<span class="subst">$value</span> has been assigned to '<span class="subst">$&#123;property.name&#125;</span> in <span class="subst">$thisRef</span>.'"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用定义好的委托属性"><a href="#使用定义好的委托属性" class="headerlink" title="使用定义好的委托属性"></a>使用定义好的委托属性</h2><p>语法为<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> p: String <span class="keyword">by</span> Delegate()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>by</code>后面的是委托表达式，我们调用这个对象并使用属性：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> e = Example()</div><div class="line">println(e.p)</div><div class="line"></div><div class="line">e.p = <span class="string">"NEW"</span></div></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Example@33a17727, thank you <span class="keyword">for</span> delegating <span class="string">'p'</span> to me!</div><div class="line">NEW has been assigned to <span class="string">'p'</span> <span class="keyword">in</span> Example@33a17727.</div></pre></td></tr></table></figure>
<p>如上可知，<code>thisRef</code>对应的是拥有该被委托属性的对象实例，<code>property</code>则是属性，<code>value</code>是调用<code>setter</code>时的传入值。</p>
<h1 id="实例讲解"><a href="#实例讲解" class="headerlink" title="实例讲解"></a>实例讲解</h1><h2 id="lazy-懒加载"><a href="#lazy-懒加载" class="headerlink" title="lazy 懒加载"></a>lazy 懒加载</h2><p>Kotlin 标准库自带的<strong>懒加载委托</strong>，在属性第一次被使用时才进行初始化。</p>
<p>函数<code>lazy()</code>接受一个 lambda 然后返回一个可以作为委托<code>Lazy&lt;T&gt;</code> 实例来实现延迟属性: 第一个调用<code>getter</code>执行变量传递到<code>lazy()</code>并记录结果, 后来的<code>getter</code>调用只会返回记录的结果。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> lazyValue: String <span class="keyword">by</span> lazy &#123;</div><div class="line">    println(<span class="string">"computed!"</span>)</div><div class="line">    <span class="string">"Hello"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    println(lazyValue)</div><div class="line">    println(lazyValue)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其打印结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">computed!   <span class="comment"># 第一次使用时先初始化</span></div><div class="line">Hello       <span class="comment"># getter</span></div><div class="line">Hello       <span class="comment"># 后续都只会调用 getter</span></div></pre></td></tr></table></figure>
<p><strong>懒加载委托</strong>在实际编码中应用十分广泛，比如 Android 中我们可以把很多在<code>OnCreate</code>中需要进行的初始化操作使用<strong>懒加载委托</strong>来实现。</p>
<h2 id="使用委托操作-SharedPreferences"><a href="#使用委托操作-SharedPreferences" class="headerlink" title="使用委托操作 SharedPreferences"></a>使用委托操作 SharedPreferences</h2><p>本例出自《Kotlin for Android Developer》，使用了<code>when</code>表达式和委托属性巧妙地使得<code>SharedPrefences</code>的读写变得十分简便</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Preference</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> context: Context, <span class="keyword">val</span> name: String, <span class="keyword">val</span> <span class="keyword">default</span>: T) : ReadWriteProperty&lt;Any?, T&gt; &#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> prefs <span class="keyword">by</span> lazy &#123; context.getSharedPreferences(<span class="string">"default"</span>, Context.MODE_PRIVATE) &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: T &#123;</div><div class="line">        <span class="keyword">return</span> findPreference(name, <span class="keyword">default</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">T</span>)</span></span> &#123;</div><div class="line">        putPreference(name, value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;U&gt;</span> <span class="title">findPreference</span><span class="params">(name: <span class="type">String</span>, <span class="keyword">default</span>: <span class="type">U</span>)</span></span>: U = with(prefs) &#123;</div><div class="line">        <span class="keyword">val</span> res: Any = <span class="keyword">when</span> (<span class="keyword">default</span>) &#123;</div><div class="line">            <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; getLong(name, <span class="keyword">default</span>)</div><div class="line">            <span class="keyword">is</span> String -&gt; getString(name, <span class="keyword">default</span>)</div><div class="line">            <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; getInt(name, <span class="keyword">default</span>)</div><div class="line">            <span class="keyword">is</span> <span class="built_in">Boolean</span> -&gt; getBoolean(name, <span class="keyword">default</span>)</div><div class="line">            <span class="keyword">is</span> <span class="built_in">Float</span> -&gt; getFloat(name, <span class="keyword">default</span>)</div><div class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"This type can be saved into Preferences"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        res <span class="keyword">as</span> U</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;U&gt;</span> <span class="title">putPreference</span><span class="params">(name: <span class="type">String</span>, value: <span class="type">U</span>)</span></span> = with(prefs.edit()) &#123;</div><div class="line">        <span class="keyword">when</span> (value) &#123;</div><div class="line">            <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; putLong(name, value)</div><div class="line">            <span class="keyword">is</span> String -&gt; putString(name, value)</div><div class="line">            <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; putInt(name, value)</div><div class="line">            <span class="keyword">is</span> <span class="built_in">Boolean</span> -&gt; putBoolean(name, value)</div><div class="line">            <span class="keyword">is</span> <span class="built_in">Float</span> -&gt; putFloat(name, value)</div><div class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"This type can be saved into Preferences"</span>)</div><div class="line">        &#125;.apply()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在代码中我们可以如下使用</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhateverActivity</span> : <span class="type">Activity</span></span>() &#123;</div><div class="line">    <span class="keyword">var</span> aInt: <span class="built_in">Int</span> <span class="keyword">by</span> Preference(<span class="keyword">this</span>, <span class="string">"aInt"</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">whatever</span><span class="params">()</span></span> &#123;</div><div class="line">        println(aInt) <span class="comment">// 会从 SharedPreference 取这个数据</span></div><div class="line">        aInt = <span class="number">9</span> <span class="comment">// 会将这个数据写入 SharedPreference</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从此操作<code>SharedPreferences</code>变得如此简单 ~</p>
<h2 id="简单实现一个-KotterKnife"><a href="#简单实现一个-KotterKnife" class="headerlink" title="简单实现一个 KotterKnife"></a>简单实现一个 KotterKnife</h2><p>KotterKnife 是一个 Android 控件依赖注入框架，使用它可以很方便地初始化 Activity、Fragment、View 等的控件。</p>
<p>KotterKnife 的实现原理就是使用了委托属性，下面我就使用委托属性简单实现一个 View 注入功能</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>我们平时是这样初始化 View 的</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">    setContentView(R.layout.activity_main)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> textView = findViewById(R.id.text_view) <span class="keyword">as</span> TextView</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>考虑到通常我们在<code>onCreate</code>方法中将其初始化，我们可以用 lazy 委托，在第一次使用该控件的时候才将其初始化，这样可以减少不必要的内存消耗。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> mTextView <span class="keyword">by</span> lazy &#123;</div><div class="line">    findViewById(R.id.text_view) <span class="keyword">as</span> TextView</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对其抽取简化</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;V : View&gt;</span> Activity.<span class="title">bindView</span><span class="params">(id: <span class="type">Int</span>)</span></span>: Lazy&lt;V&gt; = lazy &#123;</div><div class="line">    viewFinder(id) <span class="keyword">as</span> V</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> Activity.viewFinder: Activity.(<span class="built_in">Int</span>) -&gt; View?</div><div class="line">    <span class="keyword">get</span>() = &#123; findViewById(it) &#125;</div></pre></td></tr></table></figure>
<p>之后我们就可以在 Activity 中这样注入 View 了</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> mTextView <span class="keyword">by</span> bindView&lt;TextView&gt;(R.id.text_view)</div></pre></td></tr></table></figure>
<p>如上实现了类似 KotterKnife 的控件注入功能，当然 KotterKnife 中还有更加强大的可选绑定以及数组绑定，本文中我们就不细说了，有兴趣的读者可以阅读 <a href="https://github.com/JakeWharton/kotterknife/blob/master/src%2Fmain%2Fkotlin%2Fbutterknife%2FButterKnife.kt" target="_blank" rel="external">KotterKnife源码</a>。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文分析了 Kotlin 中的委托属性，并对其实际应用做了示例分析。委托属性是 Kotlin 语言的一个特性，灵活使用可以解决实际编码中的许多问题，减少大量重复代码，而由于其与属性的<code>getter</code>、<code>setter</code>直接绑定所以使用起来也十分灵活方便。</p>
<p>总而言之：<strong>这真是极好的</strong>。</p>
]]></content>
    
    <summary type="html">
    
      Kotlin 是 Jetbrain 推出的一门运行在 JVM 上的语言，它结合了面向对象以及函数式语言的特性，超甜的语法糖以及来自知名 IDE 大厂 Jetbrain 的出身让它初一面世就广受瞩目，特别是在 Android 开发社区中。它相比起 Java 拥有了许许多多的优秀特性，并且几乎每一个新特性都对应解决了 Java 开发时的痛苦之处，本篇文章主要讲解 Kotlin 中的委托属性这一特性。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://loshine.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin中实现Parcelable</title>
    <link href="https://loshine.me/2015/10/17/implements-parcelable-in-kotlin/"/>
    <id>https://loshine.me/2015/10/17/implements-parcelable-in-kotlin/</id>
    <published>2015-10-17T03:03:59.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在Android中，如果需要序列化对象可以选择实现 <strong>Serializable</strong> 或 <strong>Parceable</strong>。如果是在使用内存的情况下，<strong>Parcelable</strong> 的效率比 <strong>Serializable</strong> 高。但 <strong>Parcelable</strong> 不能被持久化存储，此时还是需要实现 <strong>Serializable</strong>。</p>
</blockquote>
<h1 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h1><p>首先我们看一个普通的 <strong>JavaBean</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 帖子实体类</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * Created by Loshine on 15/9/8.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostEntity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子标题</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子类别</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String category;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子链接</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String link;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 评论数</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String comments;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发布者</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String announcer;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最新回复时间</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String replyTime;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 省略 getter setter...</div><div class="line">     */</div></pre></td></tr></table></figure>
<p>其中的代码都是 <strong>JavaBean</strong> 的属性以及 <em>getter</em>、<em>setter</em></p>
<p>如果其实现 <strong>Parcelable</strong>，则是这样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 帖子实体类</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * Created by Loshine on 15/9/8.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostEntity</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子标题</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子类别</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String category;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子链接</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String link;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 评论数</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String comments;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发布者</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String announcer;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最新回复时间</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String replyTime;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 省略 getter setter...</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeString(<span class="keyword">this</span>.name);</div><div class="line">        dest.writeString(<span class="keyword">this</span>.category);</div><div class="line">        dest.writeString(<span class="keyword">this</span>.link);</div><div class="line">        dest.writeString(<span class="keyword">this</span>.comments);</div><div class="line">        dest.writeString(<span class="keyword">this</span>.announcer);</div><div class="line">        dest.writeString(<span class="keyword">this</span>.replyTime);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PostEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">PostEntity</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = in.readString();</div><div class="line">        <span class="keyword">this</span>.category = in.readString();</div><div class="line">        <span class="keyword">this</span>.link = in.readString();</div><div class="line">        <span class="keyword">this</span>.comments = in.readString();</div><div class="line">        <span class="keyword">this</span>.announcer = in.readString();</div><div class="line">        <span class="keyword">this</span>.replyTime = in.readString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;PostEntity&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;PostEntity&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> PostEntity <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostEntity(source);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> PostEntity[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostEntity[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>在实现<code>Parcelable</code>的时候我们需要重写两个方法</p>
<ul>
<li><code>public void writeToParcel(Parcel dest, int flags)</code></li>
<li><code>public int describeContents()</code></li>
</ul>
<p>其中<code>describeContents</code>只需要返回 <strong>0</strong> 即可</p>
<p><code>writeToParcel</code>方法中我们把需要序列化的属性使用<code>writeXXX</code>的方式写入 <strong>Parcel</strong> 。</p>
<p>之后是 <strong>CREATOR</strong> 对象，这个对象负责从 <strong>Parcel</strong> 中读取对象，所以我们需要重写其方法来读取对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">PostEntity</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = in.readString();</div><div class="line">        <span class="keyword">this</span>.category = in.readString();</div><div class="line">        <span class="keyword">this</span>.link = in.readString();</div><div class="line">        <span class="keyword">this</span>.comments = in.readString();</div><div class="line">        <span class="keyword">this</span>.announcer = in.readString();</div><div class="line">        <span class="keyword">this</span>.replyTime = in.readString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;PostEntity&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;PostEntity&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> PostEntity <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostEntity(source);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> PostEntity[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostEntity[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>这一段就是其实现方式，可见主要是将对象从 <strong>Parcel</strong> 中读取出来。</p>
<h1 id="Kotlin实现"><a href="#Kotlin实现" class="headerlink" title="Kotlin实现"></a>Kotlin实现</h1><p>看过了冗长的 <strong>Java</strong> 实现方式，我们来看看kotlin是如何实现的吧。</p>
<p>首先使用插件将其转换为 <strong>Kotlin</strong> 文件，并修改其中的错误</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostEntity</span> : <span class="type">Parcelable &#123;</span></span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子标题</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子类别</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> category: String? = <span class="literal">null</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 帖子链接</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> link: String? = <span class="literal">null</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 评论数</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> comments: String? = <span class="literal">null</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发布者</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> announcer: String? = <span class="literal">null</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最新回复时间</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> replyTime: String? = <span class="literal">null</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeContents</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeToParcel</span><span class="params">(dest: <span class="type">Parcel</span>, flags: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">        dest.writeString(<span class="keyword">this</span>.name)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.category)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.link)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.comments)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.announcer)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.replyTime)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">constructor</span>(`<span class="keyword">in</span>`: Parcel) &#123;</div><div class="line">        <span class="keyword">this</span>.name = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.category = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.link = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.comments = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.announcer = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.replyTime = `<span class="keyword">in</span>`.readString()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class="keyword">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFromParcel</span><span class="params">(source: <span class="type">Parcel</span>)</span></span>: PostEntity &#123;</div><div class="line">                <span class="keyword">return</span> PostEntity(source)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newArray</span><span class="params">(size: <span class="type">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class="line">                <span class="keyword">return</span> arrayOfNulls(size)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是 <strong>Kotlin</strong> 实现 <strong>Parcelable</strong> 的方式了</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>经过插件转化的 kotlin 代码其实使用的还是 java 的方式和 java 的思想，我们可以将其完全转化为 kotlin 的方式并对其优化</p>
<p>首先把其转化为<strong>数据类</strong>，这样会自动为我们生成</p>
<ul>
<li><code>equals()/hashCode()</code></li>
<li><code>toString()</code></li>
<li><code>componentN()</code></li>
<li><code>copy()</code></li>
</ul>
<p>我们只需要将其改为这样</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PostEntity</span></span>(<span class="keyword">var</span> name: String? = <span class="literal">null</span>, <span class="comment">/* 帖子标题*/</span></div><div class="line">                      <span class="keyword">var</span> category: String? = <span class="literal">null</span>, <span class="comment">/* 帖子类别 */</span></div><div class="line">                      <span class="keyword">var</span> link: String? = <span class="literal">null</span>, <span class="comment">/* 帖子链接 */</span></div><div class="line">                      <span class="keyword">var</span> comments: String? = <span class="literal">null</span>, <span class="comment">/* 评论数 */</span></div><div class="line">                      <span class="keyword">var</span> announcer: String? = <span class="literal">null</span>, <span class="comment">/* 发布者 */</span></div><div class="line">                      <span class="keyword">var</span> replyTime: String? = <span class="literal">null</span> <span class="comment">/* 最新回复时间 */</span></div><div class="line">) : Parcelable &#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeContents</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeToParcel</span><span class="params">(dest: <span class="type">Parcel</span>, flags: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">        dest.writeString(<span class="keyword">this</span>.name)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.category)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.link)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.comments)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.announcer)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.replyTime)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">constructor</span>(`<span class="keyword">in</span>`: Parcel) : <span class="keyword">this</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.name = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.category = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.link = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.comments = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.announcer = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.replyTime = `<span class="keyword">in</span>`.readString()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class="keyword">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFromParcel</span><span class="params">(source: <span class="type">Parcel</span>)</span></span>: PostEntity &#123;</div><div class="line">                <span class="keyword">return</span> PostEntity(source)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newArray</span><span class="params">(size: <span class="type">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class="line">                <span class="keyword">return</span> arrayOfNulls(size)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再之后观察发现，所有的 <strong>Parcelable</strong> 都需要有一个 <strong>CREATOR</strong></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> CREATOR: Parcelable.Creator&lt;PostEntity&gt; = <span class="keyword">object</span> : Parcelable.Creator&lt;PostEntity&gt; &#123;</div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFromParcel</span><span class="params">(source: <span class="type">Parcel</span>)</span></span>: PostEntity &#123;</div><div class="line">            <span class="keyword">return</span> PostEntity(source)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newArray</span><span class="params">(size: <span class="type">Int</span>)</span></span>: Array&lt;PostEntity?&gt; &#123;</div><div class="line">            <span class="keyword">return</span> arrayOfNulls(size)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处使用了 <strong>Kotlin</strong> 的<em>伴生对象</em>，使得调用 <strong>CREATOR</strong> 类似于 <strong>Java</strong> 中的<em>静态属性</em></p>
<p>可以使用 Kotlin 的函数式编程特性抽取</p>
<p>新建文件<code>ParcelableExt.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> createParcel<span class="type">&lt;<span class="keyword">reified</span> T : Parcelable&gt;</span><span class="params">(<span class="keyword">crossinline</span> createFromParcel: (<span class="type">Parcel</span>)</span></span> -&gt; T?): Parcelable.Creator&lt;T&gt; =</div><div class="line">        <span class="keyword">object</span> : Parcelable.Creator&lt;T&gt; &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFromParcel</span><span class="params">(source: <span class="type">Parcel</span>)</span></span>: T? = createFromParcel(source)</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newArray</span><span class="params">(size: <span class="type">Int</span>)</span></span>: Array&lt;<span class="keyword">out</span> T?&gt; = arrayOfNulls(size)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>此处使用了 Kotlin 的内联函数，然后我们就可以将 <code>PostEntity</code> 精简为如下</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PostEntity</span></span>(<span class="keyword">var</span> name: String? = <span class="literal">null</span>, <span class="comment">/* 帖子标题*/</span></div><div class="line">                      <span class="keyword">var</span> category: String? = <span class="literal">null</span>, <span class="comment">/* 帖子类别 */</span></div><div class="line">                      <span class="keyword">var</span> link: String? = <span class="literal">null</span>, <span class="comment">/* 帖子链接 */</span></div><div class="line">                      <span class="keyword">var</span> comments: String? = <span class="literal">null</span>, <span class="comment">/* 评论数 */</span></div><div class="line">                      <span class="keyword">var</span> announcer: String? = <span class="literal">null</span>, <span class="comment">/* 发布者 */</span></div><div class="line">                      <span class="keyword">var</span> replyTime: String? = <span class="literal">null</span> <span class="comment">/* 最新回复时间 */</span></div><div class="line">) : Parcelable &#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeContents</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeToParcel</span><span class="params">(dest: <span class="type">Parcel</span>, flags: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">        dest.writeString(<span class="keyword">this</span>.name)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.category)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.link)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.comments)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.announcer)</div><div class="line">        dest.writeString(<span class="keyword">this</span>.replyTime)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">constructor</span>(`<span class="keyword">in</span>`: Parcel) : <span class="keyword">this</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.name = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.category = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.link = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.comments = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.announcer = `<span class="keyword">in</span>`.readString()</div><div class="line">        <span class="keyword">this</span>.replyTime = `<span class="keyword">in</span>`.readString()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line">        <span class="keyword">val</span> CREATOR = createParcel &#123; PostEntity(it) &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然可以直接将 <strong>Java</strong> 文件转化为 <strong>Kotlin</strong> 文件，但这样毕竟没有办法学习到 <strong>Kotlin</strong> 的精髓</p>
<p>使用一门语言就应该按照这门语言的编码风格以及规范去实现，这样才会让我们的学习更加有效率且养成良好的编码习惯</p>
<p><strong>Kotlin</strong> 是一门典型的函数式编程语言，学习它的风格有利于我们了解函数式编程思想</p>
<p>在实现 <strong>Parceable</strong> 时我们使用了 <strong>Kotlin</strong> 的几个特性</p>
<ul>
<li>数据类</li>
<li>二级构造函数</li>
<li>内联函数</li>
</ul>
<p>查阅官方文档完成的同时我也学会了新的<del>姿势</del>知识，想一想也有点小激动呢</p>
]]></content>
    
    <summary type="html">
    
      在 Android中，如果需要序列化对象可以选择实现 Serializable 或 Parceable，如果是在使用内存的情况下，Parcelable 的效率比 Serializable 高
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://loshine.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>打磨真正属于自己的输入法-RIME</title>
    <link href="https://loshine.me/2015/09/12/rime/"/>
    <id>https://loshine.me/2015/09/12/rime/</id>
    <published>2015-09-12T04:59:57.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很久之前就发现了 RIME 这个输入法，但因为在 windows 下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了 mac 作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>RIME，全称是<strong>中州韵输入法引擎</strong>，是由<strong>佛振</strong>先生开发的跨平台开源输入法。</p>
<p>它在不同平台上有不同的名字：</p>
<ul>
<li><strong>Windows</strong>：小狼毫 Weasel</li>
<li><strong>Mac OS X</strong>： 鼠须管 Squirrel</li>
<li><strong>Linux</strong>：ibus-rime or fcitx-rime</li>
</ul>
<p>其内置的输入方案包括</p>
<ul>
<li>朙月拼音</li>
<li>朙月拼音 语句流</li>
<li>朙月拼音 简化字模式</li>
<li>朙月拼音 臺灣正體模式</li>
<li>地球拼音 dì qiú pīn yīn</li>
<li>注音</li>
<li>注音 臺灣正體模式</li>
<li>粵拼</li>
<li>倉頡五代</li>
<li>倉頡 快打模式</li>
<li>速成</li>
<li>五笔86</li>
<li>五笔拼音混合輸入</li>
<li>自然碼雙拼</li>
<li>微軟雙拼</li>
<li>智能ABC雙拼</li>
<li>小鶴雙拼</li>
<li>吳語上海話（新派）</li>
<li>吳語上海話（老派）</li>
<li>中古漢語三拼</li>
<li>中古漢語全拼</li>
<li>X-SAMPA 國際音標</li>
<li>emoji表情</li>
</ul>
<p>再由于其强大的可定制性，也有许多爱好者为其制作了如下输入方案</p>
<ul>
<li>英文</li>
<li>日语</li>
<li>山人全息码</li>
<li>……</li>
</ul>
<p>它也集成了许多好看的主题，当然你也可以自定义自己喜欢的配色主题。</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/111.jpg" alt="配色主题"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>前往<a href="http://rime.im/download/" target="_blank" rel="external">下载地址</a>选择对应的版本下载，Mac用户选择<code>鼠须管 Squirrel</code>即可。</p>
<p>下载完成之后，解压zip压缩包，然后打开<code>Squirrel-versioncode.pkg</code>按步骤安装即可。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li>Mac用户在输入源中添加<strong>鼠须管</strong></li>
<li>按<code>⌘ + Space</code>切换输入法到<strong>鼠须管</strong></li>
<li>按下<code>Ctrl + `</code>，依次选择 2、4 切换到简体输入</li>
<li>Enjoy it！</li>
</ol>
<h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><p>点击右上角输入法按钮，选择用户设定，可以看到所有鼠须管的<strong>配置文件</strong>。鼠须管的配置文件都是<code>yaml</code>格式的，我们如果想要自定义，可以新建一个<code>*.custom.yaml</code>对其进行修改，这样可以防止更新程序的时候修改内容被覆盖，也方便同步。</p>
<h2 id="输入方案"><a href="#输入方案" class="headerlink" title="输入方案"></a>输入方案</h2><p>新建一个<code>default.custom.yaml</code>文件，将如下内容复制进去，然后根据自己的需求注释或者去掉注释即可。在完成之后，不要忘记<strong>重新部署</strong>一下，之后就可以使用<code>Ctrl + `</code>切换输入方案了。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="attr">patch:</span></div><div class="line"><span class="attr">  schema_list:</span></div><div class="line"><span class="attr">    - schema:</span> luna_pinyin          <span class="comment"># 朙月拼音</span></div><div class="line"><span class="attr">    - schema:</span> luna_pinyin_fluency  <span class="comment"># 朙月拼音 语句流</span></div><div class="line"><span class="comment">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></div><div class="line"><span class="comment">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></div><div class="line"><span class="attr">    - schema:</span> terra_pinyin         <span class="comment"># 地球拼音 dì qiú pīn yīn</span></div><div class="line"><span class="comment">#    - schema: bopomofo             # 注音</span></div><div class="line"><span class="comment">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></div><div class="line"><span class="comment">#    - schema: jyutping             # 粵拼</span></div><div class="line"><span class="comment">#    - schema: cangjie5             # 倉頡五代</span></div><div class="line"><span class="comment">#    - schema: cangjie5_express     # 倉頡 快打模式</span></div><div class="line"><span class="comment">#    - schema: quick5               # 速成</span></div><div class="line"><span class="comment">#    - schema: wubi86               # 五笔86</span></div><div class="line"><span class="attr">    - schema:</span> wubi_pinyin          <span class="comment"># 五笔拼音混合輸入</span></div><div class="line"><span class="comment">#    - schema: double_pinyin        # 自然碼雙拼</span></div><div class="line"><span class="comment">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></div><div class="line"><span class="comment">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></div><div class="line"><span class="comment">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></div><div class="line"><span class="comment">#    - schema: wugniu        # 吳語上海話（新派）</span></div><div class="line"><span class="comment">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></div><div class="line"><span class="comment">#    - schema: sampheng      # 中古漢語三拼</span></div><div class="line"><span class="comment">#    - schema: zyenpheng     # 中古漢語全拼</span></div><div class="line"><span class="comment">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></div><div class="line"><span class="attr">    - schema:</span> emoji         <span class="comment"># emoji表情</span></div></pre></td></tr></table></figure>
<h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p>新建一个<code>squirrel.custom.yaml</code>文件，向其中写入如下内容，然后根据自己的需求修改。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 適用於【鼠鬚管】0.9.13+</span></div><div class="line"><span class="comment"># 位置：~/Library/Rime/squirrel.custom.yaml</span></div><div class="line"><span class="comment"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></div><div class="line"></div><div class="line"><span class="attr">patch:</span></div><div class="line"><span class="comment">#  us_keyboard_layout: true      # 鍵盤選項：應用美式鍵盤佈局</span></div><div class="line"><span class="comment">#  show_notifications_when: growl_is_running  # 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></div><div class="line"><span class="comment">#  style/horizontal: true        # 候選窗横向顯示</span></div><div class="line"><span class="comment">#  style/inline_preedit: false   # 非內嵌編碼行</span></div><div class="line"><span class="comment">#  style/font_face: "儷黑 Pro"    # 我喜歡的字體名稱</span></div><div class="line"><span class="comment">#  style/font_point: 21          # 字號</span></div><div class="line"><span class="comment">#  style/corner_radius: 10       # 窗口圓角半徑</span></div><div class="line"><span class="comment">#  style/border_height: 0        # 窗口邊界高度，大於圓角半徑才有效果</span></div><div class="line"><span class="comment">#  style/border_width: 0         # 窗口邊界寬度，大於圓角半徑才有效果</span></div><div class="line"><span class="comment">#  style/color_scheme: luna      # 選擇配色方案</span></div><div class="line"></div><div class="line"><span class="comment"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></div><div class="line"><span class="comment">#   碧水 - aqua</span></div><div class="line"><span class="comment">#   青天 - azure</span></div><div class="line"><span class="comment">#   明月 - luna</span></div><div class="line"><span class="comment">#   墨池 - ink</span></div><div class="line"><span class="comment">#   孤寺 - lost_temple</span></div><div class="line"><span class="comment">#   暗堂 - dark_temple</span></div><div class="line"><span class="comment">#   星際我爭霸 - starcraft</span></div><div class="line"><span class="comment">#   谷歌 - google</span></div></pre></td></tr></table></figure>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>如上一部分，只能设置默认的主题。虽然默认的主题也挺不错的，但是我们也可以定制自定义的主题。</p>
<p>还是在<code>squirrel.custom.yaml</code>中，在刚刚加入的内容后面加入如下内容</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">preset_color_schemes/textflow:</div><div class="line"><span class="attr">  author:</span> <span class="string">"name &lt;name@gmail.com&gt;"</span></div><div class="line"><span class="attr">  back_color:</span> <span class="number">0xFFFFFF</span> <span class="comment">#背景</span></div><div class="line"><span class="attr">  border_color:</span> <span class="number">0xE0B693</span> <span class="comment">#边框</span></div><div class="line"><span class="attr">  candidate_text_color:</span> <span class="number">0x000000</span> <span class="comment">#非第一候选项</span></div><div class="line"><span class="attr">  hilited_back_color:</span> <span class="number">0xEBECED</span> <span class="comment">#拼音串高亮背景</span></div><div class="line"><span class="attr">  hilited_candidate_back_color:</span> <span class="number">0xFFFFFF</span> <span class="comment">#第一候选项背景</span></div><div class="line"><span class="attr">  hilited_candidate_text_color:</span> <span class="number">0xF57C75</span> <span class="comment">#第一候选项</span></div><div class="line"><span class="attr">  hilited_text_color:</span> <span class="number">0xFF6666</span> <span class="comment">#拼音串高亮</span></div><div class="line"><span class="attr">  name:</span> Textflow</div><div class="line"><span class="attr">  text_color:</span> <span class="number">0x000000</span> <span class="comment">#拼音串</span></div></pre></td></tr></table></figure>
<p>然后启用这个主题就可以了</p>
<p>如果你想要更多的配色，可以参照<a href="http://tieba.baidu.com/p/2445582839" target="_blank" rel="external">RIME吧：配色方案专帖</a></p>
<h2 id="生僻字乱码"><a href="#生僻字乱码" class="headerlink" title="生僻字乱码"></a>生僻字乱码</h2><p>生僻字乱码是因为默认字库中不含生僻字所导致的，解决方案就是为其设置字库齐全的备用字体。</p>
<p>一般的选择是「<a href="http://fonts.jp/hanazono/" target="_blank" rel="external">花园明朝</a>」，下载下来安装好之后，将 <a href="#show">外观</a> 这一步中的</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">style/font_face: <span class="string">"儷黑 Pro"</span>    <span class="comment"># 我喜歡的字體名稱</span></div></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">style/font_face: <span class="string">"PingFang SC,HanaMinA"</span>    <span class="comment"># 我喜歡的字體名稱</span></div></pre></td></tr></table></figure>
<p>然后重新部署即可</p>
<h2 id="根据程序切换中英文"><a href="#根据程序切换中英文" class="headerlink" title="根据程序切换中英文"></a>根据程序切换中英文</h2><p>鼠须管 0.9.9 之后开始支持在指定的应用程序中设定输入法的初始状态。</p>
<p>如在</p>
<ul>
<li>终端 <strong>Terminal</strong>、<strong>iTerm2</strong></li>
<li>编辑器 <strong>sublime</strong>、<strong>atom</strong></li>
<li>启动工具 <strong>QuickSilver</strong>、<strong>Alfred</strong></li>
</ul>
<p>中我们很少会用到中文，于是我们可能设置鼠须管在这种程序中默认英文输入</p>
<p>如果想要设置应用中输入法的初始状态，我们首先要查看应用的<code>Info.plist</code>文件得到该应用的<code>Bundle Identifier</code>，通常是形如<code>com.apple.Xcode</code>的字符串</p>
<p>例如，要在<code>Xcode</code>中默认英文输入，又要在<code>Alfred</code>中恢复中文输入，可如下设定：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># example squirrel.custom.yaml</span></div><div class="line"><span class="attr">patch:</span></div><div class="line">  app_options/com.apple.Xcode:</div><div class="line"><span class="attr">    ascii_mode:</span> <span class="literal">true</span></div><div class="line">  app_options/com.alfredapp.Alfred: &#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="emoji表情以及特殊符号"><a href="#emoji表情以及特殊符号" class="headerlink" title="emoji表情以及特殊符号"></a>emoji表情以及特殊符号</h2><p>有时候我们会有输入<code>emoji</code>表情的需求，但仅仅只是开启了<code>emoji</code>输入方案的话，我们每次都要切换输入方案才可以输入<code>emoji</code>表情，还是很不方便的。如果可以直接在一种输入方案中加入<code>emoji</code>表情输入就更好了</p>
<p>其实可以做到，你只需要这样</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># luna_pinyin.custom.yaml</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 在【朙月拼音】裏使用Emoji表情</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 保存到Rime用戶文件夾後，重新部署生效</span></div><div class="line"><span class="comment"># ~/.config/ibus/rime  (linux)</span></div><div class="line"><span class="comment"># ~/Library/Rime       (macos)</span></div><div class="line"><span class="comment"># %APPDATA%\Rime       (windows)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="attr">patch:</span></div><div class="line">  schema/dependencies:</div><div class="line"><span class="bullet">    -</span> emoji</div><div class="line"><span class="attr">  reverse_lookup:</span></div><div class="line"><span class="attr">    dictionary:</span> emoji</div><div class="line"><span class="attr">    enable_completion:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    prefix:</span> <span class="string">"`"</span></div><div class="line"><span class="attr">    tips:</span> 〔表情〕</div></pre></td></tr></table></figure>
<p>以上我们就完成了<code>emoji</code>表情输入的设置，现在输入一个<code>`</code>加随意一些字母来看看效果吧</p>
<p>但是仅仅表情还不够，我们有时候需要输入形如<code>ⅺ</code>、<code>⑴</code>、<code>☁</code>之类的特殊符号，查看<code>symbols.yaml</code>我们可以发现及其丰富的特殊符号，但是如何才能使用它们呢？</p>
<p>只需要在我们上面已经添加了<code>emoji</code>表情相关的配置文件末尾再加上如下配置即可</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">punctuator:</span></div><div class="line"><span class="attr">  import_preset:</span> symbols</div><div class="line"></div><div class="line"><span class="attr">recognizer:</span></div><div class="line"><span class="attr">  import_preset:</span> default</div><div class="line"><span class="attr">  patterns:</span></div><div class="line"><span class="attr">    reverse_lookup:</span> <span class="string">"`[a-z]*'?$"</span></div><div class="line"><span class="attr">    punct:</span> <span class="string">"^/([a-z]+|[0-9]0?)$"</span></div></pre></td></tr></table></figure>
<p>大功告成，重新部署之后使用<code>/lm</code>看看吧，更多符号输入方式请查看<code>symbols.yaml</code></p>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>做了这么多的个性化设置之后，其实输入法应该已经很符合自己的心意了。但是如果我们更换了一台设备或者需要在其它设备上保持同样的习惯的话怎么办呢？我们使用这么久已经养成了的个人词库可以在其它设备上使用么？</p>
<p><strong>当然可以！</strong></p>
<p><code>RIME</code>是支持同步的，但是它的同步方式和市面上主流的输入法不一样，需要我们自己使用<strong>同步网盘</strong>或者<strong>U盘</strong>来同步。</p>
<p>推荐国内用户使用<a href="https://jianguoyun.com/" target="_blank" rel="external">坚果云</a>作为同步盘使用，坚果云拥有多平台客户端且在墙内使用情况良好。若肉身在墙外则推荐<a href="https://www.dropbox.com/" target="_blank" rel="external">DropBox</a></p>
<h3 id="1-设定同步位置"><a href="#1-设定同步位置" class="headerlink" title="1. 设定同步位置"></a>1. 设定同步位置</h3><p>默认情况下，个人词库和配置都将备份到<code>RIME用户文件夹\sync\UUID</code>这里。如果使用网盘或者U盘在不同机器、系统之间同步，则需要设定同步的目标文件夹，此时这些文件都会备份到设定好的目录。</p>
<p>直接編輯用戶文件夾下的<code>installation.yaml</code>，添加：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sync_dir:</span> <span class="string">'D:\Dropbox\RimeSync'</span></div></pre></td></tr></table></figure>
<p>又如 Mac 上添加：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sync_dir:</span> <span class="string">'/Users/fred/Dropbox/RimeSync'</span></div></pre></td></tr></table></figure>
<p>又如使用 USB 存儲來同步：（真實案例）</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sync_dir:</span> <span class="string">'/Volumes/USBDRIVE/RimeSync'</span></div></pre></td></tr></table></figure>
<h3 id="2-同步标识"><a href="#2-同步标识" class="headerlink" title="2. 同步标识"></a>2. 同步标识</h3><p>默认情况下，<code>RIME</code>会为随机生成每一个<code>UUID</code>作为标识。这个<code>UUID</code>会被用来区分來自不同机器/系统的个人词库和设置。</p>
<p>如果你想要让其更加便于管理，那么你可以设置一个有意义的ID用于区分，直接编辑<code>installation.yaml</code>中如下所示的内容即可</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">installation_id:</span> <span class="string">'loshine-macbook'</span></div></pre></td></tr></table></figure>
<p><strong>注意</strong>：此ID不能使用非法字符，建议只用小写字母、数字、横线和下划线</p>
<h2 id="我的成品"><a href="#我的成品" class="headerlink" title="我的成品"></a>我的成品</h2><p>成品效果演示</p>
<video src="/assets/video/鼠须管演示.mov" controls="controls" width="600"><br>your browser does not support the video tag<br></video>

<p>几个配置文件</p>
<ul>
<li>squirrel.custom.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 適用於【鼠鬚管】0.9.13+</span></div><div class="line"><span class="comment"># 位置：~/Library/Rime/squirrel.custom.yaml</span></div><div class="line"><span class="comment"># 用法：想要哪項生效，就刪去該行行首的#字符，但注意保留用於縮進的空格</span></div><div class="line"></div><div class="line"><span class="attr">patch:</span></div><div class="line"><span class="comment">#  us_keyboard_layout: true                   # 鍵盤選項：應用美式鍵盤佈局</span></div><div class="line"><span class="attr">  show_notifications_when:</span> appropriate        <span class="comment"># 狀態通知，默認裝有Growl時顯示，也可設爲全開（always）全關（never）</span></div><div class="line"><span class="comment">#  style/horizontal: true                     # 候選窗横向顯示</span></div><div class="line"><span class="comment">#  style/inline_preedit: false                # 非內嵌編碼行</span></div><div class="line"><span class="comment">#  style/font_face: "PingFang SC,HanaMinA"     # 我喜歡的字體名稱</span></div><div class="line">  style/font_point: <span class="number">18</span>                        <span class="comment"># 字號</span></div><div class="line">  style/corner_radius: <span class="number">2</span>                      <span class="comment"># 窗口圓角半徑</span></div><div class="line">  style/border_height: <span class="number">7</span>                      <span class="comment"># 窗口邊界高度，大於圓角半徑才有效果</span></div><div class="line">  style/border_width: <span class="number">7</span>                       <span class="comment"># 窗口邊界寬度，大於圓角半徑才有效果</span></div><div class="line">  style/color_scheme: luna                    <span class="comment"># 選擇配色方案</span></div><div class="line"></div><div class="line"><span class="comment"># 註：預設的配色方案及代碼（指定爲 style/color_scheme ）</span></div><div class="line"><span class="comment">#   碧水 - aqua</span></div><div class="line"><span class="comment">#   青天 - azure</span></div><div class="line"><span class="comment">#   明月 - luna</span></div><div class="line"><span class="comment">#   墨池 - ink</span></div><div class="line"><span class="comment">#   孤寺 - lost_temple</span></div><div class="line"><span class="comment">#   暗堂 - dark_temple</span></div><div class="line"><span class="comment">#   星際我爭霸 - starcraft</span></div><div class="line"><span class="comment">#   谷歌 - google</span></div><div class="line">  preset_color_schemes/textflow:</div><div class="line"><span class="attr">    author:</span> <span class="string">"name &lt;name@gmail.com&gt;"</span></div><div class="line"><span class="attr">    back_color:</span> <span class="number">0xFFFFFF</span> <span class="comment">#背景</span></div><div class="line"><span class="attr">    border_color:</span> <span class="number">0xE0B693</span> <span class="comment">#边框</span></div><div class="line"><span class="attr">    candidate_text_color:</span> <span class="number">0x000000</span> <span class="comment">#非第一候选项</span></div><div class="line"><span class="attr">    hilited_back_color:</span> <span class="number">0xEBECED</span> <span class="comment">#拼音串高亮背景</span></div><div class="line"><span class="attr">    hilited_candidate_back_color:</span> <span class="number">0xFFFFFF</span> <span class="comment">#第一候选项背景</span></div><div class="line"><span class="attr">    hilited_candidate_text_color:</span> <span class="number">0xF57C75</span> <span class="comment">#第一候选项</span></div><div class="line"><span class="attr">    hilited_text_color:</span> <span class="number">0xFF6666</span> <span class="comment">#拼音串高亮</span></div><div class="line"><span class="attr">    name:</span> Textflow</div><div class="line"><span class="attr">    text_color:</span> <span class="number">0x000000</span> <span class="comment">#拼音串</span></div><div class="line"></div><div class="line"><span class="comment"># Xcode</span></div><div class="line">  app_options/com.apple.Xcode:</div><div class="line"><span class="attr">    ascii_mode:</span> <span class="literal">true</span></div><div class="line"><span class="comment"># alfred</span></div><div class="line">  app_options/com.alfredapp.Alfred:</div><div class="line"><span class="attr">    ascii_mode:</span> <span class="literal">true</span></div><div class="line"><span class="comment"># Android Studio</span></div><div class="line">  app_options/com.google.android.studio:</div><div class="line"><span class="attr">    ascii_mode:</span> <span class="literal">true</span></div><div class="line"><span class="comment"># atom</span></div><div class="line">  app_options/com.github.atom:</div><div class="line"><span class="attr">    ascii_mode:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<ul>
<li>default.custom.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="attr">patch:</span></div><div class="line"><span class="attr">  schema_list:</span></div><div class="line"><span class="attr">    - schema:</span> luna_pinyin          <span class="comment"># 朙月拼音</span></div><div class="line"><span class="attr">    - schema:</span> luna_pinyin_fluency  <span class="comment"># 朙月拼音 语句流</span></div><div class="line"><span class="comment">#    - schema: luna_pinyin_simp     # 朙月拼音 简化字模式</span></div><div class="line"><span class="comment">#    - schema: luna_pinyin_tw       # 朙月拼音 臺灣正體模式</span></div><div class="line"><span class="attr">    - schema:</span> terra_pinyin         <span class="comment"># 地球拼音 dì qiú pīn yīn</span></div><div class="line"><span class="comment">#    - schema: bopomofo             # 注音</span></div><div class="line"><span class="comment">#    - schema: bopomofo_tw          # 注音 臺灣正體模式</span></div><div class="line"><span class="comment">#    - schema: jyutping             # 粵拼</span></div><div class="line"><span class="comment">#    - schema: cangjie5             # 倉頡五代</span></div><div class="line"><span class="comment">#    - schema: cangjie5_express     # 倉頡 快打模式</span></div><div class="line"><span class="comment">#    - schema: quick5               # 速成</span></div><div class="line"><span class="comment">#    - schema: wubi86               # 五笔86</span></div><div class="line"><span class="attr">    - schema:</span> wubi_pinyin          <span class="comment"># 五笔拼音混合輸入</span></div><div class="line"><span class="comment">#    - schema: double_pinyin        # 自然碼雙拼</span></div><div class="line"><span class="comment">#    - schema: double_pinyin_mspy   # 微軟雙拼</span></div><div class="line"><span class="comment">#    - schema: double_pinyin_abc    # 智能ABC雙拼</span></div><div class="line"><span class="comment">#    - schema: double_pinyin_flypy  # 小鶴雙拼</span></div><div class="line"><span class="comment">#    - schema: wugniu        # 吳語上海話（新派）</span></div><div class="line"><span class="comment">#    - schema: wugniu_lopha  # 吳語上海話（老派）</span></div><div class="line"><span class="comment">#    - schema: sampheng      # 中古漢語三拼</span></div><div class="line"><span class="comment">#    - schema: zyenpheng     # 中古漢語全拼</span></div><div class="line"><span class="comment">#    - schema: ipa_xsampa    # X-SAMPA 國際音標</span></div><div class="line"><span class="attr">    - schema:</span> emoji         <span class="comment"># emoji表情</span></div><div class="line">&#123;% endhighlight %&#125;</div><div class="line">* terra_pinyin.custom.yaml</div><div class="line"></div><div class="line">&#123;% highlight yaml %&#125;</div><div class="line"><span class="comment"># luna_pinyin.custom.yaml</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 在【地球拼音】裏使用Emoji表情</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 保存到Rime用戶文件夾後，重新部署生效</span></div><div class="line"><span class="comment"># ~/.config/ibus/rime  (linux)</span></div><div class="line"><span class="comment"># ~/Library/Rime       (macos)</span></div><div class="line"><span class="comment"># %APPDATA%\Rime       (windows)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 如果目標文件已經包含其他修改內容，只需按照縮進合併 patch: 以下的部分</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="attr">patch:</span></div><div class="line">  schema/dependencies:</div><div class="line"><span class="bullet">    -</span> emoji</div><div class="line"><span class="comment">#  abc_segmentor/extra_tags:</span></div><div class="line"><span class="comment">#    - reverse_lookup</span></div><div class="line"><span class="attr">  reverse_lookup:</span></div><div class="line"><span class="attr">    dictionary:</span> emoji</div><div class="line"><span class="attr">    enable_completion:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    prefix:</span> <span class="string">"`"</span></div><div class="line"><span class="attr">    tips:</span> 〔表情〕</div><div class="line"></div><div class="line"><span class="attr">  punctuator:</span></div><div class="line"><span class="attr">    import_preset:</span> symbols</div><div class="line"></div><div class="line"><span class="attr">  recognizer:</span></div><div class="line"><span class="attr">    import_preset:</span> default</div><div class="line"><span class="attr">    patterns:</span></div><div class="line"><span class="attr">      reverse_lookup:</span> <span class="string">"`[a-z]*'?$"</span></div><div class="line"><span class="attr">      punct:</span> <span class="string">"^/([a-z]+|[0-9]0?)$"</span></div></pre></td></tr></table></figure>
<ul>
<li>installation.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">distribution_code_name:</span> Squirrel</div><div class="line"><span class="attr">distribution_name:</span> <span class="string">"鼠鬚管"</span></div><div class="line"><span class="attr">distribution_version:</span> <span class="number">0.9</span><span class="number">.26</span><span class="number">.1</span></div><div class="line"><span class="attr">install_time:</span> <span class="string">"Mon Aug  3 15:24:12 2015"</span></div><div class="line"><span class="attr">installation_id:</span> <span class="string">"loshine-macbook"</span></div><div class="line"><span class="attr">rime_version:</span> <span class="number">1.2</span><span class="number">.9</span></div><div class="line"><span class="attr">sync_dir:</span> <span class="string">'/Users/Loshine/我的坚果云/RimeSync'</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      很久之前就发现了RIME这个输入法，但因为在windows下的种种不便，把玩了一段时间后终于还是将之打入箱底。近期由于换上了mac作为主力开发机，于是又将其从箱底翻出，仔细把玩打磨一段时间之后已经十分跟手了，于是乎在这里记录一下打磨过程。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="RIME" scheme="https://loshine.me/tags/RIME/"/>
    
  </entry>
  
  <entry>
    <title>Android网络通信框架Volley</title>
    <link href="https://loshine.me/2015/08/27/volley/"/>
    <id>https://loshine.me/2015/08/27/volley/</id>
    <published>2015-08-27T15:37:30.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。</p>
<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>之前从网络下载图片可能要这样：</p>
<ol>
<li>在<code>ListAdapter#getView()</code>里开始图像的读取</li>
<li>通过 AsyncTask 等机制使用 HttpURLConnection 从服务器去的图片资源</li>
<li>在<code>AsyncTask#onPostExecute()</code>里设置相应 ImageView 的属性</li>
</ol>
<p>再有，屏幕旋转的时候，有时候<em>会导致再次从网络取得数据</em>。为了防止不必要的网络访问，可能我们要自己实现 cache。</p>
<p>还有 ListView 滚动过快时，可能会导致有些网络请求返回数据时早已不需要显示了。</p>
<p><strong>这些问题使用 Volley 都可以很简单地解决</strong>。</p>
<p>Volley 提供了如下的便捷功能：</p>
<ul>
<li>JSON，图像的异步下载</li>
<li>网络请求序列</li>
<li>网络请求优先级处理</li>
<li>缓存</li>
<li>多级别取消请求</li>
<li>和 Activity 生命周期的联动</li>
</ul>
<p><strong>人生苦短，快用 Volley！</strong></p>
<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>三种集成方法，其中后两种都是非官方渠道：</p>
<ul>
<li><p>编译源码导入项目</p>
<ol>
<li><p>从 Git 库 clone 最新版 </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://android.googlesource.com/platform/frameworks/volley</div></pre></td></tr></table></figure>
</li>
<li><p>编译为 jar 包</p>
</li>
<li>导入项目</li>
</ol>
</li>
<li><p>Gradle构建（非官方渠道，推荐）</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.mcxiaoke.volley:library:1.0.18'</span></div></pre></td></tr></table></figure>
</li>
<li><p>Maven构建（非官方渠道）</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mcxiaoke.volley<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>&#123;latest-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>具体使用流程如下：</p>
<ol>
<li>在 Activity 中构造一个（一个就够了）RequestQueue 请求序列对象</li>
<li>创建一个 Request 对象（子类实现）</li>
<li>添加到序列</li>
<li>开始序列</li>
</ol>
<p>在这四步中，我们着重要关注的是第二步，Request 是一个抽象类，我们所以我们要用到它的子类实现，Volley中已经实现了以下几个子类：</p>
<ul>
<li>ClearCacheRequest</li>
<li>ImageRequest</li>
<li>JSONRequest</li>
<li>StringRequest</li>
</ul>
<p>下面我们就对这几个子类进行介绍以及给出示例</p>
<h3 id="ClearCacheRequest"><a href="#ClearCacheRequest" class="headerlink" title="ClearCacheRequest"></a>ClearCacheRequest</h3><p>虚构的请求，用于清空已有的缓存文件。</p>
<p>ClearCacheRequest的优先级很高，为<code>Priority.IMMEDIATE</code>，所以在被添加到 RequestQueue 后能很快执行。并且清空缓存的方法<code>mCache.clear()</code>写在了<code>isCanceled()</code>方法体中，能最早的得到执行。</p>
<h3 id="ImageRequest"><a href="#ImageRequest" class="headerlink" title="ImageRequest"></a>ImageRequest</h3><p>待完成</p>
<h3 id="JSONRequest"><a href="#JSONRequest" class="headerlink" title="JSONRequest"></a>JSONRequest</h3><p>JSONRequest 也是一个抽象类，所以我们在使用时要用到它的两个实现子类——JsonObjectRequest 和 JsonArrayRequest。</p>
<p>JsonObjectRequest 允许上传 JsonObject 数据，并根据请求返回数据。但 JsonArrayRequest 的实现过于简单，不能携带上传 json 数据，只能使用 GET 方式请求网络。</p>
<h3 id="StringRequest"><a href="#StringRequest" class="headerlink" title="StringRequest"></a>StringRequest</h3><p>StringRequest 是最为常用也是最灵活的 Request 实现。一个简单的 Get 请求获取百度首页的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRequestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Volley 请求队列对象</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> RequestQueue mRequestQueue;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_string_request);</div><div class="line">        </div><div class="line">        <span class="comment">// 构造请求队列</span></div><div class="line">        mRequestQueue = Volley.newRequestQueue(context);</div><div class="line">        </div><div class="line">        StringRequest request = <span class="keyword">new</span> StringRequest(<span class="string">"http://www.baidu.com"</span>,</div><div class="line">            <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response)</span> </span>&#123;</div><div class="line">                    JSONObject jsonObject = JSON.parseObject(response, JSONObject.class);</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">             <span class="keyword">new</span> Response.ErrorListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</div><div class="line">                    Log.i(<span class="string">"net error"</span>, error.getLocalizedMessage());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        mRequestQueue.add(request);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        <span class="comment">// 退出时取消所有网络请求</span></div><div class="line">        mRequestQueue.cancelAll(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义Request"><a href="#自定义Request" class="headerlink" title="自定义Request"></a>自定义Request</h3><p>一个简单的使用 Pull 解析的 XMLRequest</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLRequest</span> <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">XmlPullParser</span>&gt; </span>&#123;  </div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener&lt;XmlPullParser&gt; mListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XMLRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Listener&lt;XmlPullParser&gt; listener,</span></span></div><div class="line">            ErrorListener errorListener) &#123;  </div><div class="line">        <span class="keyword">super</span>(method, url, errorListener);  </div><div class="line">        mListener = listener;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XMLRequest</span><span class="params">(String url, Listener&lt;XmlPullParser&gt; listener, ErrorListener errorListener)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>(Method.GET, url, listener, errorListener);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;XmlPullParser&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            String xmlString = <span class="keyword">new</span> String(response.data,  </div><div class="line">                    HttpHeaderParser.parseCharset(response.headers));  </div><div class="line">            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</div><div class="line">            XmlPullParser xmlPullParser = factory.newPullParser();</div><div class="line">            xmlPullParser.setInput(<span class="keyword">new</span> StringReader(xmlString));</div><div class="line">            <span class="keyword">return</span> Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));  </div><div class="line">        &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</div><div class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));  </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(XmlPullParser response)</span> </span>&#123;  </div><div class="line">        mListener.onResponse(response);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>parseNetworkResponse()</code>方法中将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中。在<code>deliverResponse()</code>方法中则是将XmlPullParser对象进行回调。</p>
<h2 id="与生命周期的联动"><a href="#与生命周期的联动" class="headerlink" title="与生命周期的联动"></a>与生命周期的联动</h2><p>当 Activity 里面启动了网络请求，如果这个网络请求还没返回结果的时候，Activity 就被结束了。此时如果继续使用其中的 Context 等会消耗没有必要的系统资源，而且还有可能会导致程序 crash。</p>
<p>所以在使用 Volley 时，我们应该在 Activity 停止的时候，同时取消所有或部分未完成的网络请求。Volley 里所有的请求结果会返回给主进程，如果在主进程里取消了某些请求，则这些请求将不会被返回给主线程。Volley 支持多种 Request 取消方式。</p>
<ul>
<li><p>可以针对某些个 request 做取消操作</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Request &lt;?&gt; req : mRequestQueue) &#123;</div><div class="line">        req.cancel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>取消这个队列里的所有请求</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line">    mRequestQueue.cancelAll(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>可以根据 RequestFilter 或者 Tag 来终止某些请求</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line"></div><div class="line">    <span class="comment">// 根据 RequestFilter</span></div><div class="line">    mRequestQueue.cancelAll(<span class="keyword">new</span> RequestFilter() &#123;&#125;);</div><div class="line">    <span class="comment">// 根据 Tag</span></div><div class="line">    mRequestQueue.cancelAll(<span class="keyword">new</span> Object());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      之前我们在Android应用中的网络通信，一般都是使用AsyncTaskLoader，HttpURLConnection，AsyncTask，HTTPClient（Apache）等。但在 Google I/O 2013上，Google 发布了一个新的网络通信框架——Volley。Volley 适合数据量不大但通信十分频繁的场景，它使得Http通信操作相比以前更加简单、快捷、健壮。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
      <category term="Volley" scheme="https://loshine.me/tags/Volley/"/>
    
  </entry>
  
  <entry>
    <title>Java中的模板方法模式</title>
    <link href="https://loshine.me/2015/08/25/template-method-pattern-in-java/"/>
    <id>https://loshine.me/2015/08/25/template-method-pattern-in-java/</id>
    <published>2015-08-25T05:50:30.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。</p>
</blockquote>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做<strong>基本方法</strong>(primitive method)；而将这些基本方法汇总起来的方法叫做<strong>模板方法</strong>(template method)，这个设计模式的名字就是从此而来。</p>
<p>模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/123123123.png" alt=""></p>
<p>这里涉及到两个角色：</p>
<p><strong>抽象模板(Abstract Template)角色：</strong></p>
<ul>
<li>定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。</li>
<li>定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</li>
</ul>
<p><strong>具体模板(Concrete Template)角色：</strong></p>
<ul>
<li>实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。</li>
<li>每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</li>
</ul>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>抽象模板角色类，<code>abstractMethod()</code>、<code>doHookMethod()</code>等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由<code>templateMethod()</code>方法代表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTemplate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 模板方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 调用基本方法</span></div><div class="line">        abstractMethod();</div><div class="line">        doHookMethod();</div><div class="line">        concreteMethod();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 抽象方法，子类必须实现的方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 钩子方法，子类可选择是否实现。注意钩子方法一般以 do 开头</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHookMethod</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 具体方法，由父类实现，子类无法 override</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">concreteMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 业务相关的代码</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体模板角色类，实现了父类所声明的基本方法，<code>abstractMethod()</code>方法所代表的就是强制子类实现的剩余逻辑，而<code>doHookMethod()</code>方法是可选择实现的逻辑，不是必须实现的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTemplate</span> <span class="keyword">extends</span> <span class="title">AbstractTemplate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 基本方法的实现</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 业务相关的代码</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 重写父类的方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hookMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 业务相关的代码</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>模板方法模式的关键</strong>：<em>子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑</em>。</p>
<p>每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照<strong>责任</strong>的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。</p>
<h1 id="在Servlet中的应用"><a href="#在Servlet中的应用" class="headerlink" title="在Servlet中的应用"></a>在Servlet中的应用</h1><p>使用过Servlet的人都清楚，除了要在web.xml做相应的配置外，还需继承一个叫HttpServlet的抽象类。HttpService类提供了一个<code>service()</code>方法，这个方法调用七个do方法中的一个或几个，完成对客户端调用的响应。这些do方法需要由HttpServlet的具体子类提供，因此这是典型的<strong>模板方法模式</strong>。下面是<code>service()</code>方法的源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></div><div class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">    String method = req.getMethod();</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</div><div class="line">        <span class="keyword">long</span> lastModified = getLastModified(req);</div><div class="line">        <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">// servlet doesn't support if-modified-since, no reason</span></div><div class="line">            <span class="comment">// to go through further expensive logic</span></div><div class="line">            doGet(req, resp);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</div><div class="line">            <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</div><div class="line">                <span class="comment">// If the servlet mod time is later, call doGet()</span></div><div class="line">                <span class="comment">// Round down to the nearest second for a proper compare</span></div><div class="line">                <span class="comment">// A ifModifiedSince of -1 will always be less</span></div><div class="line">                maybeSetLastModified(resp, lastModified);</div><div class="line">                doGet(req, resp);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</div><div class="line">        <span class="keyword">long</span> lastModified = getLastModified(req);</div><div class="line">        maybeSetLastModified(resp, lastModified);</div><div class="line">        doHead(req, resp);</div><div class="line"> </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</div><div class="line">        doPost(req, resp);</div><div class="line"> </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</div><div class="line">        doPut(req, resp);       </div><div class="line"> </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</div><div class="line">        doDelete(req, resp);</div><div class="line"> </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</div><div class="line">        doOptions(req,resp);</div><div class="line"> </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</div><div class="line">        doTrace(req,resp);</div><div class="line"> </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// Note that this means NO servlet supports whatever</span></div><div class="line">        <span class="comment">// method was requested, anywhere on this server.</span></div><div class="line">        <span class="comment">//</span></div><div class="line"> </div><div class="line">        String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</div><div class="line">        Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">        errArgs[<span class="number">0</span>] = method;</div><div class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</div><div class="line"> </div><div class="line">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，这个<code>service()</code>方法也可以被子类置换掉。</p>
<p>下面给出一个简单的 Servlet 例子：</p>
<p>TestServlet 类是 HttpServlet 类的子类，并且置换掉了父类的两个方法：<code>doGet()</code>和<code>doPost()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">        System.out.println(<span class="string">"using the GET method"</span>);</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">        System.out.println(<span class="string">"using the POST method"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的例子可以看出这是一个典型的模板方法模式。</p>
<p>HttpServlet 担任抽象模板角色</p>
<ul>
<li><strong>模板方法</strong>：由<code>service()</code>方法担任。</li>
<li><strong>基本方法</strong>：由<code>doPost()</code>、<code>doGet()</code>等方法担任。</li>
</ul>
<p>TestServlet 担任具体模板角色</p>
<ul>
<li>TestServlet 置换掉了父类 HttpServlet 中七个基本方法中的其中两个，分别是<code>doGet()</code>和<code>doPost()</code>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。模版方法模式是基于继承的代码复用的基本技术。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://loshine.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://loshine.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android Design Support Library</title>
    <link href="https://loshine.me/2015/08/22/android-design-support-library/"/>
    <id>https://loshine.me/2015/08/22/android-design-support-library/</id>
    <published>2015-08-22T03:24:30.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。</p>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>要使用非常简单，在Gradle中添加如下语句即可</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:design:23.0.0'</span></div></pre></td></tr></table></figure>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="Snackbar"><a href="#Snackbar" class="headerlink" title="Snackbar"></a>Snackbar</h2><p>Snackbar 提供了一个介于 Toast 和 AlertDialog 之间轻量级控件，它可以很方便的提供消息的提示和动作反馈。<em>其使用方式与Toast基本相同</em>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Snackbar.make(view, <span class="string">"Snackbar comes out"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                                Toast.makeText(</div><div class="line">                                        MainActivity.<span class="keyword">this</span>,</div><div class="line">                                        <span class="string">"Toast comes out"</span>,</div><div class="line">                                        Toast.LENGTH_SHORT).show();</div><div class="line">                            &#125;</div><div class="line">                        &#125;).show();</div></pre></td></tr></table></figure>
<p>此处注意传入的第一个 view 是 Snackbar 显示的基准元素，Snackbar 会显示在该 view 的底部位置。Action 可以传入多个，每一个都可以配置点击事件。</p>
<p>显示效果：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/123123.png" alt="Snackbar"></p>
<p>官网API：<a href="http://developer.android.com/reference/android/support/design/widget/Snackbar.html" target="_blank" rel="external">Snackbar API</a></p>
<h2 id="TextInputLayout"><a href="#TextInputLayout" class="headerlink" title="TextInputLayout"></a>TextInputLayout</h2><p>通常，单独的 EditText 会在用户输入第一个字母之后隐藏hint提示信息，但是现在你可以使用 TextInputLayout 来将 EditText 包裹起来，提示信息会变成一个显示在 EditText 之上的 floating label，这样用户就始终知道他们现在输入的是什么。同时，如果给 EditText 增加监听，还可以给它增加更多的 floating label。</p>
<p>使用方法：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/til_pwd"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在代码中监听：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">TextInputLayout textInputLayout = (TextInputLayout) findViewById(R.id.til_pwd);</div><div class="line">EditText editText = textInputLayout.getEditText();</div><div class="line">textInputLayout.setHint(<span class="string">"Password"</span>);</div><div class="line"></div><div class="line">editText.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s.length() &gt; <span class="number">4</span>) &#123;</div><div class="line">            textInputLayout.setError(<span class="string">"Password error"</span>);</div><div class="line">            textInputLayout.setErrorEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            textInputLayout.setErrorEnabled(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：TextInputLayout 的颜色来自 style 中的 colorAccent 的颜色：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#1743b7<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div></pre></td></tr></table></figure>
<p>显示效果：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/20150603224122229.png" alt="textinputlayout1"></p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/20150603224141620.png" alt="textinputlayout2"></p>
<p>官网API：<a href="http://developer.android.com/reference/android/support/design/widget/TextInputLayout.html" target="_blank" rel="external">TextInputLayout API</a></p>
<h2 id="Floating-Action-Button"><a href="#Floating-Action-Button" class="headerlink" title="Floating Action Button"></a>Floating Action Button</h2><p>FloatingActionButton 是一个浮动显示的圆形按钮，Design library 中的 FloatingActionButton 实现了一个默认颜色为主题中 colorAccent 的悬浮操作按钮，like this：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/20150604094913153.png" alt="floatingactionbutton"></p>
<p>FloatingActionButton 的使用非常简单，一般将其放入 CoordinatorLayout 中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"end|bottom"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_done"</span>/&gt;</div></pre></td></tr></table></figure>
<p>通过指定<code>layout_gravity</code>就可以指定它的位置。 </p>
<p>同样，你可以通过指定<code>anchor</code>，即显示位置的锚点：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:layout_anchor</span>=<span class="string">"@id/app_bar"</span></div><div class="line">        <span class="attr">app:layout_anchorGravity</span>=<span class="string">"bottom|right|end"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_done"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:clickable</span>=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
<p>除了一般大小的悬浮操作按钮，它还支持 mini size（<code>fabSize=&quot;mini&quot;</code>）。FloatingActionButton 继承自 ImageView，你可以使用<code>android:src</code>或者 ImageView 的任意方法，比如<code>setImageDrawable()</code>来设置 FloatingActionButton 里面的图标。</p>
<p>官网API：<a href="http://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html" target="_blank" rel="external">Floating Action Button</a></p>
<h2 id="TabLayout"><a href="#TabLayout" class="headerlink" title="TabLayout"></a>TabLayout</h2><p>TabLayout既实现了<strong>固定的选项卡</strong> - view的宽度平均分配，也实现了<strong>可滚动的选项卡</strong> - view宽度不固定同时可以横向滚动。选项卡可以在程序中动态添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"tab1"</span>));</div><div class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"tab2"</span>));</div><div class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"tab3"</span>));</div></pre></td></tr></table></figure>
<p>通常 TabLayout 都会和 ViewPager 配合起来使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mViewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class="line"><span class="comment">// 设置 ViewPager 的数据等</span></div><div class="line">setupViewPager();</div><div class="line">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class="line">tabLayout.setupWithViewPager(mViewPager);</div></pre></td></tr></table></figure>
<p>显示效果：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/201506041446331510.png" alt="tablayout"></p>
<p>官网API：<a href="http://developer.android.com/reference/android/support/design/widget/TabLayout.html" target="_blank" rel="external">TabLayout API</a></p>
<h2 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h2><p>NavigationView 主要用于实现滑动显示的导航抽屉，这在 Material Design 中是十分重要的。使用 NavigationView，我们可以这样写导航抽屉了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/dl_main_drawer"</span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 你的内容布局--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/navigation_content"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nv_main_navigation"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/navigation_header"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/drawer_view"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中最重要的就是这两个属性：<code>app:headerLayout</code>和<code>app:menu</code></p>
<p>通过这两个属性，我们可以非常方便的指定导航界面的头布局和菜单布局：</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/20150604151120067.png" alt="navigationview"></p>
<p>其中最上面的布局就是<code>app:headerLayout</code>所指定的头布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">              <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimaryDark"</span></div><div class="line">              <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">              <span class="attr">android:padding</span>=<span class="string">"16dp"</span></div><div class="line">              <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/ic_user"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"XuYisheng"</span></div><div class="line">        <span class="attr">android:textAppearance</span>=<span class="string">"@style/TextAppearance.AppCompat.Body1"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>而下面的菜单布局，我们可以直接通过 menu 内容自动生成，而不需要我们来指定布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_home"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_dashboard"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"CC Talk"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_messages"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_event"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"HJ Class"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_friends"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_headset"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Words"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_discussion"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_forum"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Big HJ"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:title</span>=<span class="string">"Version"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_dashboard"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"Android"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_dashboard"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"iOS"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你可以通过设置一个<code>OnNavigationItemSelectedListener</code>，使用其<code>setNavigationItemSelectedListener()</code>来获得元素被选中的回调事件。它可以让你处理选择事件，改变复选框状态，加载新内容，关闭导航菜单，以及其他任何你想做的操作。例如这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupDrawerContent</span><span class="params">(NavigationView navigationView)</span> </span>&#123;</div><div class="line">    navigationView.setNavigationItemSelectedListener(</div><div class="line">        <span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</div><div class="line">                menuItem.setChecked(<span class="keyword">true</span>);</div><div class="line">                mDrawerLayout.closeDrawers();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官网API：<a href="http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/NavigationView.html" target="_blank" rel="external">NavigationView API</a></p>
<h2 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h2><p>AppBarLayout 是一个容器，会把所有放在里面的组件一起作为一个 AppBar。</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/20150604173640997.png" alt="appbarlayout"></p>
<p>这里就是把 Toolbar 和 TabLayout 放到了 AppBarLayout 中，让他们当做一个整体作为 AppBar。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">        <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tabs"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>官网API：<a href="http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html" target="_blank" rel="external">AppBarLayout API</a></p>
<h2 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h2><p>CoordinatorLayout 是这次新添加的一个增强型的 FrameLayout。在 CoordinatorLayout 中，我们可以在 FrameLayout 的基础上完成很多新的操作。</p>
<h3 id="Floating-View"><a href="#Floating-View" class="headerlink" title="Floating View"></a>Floating View</h3><p>Material Design 的一个新的特性就是增加了很多可悬浮的 View，像我们前面说的 Floating Action Button。我们可以把 FAB 放在任何地方，只需要通过：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:layout_gravity="end|bottom"</div></pre></td></tr></table></figure>
<p>来指定显示的位置。同时，它还提供了<code>layout_anchor</code>来供你设置显示坐标的锚点：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_anchor="@id/appbar"</div></pre></td></tr></table></figure>
<h3 id="创建滚动"><a href="#创建滚动" class="headerlink" title="创建滚动"></a>创建滚动</h3><p>CoordinatorLayout 可以说是这次 support library 更新的重中之重。它从另一层面去控制子 view 之间触摸事件的布局，Design Library 中的很多控件都利用了它。</p>
<blockquote>
<p>一个很好的例子就是当你将 FloatingActionButton 作为一个子 View 添加进 CoordinatorLayout 并且将 CoordinatorLayout 传递给<code>Snackbar.make()</code>，在3.0及其以上的设备上，Snackbar 不会显示在悬浮按钮的上面，而是 FloatingActionButton 利用 CoordinatorLayout 提供的回调方法，在 Snackbar 以动画效果进入的时候自动向上移动让出位置，并且在 Snackbar 动画地消失的时候回到原来的位置，不需要额外的代码。</p>
</blockquote>
<p>官方的例子很好的说明了这一点：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">     <span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span> <span class="attr">Your</span> <span class="attr">Scrollable</span> <span class="attr">View</span> <span class="attr">--</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                  <span class="attr">...</span></div><div class="line">                  <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">                  <span class="attr">...</span></div><div class="line">                  <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span>&gt;</div><div class="line">     <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中，一个可以滚动的组件，例如 RecyclerView、ListView（<strong>注意：目前貌似只支持RecyclerView、ListView，如果你用一个ScrollView，是没有效果的</strong>）。如果：</p>
<ol>
<li>给这个可滚动组件设置了<code>layout_behavior</code></li>
<li>给另一个控件设置了<code>layout_scrollFlags</code></li>
</ol>
<p>那么，当设置了<code>layout_behavior</code>的控件滑动时，就会触发设置了<code>layout_scrollFlags</code>的控件发生状态的改变。 </p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/20150604225906021.gif" alt="coordinatorlayout"></p>
<p>设置的<code>layout_scrollFlags</code>有如下几种选项：</p>
<ul>
<li>scroll: 所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个flag的view将被固定在屏幕顶部。</li>
<li>enterAlways: 这个 flag 让任意向下的滚动都会导致该view变为可见。</li>
<li>enterAlwaysCollapsed: 当你的视图已经设置 minHeight 属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</li>
<li>exitUntilCollapsed: 向上滚动时收缩 View。</li>
</ul>
<p>需要注意的是，后面两种模式基本只有在 CollapsingToolbarLayout 才有用，而前面两种模式基本是需要一起使用的，也就是说，这些 flag 的使用场景，基本已经固定了。</p>
<p>例如我们前面例子中的，也就是这种模式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_scrollFlags="scroll|enterAlways"</div></pre></td></tr></table></figure>
<blockquote>
<p>PS：所有使用 scroll flag 的 view 都必须定义在没有使用 scroll flag 的 view 的前面，这样才能确保所有的 view 从顶部退出，留下固定的元素。</p>
</blockquote>
<p>官网API：<a href="http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html" target="_blank" rel="external">CoordinatorLayout</a></p>
<h2 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h2><p>CollapsingToolbarLayout 提供了一个可以折叠的 Toolbar，这也是 Google+、photos 中的效果。Google 把它做成了一个标准控件，更加方便使用。</p>
<p>这里先看一个例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"@dimen/detail_backdrop_height"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">        <span class="attr">app:expandedTitleMarginEnd</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">app:expandedTitleMarginStart</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/backdrop"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_banner"</span></div><div class="line">            <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span></div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们在 CollapsingToolbarLayout 中放置了一个 ImageView 和一个 Toolbar。并把这个 CollapsingToolbarLayout 放到 AppBarLayout 中作为一个整体。在 CollapsingToolbarLayout 中，我们分别设置了 ImageView 和一个 Toolbar 的<code>layout_collapseMode</code>。</p>
<p>这里使用了 CollapsingToolbarLayout 的<code>app:layout_collapseMode=&quot;pin&quot;</code>来确保 Toolbar 在 view 折叠的时候仍然被固定在屏幕的顶部。当你让 CollapsingToolbarLayout 和 Toolbar 在一起使用的时候，title 会在展开的时候自动变得大些，而在折叠的时候让字体过渡到默认值。必须注意，在这种情况下你必须在 CollapsingToolbarLayout 上调用<code>setTitle()</code>，而不是在 Toolbar 上。</p>
<p>除了固定住 view，你还可以使用<code>app:layout_collapseMode=&quot;parallax&quot;</code>（以及使用<code>app:layout_collapseParallaxMultiplier=&quot;0.7&quot;</code>来设置视差因子）来实现视差滚动效果（比如 CollapsingToolbarLayout 里面的一个 ImageView），这中情况和 CollapsingToolbarLayout 的<code>app:contentScrim=&quot;?attr/colorPrimary&quot;</code>属性一起配合更完美。</p>
<p>在这个例子中，我们同样设置了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_scrollFlags="scroll|exitUntilCollapsed"&gt;</div></pre></td></tr></table></figure>
<p>来接收一个：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_behavior="@string/appbar_scrolling_view_behavior"&gt;</div></pre></td></tr></table></figure>
<p>这样才能产生滚动效果，而通过<code>layout_collapseMode</code>，我们就设置了滚动时内容的变化效果。</p>
<p><img src="http://7xl94a.com1.z0.glb.clouddn.com/20150604230018928.gif" alt="CollapsingToolbarLayout"></p>
<h3 id="CoordinatorLayout与自定义view"><a href="#CoordinatorLayout与自定义view" class="headerlink" title="CoordinatorLayout与自定义view"></a>CoordinatorLayout与自定义view</h3><p>有一件事情必须注意，那就是 CoordinatorLayout 并不知道 FloatingActionButton 或者 AppBarLayout 的内部工作原理，它只是以<code>Coordinator.Behavior</code>的形式提供了额外的 API，该 API 可以使子 View 更好的控制触摸事件与手势以及声明它们之间的依赖，并通过<code>onDependentViewChanged()</code>接收回调。</p>
<p>可以使用<code>CoordinatorLayout.DefaultBehavior(你的View.Behavior.class)</code>注解或者在布局中使用<code>app:layout_behavior=&quot;com.example.app.你的View$Behavior&quot;</code>属性来定义view的默认行为。framework让任意view和CoordinatorLayout结合在一起成为了可能。</p>
<p>官方API：<a href="http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html" target="_blank" rel="external">CollapsingToolbarLayout</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>研究了一整天的 Android Design Support Library，感觉还是非常强大的。虽然自定义性不是很强，但已经给开发者提供了很简单方便的 Material Design 的官方实现，也不用集成很多的第三方库了，还是很不错的，推荐大家在自己的项目中使用。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>Thanks to <a href="http://blog.csdn.net/eclipsexys/article/details/46349721" target="_blank" rel="external">《Android Design Support Library使用详解》</a></p>
]]></content>
    
    <summary type="html">
    
      Google 在2015的 IO 大会上，给我们带来了更加详细的 Material Design 设计规范，同时，也给我们带来了全新的 Android Design Support Library，在这个 support 库里面，Google 给我们提供了更加规范的 Material design 设计风格的控件。本文将介绍MD设计风格的兼容库以及它们的用法，也是对自己的学习做一个记录。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio常用快捷键</title>
    <link href="https://loshine.me/2015/08/20/android-studio-keymap/"/>
    <id>https://loshine.me/2015/08/20/android-studio-keymap/</id>
    <published>2015-08-20T14:31:30.000Z</published>
    <updated>2016-11-16T16:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。</p>
</blockquote>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table>
<thead>
<tr>
<th style="text-align:left">Action</th>
<th style="text-align:left">Mac OSX</th>
<th style="text-align:left">Win/Linux</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">注释代码(//)</td>
<td style="text-align:left">Cmd + /</td>
<td style="text-align:left">Ctrl + /</td>
</tr>
<tr>
<td style="text-align:left">注释代码(/**/)</td>
<td style="text-align:left">Cmd + Option + /</td>
<td style="text-align:left">Ctrl + Shift + /</td>
</tr>
<tr>
<td style="text-align:left">格式化代码</td>
<td style="text-align:left">Cmd + Option + L</td>
<td style="text-align:left">Ctrl + Alt + L</td>
</tr>
<tr>
<td style="text-align:left">清除无效包引用</td>
<td style="text-align:left">Option + Control + O</td>
<td style="text-align:left">Alt + Ctrl + O</td>
</tr>
<tr>
<td style="text-align:left">查找</td>
<td style="text-align:left">Cmd + F</td>
<td style="text-align:left">Ctrl + F</td>
</tr>
<tr>
<td style="text-align:left">查找+替换</td>
<td style="text-align:left">Cmd + R</td>
<td style="text-align:left">Ctrl + R</td>
</tr>
<tr>
<td style="text-align:left">上下移动代码</td>
<td style="text-align:left">Option + Shift + Up/Down</td>
<td style="text-align:left">Alt + Shift + Up/Down</td>
</tr>
<tr>
<td style="text-align:left">删除行</td>
<td style="text-align:left">Cmd + Delete</td>
<td style="text-align:left">Ctrl + Y</td>
</tr>
<tr>
<td style="text-align:left">扩大缩小选中范围</td>
<td style="text-align:left">Option + Up/Down</td>
<td style="text-align:left">Ctrl + W/Ctrl + Shift + W</td>
</tr>
<tr>
<td style="text-align:left">快捷生成结构体</td>
<td style="text-align:left">Cmd + Option + T</td>
<td style="text-align:left">Ctrl + Alt + T</td>
</tr>
<tr>
<td style="text-align:left">快捷覆写方法</td>
<td style="text-align:left">Cmd + O</td>
<td style="text-align:left">Ctrl + O</td>
</tr>
<tr>
<td style="text-align:left">快捷定位到行首/尾</td>
<td style="text-align:left">Cmd + Left/Right</td>
<td style="text-align:left">Ctrl + Left/Right</td>
</tr>
<tr>
<td style="text-align:left">折叠展开代码块</td>
<td style="text-align:left">Cmd + Plus,Minus</td>
<td style="text-align:left">Ctrl + Plus/Minus</td>
</tr>
<tr>
<td style="text-align:left">折叠展开全部代码块</td>
<td style="text-align:left">Cmd + Shift + Plus,Minus</td>
<td style="text-align:left">Ctrl + Shift + Plus,Minus</td>
</tr>
<tr>
<td style="text-align:left">文件方法结构</td>
<td style="text-align:left">Cmd + F12</td>
<td style="text-align:left">Ctrl + F12</td>
</tr>
<tr>
<td style="text-align:left">查找调用的位置</td>
<td style="text-align:left">Ctrl + Option + H</td>
<td style="text-align:left">Ctrl + Alt + H</td>
</tr>
<tr>
<td style="text-align:left">大小写转换</td>
<td style="text-align:left">Cmd + Shift + U</td>
<td style="text-align:left">Ctrl + Shift + U</td>
</tr>
<tr>
<td style="text-align:left">编译项目</td>
<td style="text-align:left">Cmd + F9</td>
<td style="text-align:left">Ctrl + F9</td>
</tr>
<tr>
<td style="text-align:left">运行项目</td>
<td style="text-align:left">Ctrl + R</td>
<td style="text-align:left">Ctrl + R</td>
</tr>
<tr>
<td style="text-align:left">代码提示</td>
<td style="text-align:left">Option + Space</td>
<td style="text-align:left">Alt + Space</td>
</tr>
</tbody>
</table>
<p>(PS: 以上快捷键没有在 win 平台尝试确认，如有错误可以在评论中反馈)</p>
]]></content>
    
    <summary type="html">
    
      之前直接把 Android Studio 的 keymap 改为了 Eclipse 模式，但毕竟这样不利于 Android Studio 的学习，所以这里也记录一下 Android Studio 的快捷键，便于以后查看。
    
    </summary>
    
      <category term="技术" scheme="https://loshine.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android Studio" scheme="https://loshine.me/tags/Android-Studio/"/>
    
      <category term="Android" scheme="https://loshine.me/tags/Android/"/>
    
  </entry>
  
</feed>
